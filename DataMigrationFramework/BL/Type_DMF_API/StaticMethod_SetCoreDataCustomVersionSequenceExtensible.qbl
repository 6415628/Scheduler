Quintiq file version 2.0
#parent: #root
StaticMethod SetCoreDataCustomVersionSequenceExtensible () as owning Strings
{
  Description: '[Deprecated] API to set the CoreDataXXX version info sequence when custom version string added to DMF_UpgradeabilityMetaData. Intended for use with custom versions for project versioning.'
  TextBody:
  [*
    //to be extended, if there are customized CoreDataXXXVersion created, it will be arrange after CoreDataMajorVersion, CoreDataMinorVesion and CoreDataBuild
    /* example
    CoreDataMajorVersion = 6
    CoreDataMinorVersion = 2
    CoreDataBuildVersion = 2
    CoreDataPatchVersion = 0
    
    on user level created
    CoreDataCustom1 = 1
    CoreDataCustom2 = 1
    the output version info will be
    622011 (when exported to template)
    
    if this method is extended and wanted to have CoreDataCustom2 display before CoreDataCustom1
    Note that there is no need to redo the sequencing for CoreDataMajorVersion, CoreDataMinorVesion, CoreDataBuildVersion and CoreDataPatchVersion it is handled by DMF
    valu := construct(Strings).Merge( attribute( DMF_UpgradeabilityMetaData, CoreDataCustom2 ).Name() ).Merge( attribute( DMF_UpgradeabilityMetaData, CoreDataCustom1 ).Name() );
    */
    value := construct( Strings );
    
    return &value;
  *]
  InterfaceProperties { Accessibility: 'Extensible' }
}
