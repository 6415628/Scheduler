Quintiq file version 2.0
#parent: #root
Method PopulateVersionPath () as stream[Void]
{
  TextBody:
  [*
    // sbt2 Jun-30-2021 (created)
    directory     := DomainModel::Domain().GetDefinitionsDirectory();
    directory_abs := FileSystems::QFSPathToHardwarePath( directory.Path() );
    completed_s   := stream[Void]::Success();
    
    traverse( this, DatasetType, type )
    {   
      populated_s := type.CreateTemporaryDataset()->( dataset, directory_abs )
      {
        metadataObject := DMF_UpgradeabilityMetaData::GetMetadataObjectExtensible( dataset );
        
        // Update metadata version
        type.UpdateMetadataVersion( metadataObject );
        
        filePath := "";
        
        // Only do this for dataset types that has at least one VersionPath
        if( type.VersionLookup().VersionPath( relget ).Size() > 0 )
        {
          fileNameParts := construct( Strings );
          fileNameParts.Add( type.Name() );
          
          fileName := fileNameParts.ToString( DMF_Utility::Underscore() ) + DMF_DBInterface::GetDatabaseExtension();
          filePath := DMF_Utility::FormatTrailingDirectoryPath( directory_abs ) + fileName;
          
          type.PopulateVersionPath( filePath, metadataObject );
        }
        
        return filePath;
      }
      ->( filePath )
      {
        if( filePath.Length() > 0 )
        {
          // Cleanup of temp files generated by DataUpgradeIO
          DMF_DBInterface::CheckDeleteFile( filePath );
        }
      }
      
      completed_s := completed_s->Merge( populated_s );
    }
    
    return completed_s;
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
