Quintiq file version 2.0
#parent: #root
Method SynchronizeMPSPlanChartElementsByRouting
{
  Description: 'Synchronize MPS planned order chart elements by routing starting from the day after schedule date for the duration of MPS Plan Horizon.'
  TextBody:
  [*
    allInstances := selectset( this, MPSPlanChartElementByRouting, mpsPlanChartElementByRouting, true )
    updatedInstances := construct( MPSPlanChartElementByRoutings );
    
    traverse( this, MPSPlannedOrder.Routing, routing )
    {
      schedulerDate := this.Schedule().Time().Date();
      chartElementsCounter := 1;
      // We assume the periods are always 1 day size for now
      // We will revisit this when we change the synchronization of MPSChartElements to be based on a derived MPS period size from MP
      nrOfChartElementsNeeded := this.Schedule().IntegrationConfiguration().MPSPlanHorizon().Days();
      
      while( chartElementsCounter <= nrOfChartElementsNeeded )
      {
        dueDate := schedulerDate + Duration::Days( chartElementsCounter );
        mpsPlanChartElementByRouting := MPSPlanChartElementByRouting::FindMPSPlanChartElementByRouting( routing.RoutingId(), dueDate );
        
        if( isnull( mpsPlanChartElementByRouting ) )
        {
          mpsPlanChartElementByRouting := this.Schedule().ObjectFactory().CreateMPSPlanChartElementByRouting( this, routing.RoutingId(), dueDate );
        }
        
        updatedInstances.Add( mpsPlanChartElementByRouting );
        
        chartElementsCounter++;
      }
    }
    
    oldInstances := allInstances.Difference( updatedInstances );
    
    traverse( oldInstances, Elements, mpsPlanChartElementByRouting )
    {
      mpsPlanChartElementByRouting.Remove();
    }
  *]
}
