Quintiq file version 2.0
#parent: #root
Method CreateFSPLSchedule_SingleChildPlanUnit
{
  Description: 'To create test data simulating child plan units for FSPL implementation and testing. For use in Schedule ONLY.'
  TextBody:
  [*
    // FOR FSPL DEMO
    // FOR USE IN Schedule ONLY
    traverse( this, PlanUnit_SC, pu )
    {
      order      := pu.Order_SC();
      quantity := order.Quantity();
      
      pu_id := pu.PlanUnitID();
      new_pu_id := pu_id + '-1';
      
      planunit := PlanUnit_SC::FindPlanUnit( new_pu_id );
      
      if( isnull( planunit ) )
      {
        planunit := GenericPlanUnit::Create( this, new_pu_id );
      }
    
      // can't use plan unit update method as it will create new operations
      planunit.Order_SC( relset, order );
      planunit.Quantity( quantity );
      planunit.NrOfLots( order.GetNrOfLots( quantity ) );
      planunit.IsCreatedInScheduler( order.IsCreatedInScheduler() );
    
      // recreating all HotRolling operations in a separate plan unit
      traverse( pu, Operation_SC, op_sc, op_sc.Type() = 'HotRolling' ) // there's actually only one HotRolling operation 
      {
        // get supplies and demands of old operation
        supplies := selectset( op_sc, PlannedSupply, supply, true );
        demands := selectset( op_sc, PlannedDemand, demand, true );
        
        traverse( op_sc, ToOperationDependency, output_m )
        {
          output_m.Delete();
        }
        
        // gets the width of the operation
        width := op_sc.Width();
        // removes the old operation
        op_sc.Delete();
        // gets the new operation sequence number
        operationseqnr := pu.Operation_SC( relsize ) + 1;
        // genereates new operation id
        operationid := Operation_SC::GenerateOperationID( new_pu_id, operationseqnr );
        
        operation := planunit.CreateOperation( 'HotRolling' );
        prevop := maxselect( pu, Operation_SC, op, true, op.SequenceNr() );
      
        om := select( prevop, ToOperationDependency, o, true );
      
        operation.FromOperationDependency( relinsert, om )
        
        operation.CreateOutputOperationMaterial( planunit.Quantity() );
        
        operation.OperationID( operationid );
        operation.SequenceNr( operationseqnr );
        operation.PreferredResource( '' );
        operation.Width( width );
        
        // setting demands of old operation to new operation
        traverse( demands, Elements, demand )
        {
          demand.Operation_SC( relset, operation );
        }
        // setting supplies of old operation to new operation
        traverse( supplies, Elements, supply )
        {
          supply.Operation_SC( relset, operation );
        }
        
        planunit.Parent( relset, pu );
      }
    }
  *]
}
