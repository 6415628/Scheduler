Quintiq file version 2.0
#parent: #root
Method SynchronizePrecedenceTimeConstraints
{
  Description:
  [*
    Synchronizes time constraints from work order operation precedences in data driven time constraint mode.
    This sync logic assumes work order operation precedences, orders, plan units and their operations have all been synchronized before this method is called.
  *]
  TextBody:
  [*
    // eg. WorkOrder 1, Operation C has operation precedences to WorkOrder 2, Operation A, C -> A. 
    // Which means, all Operation C of all plan untis of Order 1 will have a time constraint to Operation A of all plan units of Order 2.
    
    schedule := this.Schedule();
    allInstances := selectset( schedule, Operation_SC.ToTimeConstraint, timeConstraint, true );
    updatedInstances := construct( TimeConstraints );
    
    // Only create in data driven time constraint mode, otherwise clean up during synchronization
    if( this.Schedule().TechnicalConfiguration().IsDataDrivenTimeConstraintsMode() )
    {                                               
      traverse( schedule, WorkOrderOperationPrecedence, precedence )
      {
        // Grabs all corresponding operations of all plan units of the 'from' order
        fromOperations := selectset( precedence, 
                                     AsFromWOOP.WorkOrder.Order_SC.PlanUnit_SC.Operation_SC, 
                                     op, 
                                     op.WorkOrderSequenceNr() = precedence.FromSequenceNr() );
                                             
        // Grabs all corresponding operations of all plan units of the 'to' order
        toOperations := selectset( precedence, 
                                   AsToWOOP.WorkOrder.Order_SC.PlanUnit_SC.Operation_SC, 
                                   op, 
                                   op.WorkOrderSequenceNr() = precedence.ToSequenceNr() );
        
        // Traverse related operations of the 'from' order
        traverse( fromOperations, Elements, fromOp )
        {
          // Creates the time constraint from the related operations of 'from' order to the related operations of 'to' order
          traverse( toOperations, Elements, toOp )
          {
            timeConstraint := select( fromOp, ToTimeConstraint, timeConstraint, timeConstraint.ToOperation() = toOp );
            
            if( isnull( timeConstraint ) )
            {
              timeConstraint := precedence.CreateTimeConstraint( fromOp, toOp );
            }
            
            timeConstraint.Update( precedence );
            updatedInstances.Add( timeConstraint );
          }
        }
      }
    }
    
    oldInstances := allInstances.Difference( updatedInstances );
    
    traverse( oldInstances, Elements, old )
    {
      old.Delete(); 
    }
  *]
}
