Quintiq file version 2.0
#parent: #root
Method PostPlanUnitSplitReservationAdjustmentForDemand (PlanUnit_SC oldpu, PlanUnit_SC newpu)
{
  Description:
  [*
    This logic here splits the existing planned and fixed reservations of the old demand of the current plan unit, 
    performs greedy material reservation between the old demand and old supply of the current plan unit and the new demand and new supply of the new plan unit.
  *]
  TextBody:
  [*
    oldFulfillments := oldpu.GetPlannedDemandFulfillmentsToSplit();
    oldFulfillmentsQuantities := selectvalues( oldFulfillments, Elements, fulfillment, true, fulfillment.QuantityDecision() );
    Fulfillment::ZeroQuantityDecision( oldFulfillments ); // set to zero so that Supply.GetAvailableQuantityForFulfillment is accurate when assigning to demand
    Transaction::Transaction().Propagate( attribute( Supply, QuantityOpen ) ); // needs to be propagated after setting fulfillment to 0
    Transaction::Transaction().Propagate( attribute( Demand, QuantityOpen ) ); // needs to be propagated after setting fulfillment to 0
    
    traverse( oldFulfillments, Elements, fulfillment )
    {
      importedExternalFulfillment := fulfillment.ImportedFixedFulfillment();
      
      olddemand := fulfillment.Demand();
      oldsupply := fulfillment.Supply();
      
      // maxselect is used because at any given time, there is only ONE planned demand of the same WorkOrderDemandId and WorkOrderInputMaterialId per operation per demand
      // The 'higher' DemandID is the newer demand
      newdemand := maxselect( newpu, 
                              Operation_SC.PlannedDemand, 
                              newdemand,
                              newdemand.DemandType() = olddemand.DemandType(),
                              guard( newdemand.astype( ProductPlannedDemand ).WorkOrderDemandId() = olddemand.astype( ProductPlannedDemand ).WorkOrderDemandId(), false ) // If it is product-based
                              or guard( newdemand.astype( MaterialPlannedDemand ).WorkOrderInputMaterialId() = olddemand.astype( MaterialPlannedDemand ).WorkOrderInputMaterialId(), false ), // If it is characteristic based
                              newdemand.DemandID() );
    
      // demands to fulfill
      grouped_demands := construct( Demands );
      grouped_demands.Add( newdemand );
      grouped_demands.Add( olddemand );
      
      // supplies used, actually there's only one, but its just for code reuse
      supplies := construct( Supplys );
      supplies.Add( oldsupply );
      
      // quantity to keep
      index := oldFulfillments.Find( fulfillment );
      quantity_keep := oldFulfillmentsQuantities.Element( index );
      
      // fulfillments to reset, actually there's only one, but its just for code reuse - FOR AUTOMATIC RESERVATION
      fulfillments_to_reset := construct( Fulfillments );
      fulfillments_to_reset.Add( fulfillment );
      
      if( fulfillment.IsManualReservation() )
      {
        Fulfillment::CreateManualPlannedFulfillments( grouped_demands, supplies, true, quantity_keep );
      }
      else // Fixed reservations are always considered 'auto'
      {
        if( fulfillment.IsFixedReservation() ) 
        {
          newFulfillments := Fulfillment::CreateExternalFulfillments( grouped_demands, supplies, quantity_keep );
          
          traverse( newFulfillments, Elements, newFulfillment ) // New external fulfillments need to be set to its ImportedExternalFulfillment
          {
            newFulfillment.ImportedFixedFulfillment( relset, importedExternalFulfillment );
          }
        }
        else
        {
          // autocreate deletes its own fulfillments with 0 quantity
          Fulfillment::CreateAutoPlannedFulfillments( grouped_demands, supplies, fulfillments_to_reset, true, quantity_keep );
        }
      }
      
      // clean up zero quantities - new fulfillments won't be created with zero quantities, the old fulfillment is also inside newFulfillments if QuantityDecision > 0
      // Otherwise, the old manual fulfillment will maintain QuantityDecision() = 0 and be deleted here
      if( guard( fulfillment.QuantityDecision() = 0, false ) )
      {
        fulfillment.Delete();
      }
    }
  *]
}
