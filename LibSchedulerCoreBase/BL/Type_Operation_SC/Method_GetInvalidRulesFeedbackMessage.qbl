Quintiq file version 2.0
#parent: #root
Method GetInvalidRulesFeedbackMessage (Resource_SC resource, Operation_SC previousoperation, Boolean ishardconstraintforoptimizer) declarative remote as String
{
  Description: 'Get invalid rules feedback message'
  TextBody:
  [*
    // Get invalid rules feedback message
    
    feedbacks := construct( Strings );
    
    // Get invalid rules feedback message for non cumulative checking rules ( Min/Max value, Difference Jump, Value Jump, Overlapping Range )
    rules := this.GetRulesForOperation( resource, previousoperation, null( Characteristic ), null( Task_SC ), null( Task_SC ) );
    traverse( rules, Elements, rule, not isnull( rule.RuleSubType() ) and rule.IsHardConstraintForOptimizer() = ishardconstraintforoptimizer )
    { 
      if( not rule.RuleSubType().Validate( rule, previousoperation, this ) )
      { 
        feedbacks.Add( rule.RuleSubType().GetFeedbackMessage( rule, previousoperation, this ) ); 
      }
    }
    
    // Get invalid rules feedback message for program rules
    feedbacks.Add( this.GetInvalidRulesFeedbackMessageForProgramRules( resource, previousoperation, ishardconstraintforoptimizer ) );
    
    return feedbacks.ToString( String::NewLine() );
  *]
}
