Quintiq file version 2.0
#parent: #root
Method ValidateProgramRulesForConstraintCheck (Resource_SC resource, DORule_DataObjectSequencingRule do_rule, Characteristic characteristic, 
  Boolean ishardconstraintforoptimizer) declarative remote as Boolean
{
  Description: 'Rule validation on current operation and data object rule information for program rule constraint checking'
  TextBody:
  [*
    // Rule validation on current operation and data object rule information for cumulative rule constraint checking
    value := true;
    
    previousoperation := this.GetPreviousOperationForSequencingRuleCheck();
    traverse( this, Task_SC.TaskInProgramSet, tips, value and not isnull( tips.ProgramType() ) )
    {   
      // Check program and phase non cumulative rules ( Min/Max value, Allowed/Not Allowed value, Difference Jump, Value Jump, Overlapping Range )
      // Pass in previous task in program set based on previousoperation
      previoustaskinprogramset := select( previousoperation, Task_SC.TaskInProgramSet, t, t.ProgramSet() = tips.ProgramSet() );
      programnoncumulativerules := tips.GetNonCumulativeRules( previoustaskinprogramset, previousoperation );
      value := forall( programnoncumulativerules, Elements, rule, 
                       this.CheckIsRuleApplicable( rule, previousoperation, characteristic ) 
                       and rule.IsHardConstraintForOptimizer() = ishardconstraintforoptimizer,
                       rule.RuleSubType().Validate( rule, do_rule ) );
    
      // Check program cumulative rules ( Min/Max combined length rules )
      if( value )
      {
        programtyperules := this.GetCumulativeRulesForProgramType( tips.ProgramType().ProgramTypeConfiguration(), previousoperation, characteristic );
        value := forall( programtyperules, Elements, programtyperule,
                         programtyperule.IsHardConstraintForOptimizer() = ishardconstraintforoptimizer,
                         programtyperule.RuleSubType().Validate( programtyperule, tips.GetRuleDataObjectForConstraintPrecondition( programtyperule.CharacteristicMain(), false, 0.0 ) ) );
      }
      
      // Check program phase cumulative rules ( Min/Max combined length rules )
      if( value and not isnull( tips.ProgramPhase() ) )
      {
        programphaserules := this.GetCumulativeRulesForProgramPhase( tips.ProgramPhase().ProgramPhaseConfiguration(), previousoperation, characteristic ); 
        value := forall( programphaserules, Elements, programphaserule,
                         programphaserule.IsHardConstraintForOptimizer() = ishardconstraintforoptimizer,
                         programphaserule.RuleSubType().Validate( programphaserule, tips.GetRuleDataObjectForConstraintPrecondition( programphaserule.CharacteristicMain(), true, 0.0 ) ) );
      }
    }
    
    return value;
  *]
}
