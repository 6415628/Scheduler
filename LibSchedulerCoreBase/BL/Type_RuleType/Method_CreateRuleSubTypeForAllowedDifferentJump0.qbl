Quintiq file version 2.0
#parent: #root
Method CreateRuleSubTypeForAllowedDifferentJump
{
  Description: 'Create all possible combination for RuleSubTypeForAllowedDifferentJump.'
  TextBody:
  [*
    // Absolute different jump
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxAbsoluteDifferenceDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinAbsoluteDifferenceDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedAbsoluteDifferenceDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Upwards(), RuleConstant::Limit_NotAllowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_Downwards(), RuleConstant::Limit_NotAllowed() );
    
    // Percentage difference jump
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxPercentageDifferenceUpwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxPercentageDifferenceDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinPercentageDifferenceUpwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinPercentageDifferenceDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Upwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedPercentageDifferenceDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Downwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Upwards(), RuleConstant::Limit_NotAllowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedPercentageDifferenceDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_Downwards(), RuleConstant::Limit_NotAllowed() );
    
    // For Upwards & Downwards
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    rulesubtype.Update( true, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_NotAllowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Max() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Min() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_Allowed() );
    
    rulesubtype := RuleSubTypeDifferenceJump::Create( this, RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    rulesubtype.Update( false, RuleConstant::Direction_UpwardsDownwards(), RuleConstant::Limit_NotAllowed() );
  *]
}
