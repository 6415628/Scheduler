Quintiq file version 2.0
#parent: #root
MethodOverride InterpretFeedbackTask
{
  TextBody:
  [*
    // jx 26-AUG-2016 
    // process handle feedback tasks
    importedfbtasks := selectsortedset( this.Schedule(),
                                        ImportedFeedbackTask,
                                        fbtask,
                                        not fbtask.IsStoppageTask() 
                                        and fbtask.IsValidDataHard() 
                                        and fbtask.HasFeedback(),
                                        fbtask.Start() );
    
    feedbackmanager := this.FeedbackManager();
    
    if( not isnull( feedbackmanager ) )
    {
      // plans all tasks for continuous operations before handling their feedback
      this.PlanAllFeedbackContinuousOperations( importedfbtasks );
                                 
      traverse( importedfbtasks, Elements, importedfeedbacktask, importedfeedbacktask.HasOperationInScheduler() ) // HasOperationInScheduler already checks whether we have an operation
      {   
        operation := importedfeedbacktask.Operation_SC();
        
        // If operation has planned task but doesnt export before, generate the exported task
        if( not operation.HasFeedback() and isnull( operation.ExportedSingleTask() ) and not isnull( operation.Task_SC() ) )
        {
          et := GenericExportedSingleTask::Create( this.Schedule().FeedbackManager().GetSchedule(), operation );
          et.Update( operation.Task_SC(), operation );
        }
    
        // Cancel obsoleted feedback if the operation received batch feedback previously
        if( operation.HasBatchFeedback() )
        {
          operation.CancelObsoletedBatchFeedback( importedfeedbacktask.Start() );
        }
        
        task := operation.Task_SC();
        
        // If feedback is first time imported and task is not null, set the feedback to have the task duration
        // If doesn't, get back the existing feedback duration/exported duration    
        if( not isnull( task ) and not operation.HasFeedback() )
        {
          importedfeedbacktask.ExportedProcessDuration( task.ProcessDuration() );
        }
        else
        {
          importedfeedbacktask.ExportedProcessDuration( guard( operation.ActiveOperationFeedback().ReportedDuration(),
                                                               guard( operation.ExportedSingleTask().ExportedProcessDuration(), Duration::Zero() ) ) );
        }
        Transaction::Transaction().Propagate( attribute( ImportedFeedbackTask, EstimatedEnd ) );
        
        // updates the estimated end on operation from feedback, to be used by FeedbackTaskInSchedule
        operation.UpdateEstimatedEnd( importedfeedbacktask );
        
        status := importedfeedbacktask.Status();
        resource := importedfeedbacktask.Resource();
        remark := importedfeedbacktask.Remark();
        reportedStart := importedfeedbacktask.ReportedStart();
        reportedEnd := importedfeedbacktask.ReportedEnd();
        reportedProcessStart := importedfeedbacktask.ReportedProcessStart();
        
        // edi status: 1. Start, 2. End, 3 Aborted. 4. cancelled 
        if( status = Constants::StatusStart() )
        {
          feedbackmanager.TaskStart( operation, resource, reportedStart, reportedProcessStart, remark );
        }
        
        if( status = Constants::StatusEnd() )
        {
          if( reportedStart.IsFinite() and not operation.HasStarted() ) 
          {
            //When shopfloor give feedback start and end. Import is done after feedback end.
            //So, when import, the status is End, but actually both Start and End is executed.
            feedbackmanager.TaskStart( operation, resource, reportedStart, reportedProcessStart, remark );
          }
          
          feedbackmanager.TaskEnd( operation, resource, reportedStart, reportedProcessStart, reportedEnd, remark );
        }  
        
        if( status = Constants::StatusAborted() )
        {
          if( reportedStart.IsFinite() and not operation.HasStarted() ) 
          {
            //When edi give feedback start and abort. Import is done after feedback abort.
            //So, when import, the status is Aborted, but actually both Start and Abort is executed.
            feedbackmanager.TaskStart( operation, resource, reportedStart, importedfeedbacktask.ReportedProcessStart(), remark );
          }
          feedbackmanager.TaskAborted( operation, resource, reportedEnd, remark );
        } 
        
        
        if( status = Constants::StatusCancelled() )
        {     
          feedbackmanager.TaskCancelled( operation, resource, reportedEnd, remark );
        }
      }
    }
  *]
}
