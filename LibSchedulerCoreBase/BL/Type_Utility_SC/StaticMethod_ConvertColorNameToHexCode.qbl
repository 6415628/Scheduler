Quintiq file version 2.0
#parent: #root
StaticMethod ConvertColorNameToHexCode (String colorCode) const declarative remote as String
{
  TextBody:
  [*
    // zi hao May-16-2017 (created)
    input := colorCode.ToLower();
    result := input; 
    
    //Convert color name to hex code 
    if ( input = Constants::Color_Black() ) 
    {
      result := Constants::HexCode_Black();
    }
    else if ( input = Constants::Color_Blue() )
    {
      result := Constants::HexCode_Blue();
    }
    else if ( input = Constants::Color_Cyan() )
    {
      result := Constants::HexCode_Cyan();
    }
    else if ( input = Constants::Color_DarkBlue() )
    {
      result := Constants::HexCode_DarkBlue();
    }
    else if ( input = Constants::Color_DarkGreen() )
    {
      result := Constants::HexCode_DarkGreen();
    }
    else if ( input = Constants::Color_DarkRed() )
    {
      result := Constants::HexCode_DarkRed();
    }
    else if ( input = Constants::Color_Gray() )
    {
      result := Constants::HexCode_Gray();
    }
    else if ( input = Constants::Color_Green() )
    {
      result := Constants::HexCode_Green();
    }
    else if ( input = Constants::Color_LightGray() )
    {
      result := Constants::HexCode_LightGray();
    }
    else if ( input = Constants::Color_Orange() )
    {
      result := Constants::HexCode_Orange();
    }
    else if ( input = Constants::Color_Puce() )
    {
      result := Constants::HexCode_Puce();
    }
    else if ( input = Constants::Color_Purple() )
    {
      result := Constants::HexCode_Purple();
    }
    else if ( input = Constants::Color_Red() )
    {
      result := Constants::HexCode_Red();
    }
    else if ( input = Constants::Color_White() )
    {
      result := Constants::HexCode_White();
    }
     
    return result.ToUpper();
  *]
}
