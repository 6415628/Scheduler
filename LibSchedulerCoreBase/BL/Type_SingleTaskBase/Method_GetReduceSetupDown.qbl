Quintiq file version 2.0
#parent: #root
MethodOverride GetReduceSetupDown () declarative as Boolean
{
  Description: 'Calculate the ReduceSetupDown'
  TextBody:
  [*
    /* desc:
    1) we need to know current setup duration (before move)
        - because this is to check if it helps to reduce setup duration when we move previous therefore we need to know the setup duration for 2 task before us and 1 task after us
        - EXAMPLE: Task 1,2,3,4 (we are 3), we need to know current setup duration for Task 1 + 2 + 3 + 4
    2) we need to know new setup duration (after move)
        - the setup duration for Task 1 will not change so we will not count it (take its current setup duration)
        - because we will move before us, we need to check what is the setup duration from Task 1 to us (GetSetupDuration(this.Previous().Previous().Operation, this.Operation)
        - because when we move previous the setup duration for previous task will also effect therefore we need to count...
        - because when we move previous the setup duration for next task will also effect therefore we need to count...
        - EXAMPLE: move 3 to infront of 2, so the sequence will now be 1,3,2,4 therefore we need to count the setup duration from 1 -> 3, 3-> 2, and 2 -> 4..
    */
    
    //VARIABLES
    originalsetupduration := Duration::Zero();
    newsetupduration      := Duration::Zero();
    previoustask          := this.Previous();
    nexttask              := this.Next();
    nextofnexttask        := null( Task_SC );
    
    //Saravanen 03-Jun-13 #3114
    
    //Legend:
    //A B C D are tasks
    //A is B.Previous() and C is B.Next()
    //I am Task B
    //Brackets ( ) indicate that the setup duration of tasks inside the brackets are being calculated
    if( not isnull( previoustask ) )
    {
      //( A B ) C D
      originalsetupduration := originalsetupduration + this.GetSetupDuration( previoustask, this );
    
      if( not isnull( nexttask ) )
      {
        //( A C ) B D
        newsetupduration := newsetupduration + this.GetSetupDuration( previoustask, nexttask );
      }
    }
    
    if( not isnull( nexttask ) )
    {
      //A ( B C ) D
      originalsetupduration := originalsetupduration + this.GetSetupDuration( this, nexttask );
      //A ( C B ) D
      newsetupduration := newsetupduration + this.GetSetupDuration( nexttask, this );
      nextofnexttask        := nexttask.Next();
      if( not isnull( nextofnexttask ) )
      {
        //A B ( C D )
        originalsetupduration := originalsetupduration + this.GetSetupDuration( nexttask, nextofnexttask );
        //A C ( B D )
        newsetupduration      := newsetupduration + this.GetSetupDuration( this, nextofnexttask );
      }
    }
    
    return ( newsetupduration < originalsetupduration ) and ( not isnull( nexttask ) )
  *]
}
