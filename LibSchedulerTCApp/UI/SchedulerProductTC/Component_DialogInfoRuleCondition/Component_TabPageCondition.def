Quintiq file version 2.0
Component TabPageCondition
{
  #keys: '[131060.0.3969952]'
  BaseType: 'TabPage'
  GBLayout
  {
    Type: 'internal[GBLayoutDefinition]'
    Columns:
    [
      GBFlow.Column { grow: 128 id: 844 parent: 0 }
    ]
    Elements:
    [
      GBElement
      {
        Component => /GroupPanelConditionExample
        Position { startcolumn: 844 startrow: 370 endcolumn: 844 endrow: 370 }
      }
      GBElement
      {
        Component => LabelConditionDetails
        Position { startcolumn: 844 startrow: 468 endcolumn: 844 endrow: 468 }
      }
      GBElement
      {
        Component => LabelConditionDetailsOnSequenceDependentRules
        Position { startcolumn: 844 startrow: 838 endcolumn: 844 endrow: 838 }
      }
      GBElement
      {
        Component => LabelConditionScopeFirstTask
        Position { startcolumn: 844 startrow: 914 endcolumn: 844 endrow: 914 }
      }
      GBElement
      {
        Component => LabelConditionScopeSecondTask
        Position { startcolumn: 844 startrow: 413 endcolumn: 844 endrow: 413 }
      }
      GBElement
      {
        Component => LabelConditionScopeBothTasks
        Position { startcolumn: 844 startrow: 280 endcolumn: 844 endrow: 280 }
      }
      GBElement
      {
        Component => LabelConditionScopeEitherTask
        Position { startcolumn: 844 startrow: 634 endcolumn: 844 endrow: 634 }
      }
    ]
    Gaps: [ left: 5 right: 5 top: 5 bottom: 5 inner: 5 ]
    Rows:
    [
      GBFlow.Row { grow: 0 id: 468 parent: 0 }
      GBFlow.Row { grow: 0 id: 838 parent: 0 }
      GBFlow.Row { grow: 0 id: 914 parent: 0 }
      GBFlow.Row { grow: 0 id: 413 parent: 0 }
      GBFlow.Row { grow: 0 id: 280 parent: 0 }
      GBFlow.Row { grow: 0 id: 634 parent: 0 }
      GBFlow.Row { grow: 128 id: 370 parent: 0 }
    ]
  }
  Children:
  [
    Component LabelConditionDetails
    {
      #keys: '[139364.0.103892291]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 0
        Text: 'Use the condition in case the rule only applies when a Boolean is true or false.'
        Transparent: true
      ]
    }
    #child: GroupPanelConditionExample
    Component LabelConditionDetailsOnSequenceDependentRules
    {
      #keys: '[143388.1.18279779]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 60
        Text: 'For sequence dependent rules, it is also possible to indicate if the Boolean condition is checked against:'
        Transparent: true
      ]
    }
    Component LabelConditionScopeFirstTask
    {
      #keys: '[143388.1.18279797]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 40
        Text: '• First task only'
        Transparent: true
      ]
    }
    Component LabelConditionScopeSecondTask
    {
      #keys: '[143388.1.18279848]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 40
        Text: '• Second task only'
        Transparent: true
      ]
    }
    Component LabelConditionScopeBothTasks
    {
      #keys: '[143388.1.18279856]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 40
        Text: '• Both tasks'
        Transparent: true
      ]
    }
    Component LabelConditionScopeEitherTask
    {
      #keys: '[143388.1.18279864]'
      BaseType: 'Label'
      Properties:
      [
        NumberColumns: 40
        Text: '• Either task'
        Transparent: true
      ]
    }
  ]
  Properties:
  [
    Title: 'Condition'
    ModeledStringList ChildOrdering
    {
      c: LabelConditionDetails
      c: GroupPanelConditionExample
      c: LabelConditionDetailsOnSequenceDependentRules
      c: LabelConditionScopeFirstTask
      c: LabelConditionScopeSecondTask
      c: LabelConditionScopeBothTasks
      c: LabelConditionScopeEitherTask
    }
  ]
}
