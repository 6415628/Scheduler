Quintiq file version 2.0
#parent: #root
Response OnDrop (structured[Operation_SC] source, BatchResource droprow, Batch droptarget, 
  Batch beforedroptarget, Batch afterdroptarget) id:Response_GanttChartSchedulingCentre_OnDrop_16
{
  #keys: '[109706.2.147127524]'
  Body:
  [*
    // OnDrop structured[Operation] --> Batch on BatchResource
    
    ctrlshift := dropaction.IsControlShift();
    
    if( not isnull( guard( droptarget.BatchTask(), null( BatchTask ))) and not ctrlshift )
    {
      // (Add operation to batch)
      droptarget.AddOperations( source );
    }
    else
    {
      // OnDrop structured[Operation] --> BatchResource (Create new batch)
      droprow.CreateBatchAssignOperationsPlanBatch( source, guard( beforedroptarget.BatchTask(), null( BatchTask ) ) );
    }
  *]
  DefinitionID: 'Responsedef_GanttChart_OnDrop'
  Precondition:
  [*
    isallowedhard := true;
    ctrlkey       := dropaction.IsControl();
    ctrlshiftkey  := dropaction.IsControlShift();
    
    operations := construct( Operation_SCs );
    aftertask := guard( droptarget.BatchTask(), null( BatchTask ) );
    
    if( not ctrlshiftkey ) //when ctrlshiftkey = false and not isnull droptarget, the intention is to merge all operations into the droptarget
    {
      operations  := selectset( droptarget, BatchSequenceElement.Operation_SC, op, true, true ); //operations from the drop target
      aftertask := guard( afterdroptarget.BatchTask(), null( BatchTask ) );
    }
    
    source := source.Union( operations );
    
    return  ApplicationScheduler.AllowedScheduling( droprow,            //batchresource
                                                    source,             //structured operations
                                                    ctrlkey,            //skip soft check
                                                    ctrlshiftkey,       //ctrl shift key
                                                    guard( beforedroptarget.BatchTask(), null( BatchTask ) ),   //before task
                                                    aftertask,          //afterbatch
                                                    Operation_SC::GetSelectedObjects( source ),
                                                    feedback,
                                                    isallowedhard )
  *]
}
