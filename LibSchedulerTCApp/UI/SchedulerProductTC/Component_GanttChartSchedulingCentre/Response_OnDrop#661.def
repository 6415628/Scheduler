Quintiq file version 2.0
#parent: #root
Response OnDrop (structured[DemandBatch] source, BatchResource droprow, Task_SC droptarget, 
  Task_SC beforedroptarget, Task_SC afterdroptarget) id:Response_GanttChartSchedulingCentre_OnDrop_661
{
  #keys: '[133896.0.973739097]'
  Body:
  [*
    // OnDrop structured[DemandBatch] --> Batch Task on BatchResource
    
    ctrlshift := dropaction.IsControlShift();
    
    sourceoperations := selectset( source, Elements.BatchWorkOrder.Order_SC.PlanUnit_SC.Operation_SC, operation,
                                   operation.Type() = droprow.Type() );
    
    if( isnull( beforedroptarget)
        and guard( not isnull( droprow.LastFeedbackBatchInSchedule().BatchTask() ), false ) )
    {
      beforedroptarget := droprow.LastFeedbackBatchInSchedule().BatchTask()
    }
    
    if( not isnull( droptarget.astype( BatchTask ) ) and not ctrlshift )
    {
      // Add operation to batch
      droptarget.astype( BatchTask ).Batch().AddOperations( sourceoperations );
    }
    else
    {
      // Create new batch
      droprow.CreateBatchAssignOperationsPlanBatch( sourceoperations, guard( beforedroptarget.astype( BatchTask ), null( BatchTask ) ) );
    }
  *]
  DefinitionID: 'Responsedef_GanttChart_OnDrop'
  Precondition:
  [*
    isallowedhard := true;
    ctrlkey       := dropaction.IsControl();
    ctrlshiftkey  := dropaction.IsControlShift();
    
    sourceoperations := selectset( source, Elements.BatchWorkOrder.Order_SC.PlanUnit_SC.Operation_SC, operation,
                                   operation.Type() = droprow.Type() );
    operations := construct( Operation_SCs );
    aftertask := droptarget;
    
    if( isnull( beforedroptarget)
        and guard( not isnull( droprow.LastFeedbackBatchInSchedule().BatchTask() ), false ) )
    {
      beforedroptarget := droprow.LastFeedbackBatchInSchedule().BatchTask()
    }
    
    if( not ctrlshiftkey ) //when ctrlshiftkey = false and not isnull droptarget, the intention is to merge all operations into the droptarget
    {
      operations  := selectset( droptarget, OperationInTask, op, true, true ); //operations from the drop target
      aftertask := afterdroptarget;
    }
    
    sourceoperations := sourceoperations.Union( operations );
    
    return  ApplicationScheduler.AllowedScheduling( droprow,            //batchresource
                                                    sourceoperations,   //structured operations
                                                    ctrlkey,            //skip soft check
                                                    ctrlshiftkey,       //ctrl shift key
                                                    beforedroptarget,   //before task
                                                    aftertask,          //afterbatch
                                                    Operation_SC::GetSelectedObjects( sourceoperations ),
                                                    feedback,
                                                    isallowedhard )
  *]
}
