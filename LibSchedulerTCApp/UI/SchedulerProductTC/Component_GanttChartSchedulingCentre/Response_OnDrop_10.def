Quintiq file version 2.0
#parent: #root
Response OnDrop (structured[Operation_SC] source, CampaignTypeOnResource droprow, CampaignTask droptarget, 
  CampaignTask beforedroptarget, CampaignTask afterdroptarget) id:Response_GanttChartSchedulingCentre_OnDrop_10
{
  #keys: '[12910.0.1217066809]'
  Body:
  [*
    // OnDrop structured[Operation] --> CampaignTask 
    lastTask := null( Task_SC );
    
    if( not isnull( beforedroptarget ) )
    {
      lastTask := beforedroptarget.LastOperationCampaign().Task_SC();
    }  
    
    if( droprow.Resource_SC().istype( SingleResourceBase ) )
    {
      // Campaign task for single resource
      droprow.Resource_SC().astype( SingleResourceBase ).PlanAfter( source, lastTask.astype ( SingleTaskBase ) );
    }
    else
    {
      // Campaign task for batch resource
      droprow.Resource_SC().astype( BatchResource ).CreateBatchAssignOperationsPlanBatch( source, guard( lastTask.astype( BatchTask ), null( BatchTask ) )  );
    }
  *]
  DefinitionID: 'Responsedef_GanttChart_OnDrop'
  Precondition:
  [*
    isallowedhard := true;
    aftercampaigntask := guard( droprow.FirstCampaignTaskOfTypeOnResource(), null( CampaignTask ) );
    ctrlkey       := dropaction.IsControl();
    ctrlshift     := dropaction.IsControlShift();
    identifier := Operation_SC::GetSelectedObjects( source );
    
    if( not isnull( beforedroptarget ) )
    {
      aftercampaigntask := guard( beforedroptarget.NextCampaignTaskOfTypeOnResource(), null( CampaignTask ) );
    }
    
    return ApplicationScheduler.AllowedScheduling( droprow.Resource_SC(),
                                                   source,
                                                   ctrlkey,
                                                   ctrlshift,
                                                   beforedroptarget,
                                                   aftercampaigntask,
                                                   identifier,
                                                   feedback,
                                                   isallowedhard );
  *]
  UserRequiresReadWrite: true
}
