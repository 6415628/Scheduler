Quintiq file version 2.0
#parent: #root
TypeDataInterface LibOpt_Run
{
  TypeKey: '[139164.0.16781098]'
  ImageDataMember ImgAutoAnalysis
  {
    #keys: '1[154526.0.317224117]'
    Description: 'Whether this run is automatically analyzed after it is finished.'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'This run will automatically be analyzed after it is finished.'
        Image: 'CHART_SPLINE'
        Quill: 'object.AutoAnalysisEnabled()'
        Value: 'AutoAnalysis'
      }
    ]
  }
  ImageDataMember ImgAutomaticCleanup
  {
    #keys: '1[144996.1.100937297]'
    Description: 'Whether this run is automatically cleaned up'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'This run will be automatically cleaned up.'
        Image: 'BROOM'
        Quill:
        [*
          object.OptimizerIsAutoCleanup()
          and object.AutoCleanupEnabled()
        *]
        Value: 'Cleanup enabled'
      }
    ]
  }
  ImageDataMember ImgAutomaticPropagation
  {
    #keys: '1[141860.2.806536856]'
    Description: 'Whether this run has automatic propagation enabled or not'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'This run automatically calls a propagate-all each time non-LibOpt code is executed. This greatly inpacts the performance of the optimizer, but it ensures that any propagation errors are shown in the correct spot in the Snapshots form.'
        Image: 'GEARS'
        Quill: 'object.HasToPropagateAfterUserCode();'
        Value: 'Automatic propagation'
      }
    ]
  }
  ImageDataMember ImgDatasetCopiesEnabled
  {
    #keys: '1[141860.2.806536854]'
    Description: 'Whether this run is allowed to create dataset copies or not'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'Dataset copies can be created during this run.'
        Image: 'DATA_OK'
        Quill: 'object.IsCreatingDatasetCopiesEnabled();'
        Value: 'Dataset copies enabled'
      }
    ]
  }
  ImageDataMember ImgDebugScope
  {
    #keys: '1[139164.0.2058709033]'
    Description: 'Whether this run has debug scope enabled or not.'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'This run stores the scope elements that are used by each component, allowing you to inspect them for debugging purposes.'
        Image: 'DEBUG'
        Quill: 'object.DebugScope()'
        Value: 'Debug scope'
      }
    ]
  }
  ImageDataMember ImgHasParallelism
  {
    #keys: '1[148676.0.207021019]'
    Description: 'Whether this run has parallel iterations, or was executed completely linear.'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'Parallel'
        Image: 'GRAPH_FORK'
        Quill: 'object.ParallelismNumberWithoutWaiting() > 1'
        Value: 'Parallel'
      }
      ImageDataMemberImageSpecification
      {
        Description: 'Non-parallel'
        Image: 'GRAPH_FROM'
        Quill: 'object.ParallelismNumberWithoutWaiting() <= 1'
        Value: 'Non-parallel'
      }
    ]
  }
  ImageDataMember ImgStatus
  {
    #keys: '1[139164.5.58622818]'
    Description: 'The status of the run'
    ImageSpecifications:
    [
      ImageDataMemberImageSpecification
      {
        Description: 'Optimizing'
        Image: 'MEDIA_PLAY_GREEN'
        Quill: 'object.Status() = LibOpt_RunStatus::Optimizing()'
        Value: 'Optimizing'
      }
      ImageDataMemberImageSpecification
      {
        Description: 'Paused'
        Image: 'MEDIA_PAUSE'
        Quill: 'object.Status() = LibOpt_RunStatus::Paused()'
        Value: 'Paused'
      }
      ImageDataMemberImageSpecification
      {
        Description: 'Aborted'
        Image: 'MEDIA_STOP_RED'
        Quill: 'object.Status() = LibOpt_RunStatus::Aborted()'
        Value: 'Aborted'
      }
      ImageDataMemberImageSpecification
      {
        Description: 'Loaded'
        Image: 'ARROW_INTO'
        Quill: 'object.Status() = LibOpt_RunStatus::Loaded()'
        Value: 'Loaded'
      }
      ImageDataMemberImageSpecification
      {
        Description: 'Finished'
        Image: 'SIGNAL_FLAG_CHECKERED'
        Quill: 'object.Status() = LibOpt_RunStatus::Finished()'
        Value: 'Finished'
      }
    ]
  }
}
