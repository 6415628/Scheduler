Quintiq file version 2.0
#parent: #root
Method DoInitializeReactive (const LibOpt_Task task) const as stream[Algorithm]
{
  Description:
  [*
    Call the `InitializeReactive` method on your suboptimizer. The `InitializeReactive` method should return a stream of the algorithm type this suboptimizer is solving.
    This method (`DoInitializeReactive`) should not call the `InitializeReactive` reactively, but allow the user to create their reactive calls in `InitializeReactive`.
    
    To be overridden in the "LibOpt" library, when creating a new base suboptimizer type for a new solver type.
  *]
  IsAbstract: true
  TextBody:
  [*
    // To be overridden.
    // - Ideally, you would introduce an `IntializeReactive` method on the subclass of the suboptimizer, which returns a stream
    //   of the specific Algorithm type.
    // - For example, for the `LibOpt_SuboptimizerMP` type, the `IntializeReactive` method returns a `stream[MathematicalProgram]`.
    
    return null( stream[Algorithm] );
  *]
}
