Quintiq file version 2.0
#parent: #root
InfoMessages id:#InfoMessages #extension
{
  InfoMessage LibOpt_AnalysisAttribute_CannotBeRemoved
  {
    DefaultText: 'None of the attributes can be removed.'
  }
  InfoMessage LibOpt_AnalysisAttribute_Correlate_NeedExactly2
  {
    DefaultText: 'Exactly 2 attributes are required for correlation.'
  }
  InfoMessage LibOpt_AnalysisAttribute_Correlate_SameAnalysis
  {
    DefaultText: 'Correlation needs to be done from the same analysis.'
  }
  InfoMessage LibOpt_AnalysisFilterAttribute_UnsupportedType (const String type)
  {
    DefaultText: 'Filtering on the value type "@type@" is not supported (yet). Currently only BinaryValues, Booleans, Durations, Numbers and Reals are supported.'
  }
  InfoMessage LibOpt_AnalysisFilterScopeElement_NoScopeDebug
  {
    DefaultText: 'The run does not have debug scope enabled. Filtering may result in all snapshots being filtered. Press Ctrl to override.'
  }
  InfoMessage LibOpt_Analysis_NoIterations
  {
    DefaultText: 'The run we are analyzing does not have the iterations calculated. This may result in errors. Please press the button on the iterations form to calculate it.'
  }
  InfoMessage LibOpt_Analysis_NotSelected
  {
    DefaultText: 'There is no analysis selected.'
  }
  InfoMessage LibOpt_ComponentConfiguration_Iterator_WillNotContinueOnError
  {
    DefaultText:
    [*
      The link to the next component has a task transporter that is configured to run in the same transaction as the iterator.
      Note that if this component or any other component that is run in the same transaction fails (either an error or a rollback), the iterator will not continue iterating.
    *]
  }
  InfoMessage LibOpt_BreakpointPosition_HasEnabledPropagationAfterUserCodeOptimizer (const LibOpt_Run run, const LibOpt_Component component)
  {
    DefaultText:
    [*
      The 'Debugging propagation error' toggle is disabled on the '@run.OptimizerName()@' optimizer. Therefore, during the next run, a propagate might not happen after any user code is executed.
      Any propagation errors created during the execution of the '@component.Name()@' component might only be propagated when the next component is being executed. A @typeof( LibOpt_Error ).Name()@ snapshot might therefore show up on the wrong component in the 'Snapshot' form.
    *]
  }
  InfoMessage LibOpt_BreakpointPosition_HasEnabledPropagationAfterUserCodeRun (const LibOpt_Run run, const LibOpt_Component component)
  {
    DefaultText:
    [*
      The 'Debugging propagation error' toggle is disabled during this optimizer run (run @run.RunNr()@). Therefore, during this run, a propagate might not happen after any user code is executed.
      Any propagation errors created during the execution of the '@component.Name()@' component might only be propagated when the next component is being executed. A @typeof( LibOpt_Error ).Name()@ snapshot might therefore show up on the wrong component in the 'Snapshot' form.
    *]
  }
  InfoMessage LibOpt_BreakpointPosition_IsDatasetCopyEnabledOptimizer (const LibOpt_Run run)
  {
    DefaultText: "No dataset copies will be created during the next optimizer run, because dataset copies are disabled on the '@run.OptimizerName()@' optimizer."
  }
  InfoMessage LibOpt_BreakpointPosition_IsDatasetCopyEnabledRun (const LibOpt_Run run)
  {
    DefaultText: 'No dataset copies are created during this optimizer run (run @run.RunNr()@), because dataset copies are disabled on this run.'
  }
  InfoMessage LibOpt_BreakpointPosition_Precondition_AtMostOneBreakpoint (const LibOpt_Component component, const LibOpt_BreakpointPosition componentposition)
  {
    DefaultText: "It is not possible to attach more than one breakpoint to the '@componentposition.Name()@' component position of the '@component.Name()@' component. Please remove any existing breakpoint on this component position first."
  }
  InfoMessage LibOpt_BreakpointPosition_HasNoBreakpointsConditional (constcontent Number number)
  {
    DefaultText: 'This component position has @number@ conditional breakpoint(s) attached.'
  }
  InfoMessage LibOpt_BreakpointPosition_HasNoDatasetCopies
  {
    DefaultText: 'This component position has a normal dataset copy attached.'
  }
  InfoMessage LibOpt_BreakpointPosition_HasNoDatasetCopiesConditional (const String definitionname)
  {
    DefaultText: 'This component position has a @definitionname@ conditional dataset copy attached.'
  }
  InfoMessage LibOpt_BreakpointPosition_Precondition_AtMostOneDatasetCopy (const LibOpt_Component component, const LibOpt_BreakpointPosition componentposition)
  {
    DefaultText: "It is not possible to attach more than one dataset copy to the '@componentposition.Name()@' component position of the '@component.Name()@' component. Please remove any existing dataset copy on this component position first."
  }
  InfoMessage LibOpt_BreakpointPosition_Precondition_NoDatasetContinue (const LibOpt_Component component)
  {
    DefaultText:
    [*
      Dataset copies are not supported on the '@LibOpt_Component::ComponentPosition_Continue()@' component position of the '@component.Name()@' component.
      Please consider placing the dataset copy on the '@LibOpt_Component::ComponentPosition_Initialize()@' component position of the next component.
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionDoFinalizeDescription
  {
    DefaultText:
    [*
      This happens right after all downstream components have been completely executed (or have failed). 
      See the `DoFinalize` method (for dataset copies) or the `DoFinalizeBreakpoint` method (for breakpoints).
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionSolveDescription
  {
    DefaultText:
    [*
      This happens after the solver has executed and before the handle result is called.
      See the `DoHandleResultCall` method.
    *]
  }
  InfoMessage LibOpt_Component_CopyDataset_CopyIsBeingCreated (constcontent String datasetname)
  {
    DefaultText: 'A dataset copy is being created - @datasetname@'
  }
  InfoMessage LibOpt_Component_CopyDataset_FailedToCreateDataset (const String datasetname)
  {
    DefaultText: 'An error occured during the creation of the dataset copy. The name of the dataset copy might be too long - @datasetname@'
  }
  InfoMessage LibOpt_Component_CopyDataset_ManualDeletionMessage (const String datasetname)
  {
    DefaultText: 'The dataset copy has been deleted by a manual action - @datasetname@'
  }
  InfoMessage LibOpt_Component_CopyDataset_NoDeletionReasonSpecified (constcontent String datasetname)
  {
    DefaultText: 'The dataset copy has been deleted (no reason specified) - @datasetname@'
  }
  InfoMessage LibOpt_Component_CopyDataset_OptimizerDeletionMessage (const String datasetname)
  {
    DefaultText: 'The dataset copy has been deleted by the optimizer - @datasetname@'
  }
  InfoMessage LibOpt_Component_CopyDataset_CopyHasBeenCreated (const String datasetname)
  {
    DefaultText: 'A dataset copy has been created - @datasetname@'
  }
  InfoMessage LibOpt_Component_EnableHeatMap
  {
    DefaultText: 'Please enable heat map visualization.'
  }
  InfoMessage LibOpt_Component_Iterators
  {
    DefaultText: 'Iterators'
  }
  InfoMessage LibOpt_Component_Others
  {
    DefaultText: 'Others'
  }
  InfoMessage LibOpt_Component_Selectors
  {
    DefaultText: 'Selectors'
  }
  InfoMessage LibOpt_Component_Suboptimizers
  {
    DefaultText: 'Suboptimizers'
  }
  InfoMessage LibOpt_Component_Switches
  {
    DefaultText: 'Switches'
  }
  InfoMessage LibOpt_Component_Transformers
  {
    DefaultText: 'Transformers'
  }
  InfoMessage LibOpt_DeprecatedModelElement (const String type, const String versionnr, const String deprecated, 
    const String current)
  {
    DefaultText: 'The `@deprecated@` @type@ has been DEPRECATED. It will be removed in Release [@versionnr@]. Use `@current@` instead.'
  }
  InfoMessage LibOpt_Issue_Details_Error (const Number nr_times, const String error_message)
  {
    DefaultText: 'An error is thrown@ifexpr( nr_times = 1, \'\', \' \' + [String] nr_times + \' times\')@: "@error_message@"'
  }
  InfoMessage LibOpt_Issue_Details_ScopeElementInput (const Real percentage, const Real lowerbound, const Real upperbound, 
    const String format)
  {
    DefaultText: "Scope element is chosen @ifexpr( percentage < lowerbound, 'less', 'more' )@ often as input for the suboptimizer: in @percentage.Format(format)@% of the iterations, while [@lowerbound.Format(format)@%, @upperbound.Format(format)@%] is normal."
  }
  InfoMessage LibOpt_Issue_Details_ScopeElementNoImprovement (constcontent Real percentage, constcontent Real lowerbound, constcontent Real upperbound, 
    constcontent String format)
  {
    DefaultText: "Scope element results @ifexpr( percentage < lowerbound, 'less', 'more' )@ often in an iteration without improvement: in @percentage.Format(format)@% of the iterations, while [@lowerbound.Format(format)@%, @upperbound.Format(format)@%] is normal."
  }
  InfoMessage LibOpt_Issue_Details_ScopeElementRollback (const Real percentage, const Real lowerbound, const Real upperbound, 
    const String format)
  {
    DefaultText: "Scope element results @ifexpr( percentage < lowerbound, 'less', 'more' )@ often in a rollback: in @percentage.Format(format)@% of the iterations, while [@lowerbound.Format(format)@%, @upperbound.Format(format)@%] is normal."
  }
  InfoMessage LibOpt_Issue_Details_SuboptimizerKPIImprovement (Real current, constcontent Real lowerbound, constcontent Real upperbound, 
    constcontent String format)
  {
    DefaultText: "@ifexpr( current < lowerbound, 'Low', 'High' )@ KPI improvement: @current.Format(format)@, while [@lowerbound.Format(format)@, @upperbound.Format(format)@] is normal."
  }
  InfoMessage LibOpt_Issue_Details_TimeComponentAbsolute (const Real value, Real lowerbound, constcontent Real upperbound, 
    const String format)
  {
    DefaultText: '@ifexpr( value < lowerbound, "Short", "Long" )@ total component duration: @value.Format( format )@s. Normal range is [@lowerbound.Format( format )@s, @upperbound.Format( format )@s]'
  }
  InfoMessage LibOpt_Issue_Details_TimeComponentRelative (constcontent Real value, constcontent Real aim, constcontent String format)
  {
    DefaultText: 'Fast component duration: @value.Format( format )@% of the total iteration time. Aim is > @aim.Format( format )@%'
  }
  InfoMessage LibOpt_Issue_Details_TimeIterationAbsolute (constcontent Real value, Real lowerbound, const Real upperbound, 
    constcontent String format)
  {
    DefaultText: '@ifexpr( value < lowerbound, "Short", "Long" )@ iteration duration: @value.Format( format )@s. Normal range is [@lowerbound.Format( format )@s, @upperbound.Format( format )@s]'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerHandleResultAbsolute (constcontent Real value, Real lowerbound, const Real upperbound, 
    constcontent String format)
  {
    DefaultText: '@ifexpr( value < lowerbound, "Fast", "Slow" )@ algorithm handle result: @value.Format( format )@s of the total suboptimizer time. Normal range is [@lowerbound.Format( format )@s, @upperbound.Format( format )@s]'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerHandleResultRelative (const Real value, const Real aim, const String format)
  {
    DefaultText: 'Slow algorithm handle result: @value.Format( format )@% of the total suboptimizer time. Aim is < @aim.Format( format )@%'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerInitializeAbsolute (const Real value, Real lowerbound, constcontent Real upperbound, 
    const String format)
  {
    DefaultText: '@ifexpr( value < lowerbound, "Fast", "Slow" )@ algorithm initialization: @value.Format( format )@s of the total suboptimizer time. Normal range is [@lowerbound.Format( format )@s, @upperbound.Format( format )@s]'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerInitializeRelative (constcontent Real value, constcontent Real aim, constcontent String format)
  {
    DefaultText: 'Slow algorithm initialization: @value.Format( format )@% of the total suboptimizer time. Aim is < @aim.Format( format )@%'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerSolveAbsolute (constcontent Real value, Real lowerbound, const Real upperbound, 
    constcontent String format)
  {
    DefaultText: '@ifexpr( value < lowerbound, "Fast", "Slow" )@ algorithm solve: @value.Format( format )@s of the total suboptimizer time. Normal range is [@lowerbound.Format( format )@s, @upperbound.Format( format )@s]'
  }
  InfoMessage LibOpt_Issue_Details_TimeSuboptimizerSolveRelative (const Real value, const Real aim, const String format)
  {
    DefaultText: 'Fast algorithm solving: @value.Format( format )@% of the total suboptimizer time. Aim is > @aim.Format( format )@%'
  }
  InfoMessage LibOpt_Issue_Details_Warning (constcontent Number nr_times, String warning_message)
  {
    DefaultText: 'A warning is thrown@ifexpr( nr_times = 1, \'\', \' \' + [String] nr_times + \' times\')@: "@warning_message@"'
  }
  InfoMessage LibOpt_Issue_Identifier (const String runnr, const String seqnronrun)
  {
    DefaultText: 'R@runnr@_@seqnronrun@'
  }
  InfoMessage LibOpt_Issue_NoRelatedIterations
  {
    DefaultText: 'None of the selected issues have related iterations.'
  }
  InfoMessage LibOpt_Issue_NoRelatedSuboptimizerScopeElement
  {
    DefaultText: 'None of the selected issues has a related suboptimizer scope element.'
  }
  InfoMessage LibOpt_Issue_Priority_High
  {
    DefaultText: 'High'
  }
  InfoMessage LibOpt_Issue_Priority_Low
  {
    DefaultText: 'Low'
  }
  InfoMessage LibOpt_Issue_Priority_Max
  {
    DefaultText: 'Max'
  }
  InfoMessage LibOpt_Issue_Priority_Medium
  {
    DefaultText: 'Medium'
  }
  InfoMessage LibOpt_Issue_Priority_Min
  {
    DefaultText: 'Min'
  }
  InfoMessage LibOpt_Issue_ThresholdNature_Fixed
  {
    DefaultText: 'fixed'
  }
  InfoMessage LibOpt_Issue_ThresholdNature_Outlier
  {
    DefaultText: 'outlier'
  }
  InfoMessage LibOpt_Issue_Type_SnapshotLogEntry
  {
    DefaultText: 'Log entry'
  }
  InfoMessage LibOpt_IterationNr (const Number iterationnr, const Number max_nr_iterations)
  {
    DefaultText: 'Iteration @([String] iterationnr).PadLeft( "0", ceil( log( max_nr_iterations ) / log( 10 ) ) )@'
  }
  InfoMessage LibOpt_Iteration_NoRelatedIssues
  {
    DefaultText: 'None of the selected iterations have related issues.'
  }
  InfoMessage LibOpt_Optimizer_SetAutoAnalysisEnabled (constcontent Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ automatic analysis on the selected optimizers, as automatic analysis is already @ifexpr( enable, 'enabled', 'disabled')@ on these optimizers."
  }
  InfoMessage LibOpt_Run_SetAutoAnalysisEnabled (constcontent Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ automatic analysis on the selected runs, as automatic analysis is already @ifexpr( enable, 'enabled', 'disabled')@ on these runs."
  }
  InfoMessage LibOpt_Statistic_ElementType_Iteration
  {
    DefaultText: 'iteration'
  }
  InfoMessage LibOpt_Statistic_HighStandardDeviation (const String stddev, const String upperthreshold, const String uom)
  {
    DefaultText:
    [*
      <html>High standard deviation of @stddev@@uom@ violates the upper threshold of @upperthreshold@@uom@.
      The <i>outlier</i> `UpperThreshold` and/or `LowerThreshold` of this statistic used to determine whether issues are created might be unreliable, due to the large spread in the values collected.</html>
    *]
  }
  InfoMessage LibOpt_Issue_Details_SuboptimizerMPKappa (const Real kappavalue)
  {
    DefaultText:
    [*
      The mathematical problem is numerically unstable. Kappa value of @kappavalue.Format("N(Scientific(1))")@ is @
      ifexpr( kappavalue >= LibOpt_StatisticSuboptimizerMPKappa::UpperThreshold_03_IllPosed(),
        'ill-posed',
        ifexpr( kappavalue >= LibOpt_StatisticSuboptimizerMPKappa::UpperThreshold_02_Unstable(),
          'unstable',
          'suspicious' )
      )@.
    *]
  }
  InfoMessage LibOpt_Issue_Details_SuboptimizerMPRelativeGap (const Real percent, const Real upperbound, const String format)
  {
    DefaultText: 'Large relative gap of @percent.Format( format )@%. Aim is < @upperbound.Format( format )@%.'
  }
  InfoMessage LibOpt_Issue_Details_SuboptimizerMPInfeasible
  {
    DefaultText: 'The mathematical program was infeasible'
  }
  InfoMessage LibOpt_Issue_Details_SuboptimizerRollback (const RealVector kpi_change)
  {
    DefaultText: 'The iteration was rolled back due to a change in rollback KPI of @LibOpt_Utility::FormatKPI( kpi_change )@.'
  }
  InfoMessage LibOpt_Issue_Type_MP
  {
    DefaultText: 'MP'
  }
  InfoMessage LibOpt_Issue_Type_ScopeElement
  {
    DefaultText: 'Scope element'
  }
  InfoMessage LibOpt_Issue_Type_Suboptimizer
  {
    DefaultText: 'Suboptimizer'
  }
  InfoMessage LibOpt_Issue_Type_SummarySuffix
  {
    DefaultText: 'Summary'
  }
  InfoMessage LibOpt_Issue_Type_Time
  {
    DefaultText: 'Time'
  }
  InfoMessage LibOpt_Iteration_DisableIterationCalculation
  {
    DefaultText: 'Disable iteration calculation'
  }
  InfoMessage LibOpt_Iteration_EnableIterationCalculation
  {
    DefaultText: 'Enable iteration calculation'
  }
  InfoMessage LibOpt_Component_HasNoDatasetCopies (constcontent Number number)
  {
    DefaultText: 'This component has @number@ dataset copies attached.'
  }
  InfoMessage LibOpt_Component_Precondition_HasNoRollbackComponentPosition (const LibOpt_Component component)
  {
    DefaultText: "The '@component.Name()@' component does not have a '@LibOpt_Suboptimizer::ComponentPosition_Rollback()@' component position."
  }
  InfoMessage LibOpt_DatasetCopyOnRollbackSize_NoPostHandleResult
  {
    DefaultText: "There is no 'post handle result' snapshot KPI in this component or in any descendant components of this component. The LibOpt_DatasetCopyConditional.GetRollbackKPIDiff method returned null( RealVector )."
  }
  InfoMessage LibOpt_DeprecatedMethod (const String deprecatedmethod, const String replacementmethod, const String majorLibOptVersion)
  {
    DefaultText: 'The @deprecatedmethod@ method has been DEPRECATED. The method will be removed when LibOpt @majorLibOptVersion@ is released. Please use the @replacementmethod@ method instead.'
  }
  InfoMessage LibOpt_Iteration_NoDatasetCopies (const Number nr)
  {
    DefaultText: 'This iteration contains @nr@ dataset copies that have not been deleted.'
  }
  InfoMessage LibOpt_Iterator_NoStopCriterionDefaultWhenSettingMaxIterations (const String name, const Type type)
  {
    DefaultText:
    [*
      Type mismatch while trying to set MaxIterations on the stop criterion of the iterator named "@name@"
      Expecting the iterator to have a stop criterion with type LibOpt_StopCriterionDefault. Found @ifexpr( isnull( type ), 'no stop criterion', type.Name())@.
    *]
  }
  InfoMessage LibOpt_Iterator_NoStopCriterionDefaultWhenSettingMaxLocalDuration (const String name, const Type type)
  {
    DefaultText:
    [*
      Type mismatch while trying to set MaxLocalDuration on the stop criterion of the iterator named "@name@"
      Expecting the iterator to have a stop criterion with type LibOpt_StopCriterionDefault. Found @ifexpr( isnull( type ), 'no stop criterion', type.Name())@.
    *]
  }
  InfoMessage LibOpt_Iterator_NotInOneTransaction (const String component_name, const Strings methods)
  {
    DefaultText:
    [*
      One or more new reactive streams were started, while the iterator @component_name@ is working in one transaction.
      These are the methods: @LibOpt_Utility::CountStrings( methods )@.
    *]
  }
  InfoMessage LibOpt_Iterator_NotInOneTransaction_Solution
  {
    DefaultText: 'Either set the attribute `ForceInOneTransaction` on the iterator to false, or find and update the component that created a stream.'
  }
  InfoMessage LibOpt_MessageBox_OK
  {
    DefaultText: '&OK'
  }
  InfoMessage LibOpt_Optimizer_CleanUpRuns (const String optimizer_name, const LibOpt_Runs runs)
  {
    DefaultText:
    [*
      The runs form the optimizer "@optimizer_name@" with the following RunNrs will be cleaned up: @selectvalues( runs, Elements, run, true, run.RunNr() ).Sort().ToString( ', ' )@. Proceed?
      
      If you do not want these runs to be cleaned up, you can protect these specific runs:
      right click the runs in the Runs list -> Toggles -> Disable auto cleanup.
    *]
  }
  InfoMessage LibOpt_Optimization_OneTransactionException
  {
    DefaultText: "A run has failed whilst running in one transaction. If it's not there, retrieve it by right-clicking the optimizer in the 'Optimizers' form and select 'Recover last failed run'."
  }
  InfoMessage LibOpt_Optimizer_SequencerPostfixIterator
  {
    DefaultText: 'iterator'
  }
  InfoMessage LibOpt_Optimizer_SequencerPostfixSwitch
  {
    DefaultText: 'switch'
  }
  InfoMessage LibOpt_Optimizer_SetAutomaticPropagation (const Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ automatic propagation on the selected optimizers, as automatic propagation is already @ifexpr( enable, 'enabled', 'disabled')@ on these optimizers."
  }
  InfoMessage LibOpt_Optimizer_SetDatasetCopy (constcontent Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ dataset copies on the selected optimizers, as dataset copies are already @ifexpr( enable, 'enabled', 'disabled')@ on these optimizers"
  }
  InfoMessage LibOpt_Run_CannotDisableIterationsWithAnalysis
  {
    DefaultText: 'You cannot disable the calculation of iterations when the run is being analyzed. Please remove all Analysis objects related to the run to disable the calculation of iterations.'
  }
  InfoMessage LibOpt_Run_DatasetCopy_NotPaused
  {
    DefaultText: 'The run is not paused, therefore we cannot create a copy of the current state of the dataset.'
  }
  InfoMessage LibOpt_Run_MessageBox_DeleteDatasets
  {
    DefaultText: 'Some of the runs were started from this dataset. The following replannable datasets that were created during these runs will therefore also be deleted:'
  }
  InfoMessage LibOpt_Run_MessageBox_DeleteRuns
  {
    DefaultText: 'Are you sure you want to delete the selected Run(s)?'
  }
  InfoMessage LibOpt_Run_MessageBox_DeleteRuns_And_Datasets (Strings sorteddatasetnames)
  {
    DefaultText:
    [*
      @Translations::LibOpt_Run_MessageBox_DeleteRuns()@
      
      Some of the runs were started from this dataset. The following replannable datasets that were created during these runs will therefore also be deleted:
      @sorteddatasetnames.ToString( String::NewLine() )@
    *]
  }
  InfoMessage LibOpt_Run_NoSnapshots (const LibOpt_Run run)
  {
    DefaultText: 'Run #@run.RunNr()@ does not have snapshots.'
  }
  InfoMessage LibOpt_Run_NotCompleted (const LibOpt_Run run)
  {
    DefaultText: 'Run #@run.RunNr()@ is not completed yet.'
  }
  InfoMessage LibOpt_Run_NothingToRecover
  {
    DefaultText:
    [*
      An error was thrown in the transaction that created the run.
      We tried to recover the run, but we failed.
      Have a look at the server log to find out what happened in the transaction that created the run.
    *]
  }
  InfoMessage LibOpt_Run_Continue_NotPaused
  {
    DefaultText: 'The run is not paused, therefore we cannot continue.'
  }
  InfoMessage LibOpt_ComponentConfiguration_AvailabilityCheckerBoolean_False
  {
    DefaultText: 'This branch will never be taken, because the availability checker always returns false.'
  }
  InfoMessage LibOpt_ComponentConfiguration_Component_NoNewLine
  {
    DefaultText: 'The component has no proper name. Do not use a newline in the component name.'
  }
  InfoMessage LibOpt_ComponentConfiguration_Component_WhitespaceName
  {
    DefaultText: 'The component has no proper name. Only whitespace is not enough.'
  }
  InfoMessage LibOpt_ComponentConfiguration_AnchorPickerIncorrectlyConfigured (const String message, const Type type)
  {
    DefaultText:
    [*
      The anchor picker with type "@guard( type.Name(), 'NULL')@" is incorrectly configured:
      @message@
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_AnchorPickerNotSet
  {
    DefaultText:
    [*
      There is no anchor picker configured.
      Please make sure the set the relation AnchorPicker on the LibOpt_SelectorAnchor.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_AnchorSetIncorrectlyConfigured (const String message, const Type type)
  {
    DefaultText:
    [*
      The anchor set with type "@guard( type.Name(), 'NULL')@" is incorrectly configured:
      @message@
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_AnchorSetNotSet
  {
    DefaultText:
    [*
      There is no anchor set configured.
      Please make sure the set the relation AnchorSet on the LibOpt_SelectorAnchor.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_Component_NoOutgoingLink (const String component_name, const Type type)
  {
    DefaultText:
    [*
      There is no outgoing link defined on this component, while component "@component_name@" with type @guard( type.Name(), 'NULL')@ requires at least one.
      Either make sure the ExpectsNext method returns false (if this is expected behavior), or make sure to link a component.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_IteratorNoStopCriterion
  {
    DefaultText:
    [*
      There is no stop criterion configured on the iterator.
      Set the stop criterion using the StopCriterion relation.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_IteratorTooLowMaxParallel (const String name, const Number value)
  {
    DefaultText: 'The MaxParallel setting of the Iterator @name@ is @value@. This should be at least 1.'
  }
  InfoMessage LibOpt_ComponentConfiguration_LinkPriority_NoAvailabilityChecker
  {
    DefaultText:
    [*
      There is no availability checker defined on this branch.
      Make sure to add a subtype of LibOpt_AvailabilityChecker to the link.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_NeighborhoodCreatorIncorrectlyConfigured (const String message, const Type type)
  {
    DefaultText:
    [*
      The neighborhood creator with type "@guard( type.Name(), 'NULL')@" is incorrectly configured:
      @message@
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_NeighborhoodCreatorNotSet
  {
    DefaultText:
    [*
      There is no neighborhood creator configured.
      Please make sure the set the relation NeighborhoodCreator on the LibOpt_SelectorAnchor.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_StopCriterionDefaultInfinite
  {
    DefaultText:
    [*
      The stop criterion will not stop, because the maximum number of iterations, the maximum local duration and the maximum global duration are infinite.
      Use the `LibOpt_StopCriterionContinuous` if this is what you want.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_StopCriterionIncorrectlyConfigured (const String message, const Type type)
  {
    DefaultText:
    [*
      The stop criterion with type @guard( type.Name(), 'NULL' )@ is incorrectly configured:
      @message@
    *]
  }
  InfoMessage LibOpt_BreakpointPosition_HasNoBreakpoints (const Number number)
  {
    DefaultText: 'This component position has @number@ normal breakpoint(s) attached.'
  }
  InfoMessage LibOpt_ComponentConfiguration_AvailabilityCheckerBoolean_True_UnreachableAfter
  {
    DefaultText: 'All branches after this branch are unreachable, because the availability checker always returns true.'
  }
  InfoMessage LibOpt_ComponentConfiguration_SwitchPriority_NoGuarantee
  {
    DefaultText:
    [*
      Potential stop of execution. No guarantee that there will always be a branch available.
      Use LibOpt_Optimizer.AvailabilityCheckerTrue to create an availability checker that always fires.
    *]
  }
  InfoMessage LibOpt_ComponentConfiguration_Switch_ConfigurationErrorInLink (const LibOpt_Link link, const String err)
  {
    DefaultText: 'Configuration error in link from @link.Destination().Name()@: @err@'
  }
  InfoMessage LibOpt_ComponentConfiguration_Switch_NoBranches
  {
    DefaultText: 'There are no branches defined on this switch. Execution of the iteration will stop here.'
  }
  InfoMessage LibOpt_ComponentConfiguration_Switch_SingleBranch
  {
    DefaultText:
    [*
      There is only one branch defined. We were expecting multiple.
      If you're only using one branch, you can probably do without the switch.
    *]
  }
  InfoMessage LibOpt_Component_Aborted
  {
    DefaultText: 'The optimizer task was aborted'
  }
  InfoMessage LibOpt_Component_HasNoBreakpoints (const Number number)
  {
    DefaultText: 'This component has @number@ breakpoint(s) attached.'
  }
  InfoMessage LibOpt_Component_HasUniqueName
  {
    DefaultText:
    [*
      The name of this component is not unique within the run.
      This can lead to unexpected behavior while running the optimizer.
    *]
  }
  InfoMessage LibOpt_LinkPriority_Details (const Number prio, const String availability_checker)
  {
    DefaultText: 'Priority: @prio@, availability checker: @availability_checker@.'
  }
  InfoMessage LibOpt_LinkProbability_Details (const Real percentage)
  {
    DefaultText: 'Probability: @percentage@%'
  }
  InfoMessage LibOpt_LinkRoundRobin_Details (const Number seq_nr)
  {
    DefaultText: 'Sequence nr: @seq_nr@.'
  }
  InfoMessage LibOpt_Optimization_CapturedException_Regex
  {
    DefaultText: '^Captured exception$'
  }
  InfoMessage LibOpt_Optimizer_NoActiveSettings
  {
    DefaultText: 'No active settings defined for this Optimizer.'
  }
  InfoMessage LibOpt_Optimizer_NotSelected
  {
    DefaultText: 'No Optimizer object is selected.'
  }
  InfoMessage LibOpt_Optimizer_SetDebugScope (const Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ debugging the scope of the selected optimizers, as the debugging scope is already @ifexpr( enable, 'enabled', 'disabled')@ on these optimizers."
  }
  InfoMessage LibOpt_Run_DuplicateComponentNames (const Number nr)
  {
    DefaultText:
    [*
      Some of the components have a duplicate name.
      This may result in unexpected behavior by the optimizer.
    *]
  }
  InfoMessage LibOpt_Iteration_NoErrors (const Number nr)
  {
    DefaultText: 'This iteration contains @nr@ errors.'
  }
  InfoMessage LibOpt_Iteration_NoRollbacks (const Number nr)
  {
    DefaultText: 'This iteration contains @nr@ rollbacks.'
  }
  InfoMessage LibOpt_Iterator_NoStopCriterionDefaultWhenSettingGlobalDuration (const String name, const Type type)
  {
    DefaultText:
    [*
      Type mismatch while trying to set GlobalDuration on the stop criterion of the iterator named "@name@"
      Expecting the iterator to have a stop criterion with type LibOpt_StopCriterionDefault. Found @ifexpr( isnull( type ), 'no stop criterion', type.Name())@.
    *]
  }
  InfoMessage LibOpt_Iteration_NoWarnings (constcontent Number nr)
  {
    DefaultText: 'This iteration contains @nr@ warnings.'
  }
  InfoMessage LibOpt_AnchorSelector_Operation_AnchorPickerNull (const String component_name, const Type anchor_picker_type)
  {
    DefaultText:
    [*
      Null anchor selected.
      The anchor picker with type @guard( anchor_picker_type.Name(), 'NULL' )@ in the LibOpt_SelectorAnchor with name "@component_name@" picked a null anchor
    *]
  }
  InfoMessage LibOpt_AnchorSelector_Operation_AnchorSetEmpty (const String component_name, const Type anchor_set_type)
  {
    DefaultText:
    [*
      Empty anchor set selected.
      The anchor set with type @guard( anchor_set_type.Name(), 'NULL' )@ of LibOpt_SelectorAnchor "@component_name@" returned an empty set of anchors.
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionContinueDescription
  {
    DefaultText:
    [*
      This happens right before the next component is executed. 
      See the `ContinueWithoutFinalize` method.
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionErrorDescription
  {
    DefaultText:
    [*
      For dataset copies, this happens right before an error is handled on this component. The transaction is not yet rolled back. For breakpoints, this happens after the error is handled. The transaction is rolled back. 
      See the `LibOpt_CurrentTransaction::HandleQuillError` method (for dataset copies) or the `HandleException` method (for breakpoints).
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionInitializeDescription
  {
    DefaultText:
    [*
      This happens right before any method of this component is called. 
      See the `LibOpt_TaskTransporter` type (for dataset copies) or the `DoTask` method (for breakpoints).
    *]
  }
  InfoMessage LibOpt_Component_ComponentPositionRollbackDescription
  {
    DefaultText:
    [*
      For dataset copies, this happens right before a rollback is handled on this component. The transaction is not yet rolled back. For breakpoints, this happens after the rollback is handled. The transaction is rolled back. 
      See the `PostHandleResult` method (for dataset copies) or the `HandleException` method (for breakpoints).
    *]
  }
  InfoMessage LibOpt_Link_Destination_Null (const String origin)
  {
    DefaultText:
    [*
      Null component found in link from @origin@.
      Possible cause: one of the components in `LibOpt_Optimizer.CreateComponents` is incorrectly created.
      For example, by using `construct( ... )` instead of `LibOpt_Run.Component( relnew, ... )`.
    *]
  }
  InfoMessage LibOpt_Run_NotRunningInOneTransaction (const LibOpt_Run run, const Strings methods)
  {
    DefaultText:
    [*
      Transaction spawned while executing a one-transaction run.
      Run #@run.RunNr()@ has attribute OneTransaction set to true, meaning the entire run is meant to run in a single transaction.
      While running, we detected that new transactions were spawned for the following methods: @LibOpt_Utility::CountStrings( methods )@.
      This may break the undo-stack and is therefore forbidden.
      Either stop trying to execute these methods in a new transaction, or set the OneTransaction setting on the run to false.
    *]
  }
  InfoMessage LibOpt_Run_Pause_NotRunning
  {
    DefaultText: 'Cannot pause the run(s), as they are not running.'
  }
  InfoMessage LibOpt_Run_ScopeElementNotFound (const String comment)
  {
    DefaultText: 'One or more scope elements could not be found when recovering the last failed run. @ifexpr( comment <> \'\', "Original comment:" + comment, \'\' )@'
  }
  InfoMessage LibOpt_Run_SetAutoCleanUpEnabled (const Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ automatic cleanup on the selected runs, as automatic cleanup is already @ifexpr( enable, 'enabled', 'disabled')@ on these runs."
  }
  InfoMessage LibOpt_Run_SetAutomaticPropagation (constcontent Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ automatic propagation on the selected runs, as automatic propagation is already @ifexpr( enable, 'enabled', 'disabled')@ on these runs."
  }
  InfoMessage LibOpt_Run_SetDatasetCopy (const Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ dataset copies on the selected runs, as dataset copies are already @ifexpr( enable, 'enabled', 'disabled')@ on these runs"
  }
  InfoMessage LibOpt_Run_SetDebugScope (constcontent Boolean enable)
  {
    DefaultText: "Cannot @ifexpr( enable, 'enable', 'disable')@ debugging the scope of the selected runs, as the debugging scope is already @ifexpr( enable, 'enabled', 'disabled')@ on these runs."
  }
  InfoMessage LibOpt_Run_StartScopeNotInRun (const LibOpt_Scope scope, const LibOpt_Run run)
  {
    DefaultText:
    [*
      Cross-run error. Trying to set the start scope in run #@run.RunNr()@.
      However, this scope is defined in run #@scope.Run().RunNr()@.
      Make sure that the start scope you try to set for run #@run.RunNr()@ is defined in run #@run.RunNr()@.
    *]
  }
  InfoMessage LibOpt_Run_Start_AlreadyStarted
  {
    DefaultText:
    [*
      Cannot start a run that has already been started before.
      Make sure that you do not call the method LibOpt_Run::Start more than once per run.
    *]
  }
  InfoMessage LibOpt_Run_StartComponentNotInRun (const LibOpt_Component component, const LibOpt_Run run)
  {
    DefaultText:
    [*
      Cross-run error. Trying to set component "@component.Name()@" as the start component in run #@run.RunNr()@.
      However, this component is defined in run #@component.Run().RunNr()@.
      Make sure that the start component you try to set for run #@run.RunNr()@ is defined in run #@run.RunNr()@.
    *]
  }
  InfoMessage LibOpt_ScopeElementOnScope_ScopeElementNotFound (const String comment)
  {
    DefaultText: 'Scope element could not be found when recovering the last failed run. @ifexpr( comment <> \'\', "Original comment:" + comment, \'\' )@'
  }
  InfoMessage LibOpt_ScopeElement_Transform_ScopeContainsSubset (const String subset, const String set, const String not_in_scope)
  {
    DefaultText:
    [*
      Found `LibOpt_Scope` containing a proper subset of elements that need to be transformed.
      It is unclear what to do if a proper subset is found, as some elements are missing.
      Subset found: @subset@.
      Not found: @not_in_scope@.
      Full set: @set@.
    *]
  }
  InfoMessage LibOpt_ScopeElement_NoIdentifier
  {
    DefaultText: '[NO IDENTIFIER]'
  }
  InfoMessage LibOpt_SnapshotComponent_Type (LibOpt_SnapshotComponent snapshot)
  {
    DefaultText: '@snapshot.Name()@'
  }
  InfoMessage LibOpt_SnapshotError_Details (const String message, const String devinfo)
  {
    DefaultText:
    [*
      @message@
      @devinfo@
    *]
  }
  InfoMessage LibOpt_SnapshotError_Type
  {
    DefaultText: 'Error'
  }
  InfoMessage LibOpt_SnapshotGP_Details (const LibOpt_SnapshotGP snapshot)
  {
    DefaultText: '#Algs: @snapshot.NrOfAlgorithms()@, #Graphs: @snapshot.NrOfGraphs()@, #Filter atts: [node: @snapshot.NrOfNodeFilterAttributes()@, edge: @snapshot.NrOfEdgeFilterAttributes()@].'
  }
  InfoMessage LibOpt_SnapshotInfo_Type
  {
    DefaultText: 'Info'
  }
  InfoMessage LibOpt_Rollback
  {
    DefaultText: 'Rollback'
  }
  InfoMessage LibOpt_SnapshotKPI_CommentPostHandleResult
  {
    DefaultText: 'Post handle result'
  }
  InfoMessage LibOpt_SnapshotKPI_CommentPreHandleResult
  {
    DefaultText: 'Pre handle result'
  }
  InfoMessage LibOpt_SnapshotKPI_Details (const RealVector kpi)
  {
    DefaultText: 'Values: @kpi.AsValues().ToString( \' | \' )@@ifexpr( kpi.Size() = 0, "none", "" )@'
  }
  InfoMessage LibOpt_SnapshotKPI_IncorrectValueForRollback
  {
    DefaultText: 'The KPIs on this object are probably incorrect.'
  }
  InfoMessage LibOpt_SnapshotKPI_Type (const String comment)
  {
    DefaultText: 'KPI @comment@'
  }
  InfoMessage LibOpt_SnapshotMP_Details (const LibOpt_SnapshotMP snapshot)
  {
    DefaultText: 'Gap: @LibOpt_Utility::FormatKPI( RealVector::Construct( snapshot.RelativeGaps() ).Times( 100 ), "N(Dec(2))%", \' | \' )@ / @LibOpt_Utility::FormatKPI( snapshot.AbsoluteGaps(), "N(Scientific(3))", \' | \' )@ | Goal: @LibOpt_Utility::FormatKPI( snapshot.GoalScores(), "N(Dec(2))", \' | \' )@@ifexpr( snapshot.IsOptimal(), " (Optimal)", "" )@ [@snapshot.GetProblemType()@]'
  }
  InfoMessage LibOpt_SnapshotMP_Details_NoSolutions
  {
    DefaultText: 'No solutions found.'
  }
  InfoMessage LibOpt_SnapshotPOASolution_Details (const Real goal_score, const Real constraint_score, const Real resource_score, 
    const Real unplanned_score)
  {
    DefaultText: 'Total: @ goal_score + constraint_score + resource_score + unplanned_score @ Goal: @goal_score@ Constr: @constraint_score@ Resource: @resource_score@ Unplanned: @unplanned_score@'
  }
  InfoMessage LibOpt_SnapshotPOASolution_Type (const String role)
  {
    DefaultText: 'POA @role@'
  }
  InfoMessage LibOpt_SnapshotPOA_Details (const Number pop95)
  {
    DefaultText: "Pop95: @ifexpr( pop95 = -1, 'N/A', '' + [String] pop95 )@"
  }
  InfoMessage LibOpt_SnapshotReplannable_MessageBox_DatasetAlreadyDeleted (const LibOpt_SnapshotReplannableCopyDataset snapshot)
  {
    DefaultText:
    [*
      The '@snapshot.DatasetName()@' dataset has already been deleted. This dataset can therefore not be selected.
      The status of all @typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()@ objects has been updated.
    *]
  }
  InfoMessage LibOpt_SnapshotReplannable_MessageBox_UnexpectedStatus
  {
    DefaultText:
    [*
      The dataset of at least one of the selected @typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()@ snapshots could not be found in the dataset storage, while the dataset was expected to exist.
      The status of all @typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()@ snapshots has been updated to ensure that the status of the snapshots is aligned with the state of the datasets.
    *]
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_AlreadyInDatasetRunForm (const LibOpt_Run run)
  {
    DefaultText: 'The dataset that executed run @run.RunNr()@ is the currently selected dataset.'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_AlreadyInDatasetSnapshotForm
  {
    DefaultText: 'The dataset that you are trying to load is already the currently selected dataset'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_DatasetDeletedRun (const LibOpt_Run run, constcontent Key key)
  {
    DefaultText: 'The dataset with key @key@ cannot be found in the dataset store. Therefore, the dataset that executed run @run.RunNr()@ cannot be selected.'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_DatasetNotFound (const LibOpt_SnapshotReplannableCopyDataset snapshot)
  {
    DefaultText: 'The dataset with name @snapshot.DatasetName()@ cannot be found in the dataset store, so it cannot be selected.'
  }
  InfoMessage LibOpt_SnapshotReplannable_MessageBox_DeleteCurrentDataset
  {
    DefaultText: 'You are currently working in the dataset that you are going to delete. Are you sure you want to delete this dataset?'
  }
  InfoMessage LibOpt_SnapshotReplannable_MessageBox_DeleteLoadedDataset (const LibOpt_SnapshotReplannableCopyDataset snapshot)
  {
    DefaultText: "You are trying to delete dataset '@snapshot.DatasetName()@'. This dataset is currently loaded. Are you sure you want to delete this dataset?"
  }
  InfoMessage LibOpt_SnapshotReplannable_MessageBox_UnloadCurrentDataset
  {
    DefaultText: 'You are currently working in the dataset that you are going to unload. Are you sure you want to unload this dataset?'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_DatasetBeingCreated
  {
    DefaultText: 'The selected dataset(s) are still being created'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_NoParentDataset
  {
    DefaultText: 'The currently selected dataset is not a child of any other dataset'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_DatasetDeleted (const Key key)
  {
    DefaultText: 'There exists no dataset with the key @key@, Therefore, the parent dataset of the currently selected dataset has been deleted.'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_UnloadDataset
  {
    DefaultText: 'The selected dataset(s) are already unloaded or deleted'
  }
  InfoMessage LibOpt_SnapshotReplannable_Precondition_DeleteDataset
  {
    DefaultText: 'The selected dataset(s) are already deleted'
  }
  InfoMessage LibOpt_SnapshotResult_Type
  {
    DefaultText: 'Result'
  }
  InfoMessage LibOpt_SnapshotSelectorAnchor_Details (const String anchor_id)
  {
    DefaultText: 'Anchor: @anchor_id@'
  }
  InfoMessage LibOpt_SnapshotSuboptimizer_Details (const Boolean is_rollback, const Boolean is_improvement)
  {
    DefaultText: "@ifexpr( is_rollback, 'Rollback', ifexpr( is_improvement, 'Improvement', 'Equal' ) )@"
  }
  InfoMessage LibOpt_SnapshotSwitch_Details (const LibOpt_Component destination)
  {
    DefaultText: "To: @guard( destination.Name(), 'NULL' )@"
  }
  InfoMessage LibOpt_SnapshotUnknown_Details
  {
    DefaultText: 'Unknown'
  }
  InfoMessage LibOpt_SnapshotWarning_Details (const String description, const String possible_solution)
  {
    DefaultText: '@description@@ifexpr( possible_solution.Length() > 0, " - Possible solution " + possible_solution, "" )@'
  }
  InfoMessage LibOpt_SnapshotWarning_Type
  {
    DefaultText: 'Warning'
  }
  InfoMessage LibOpt_Snapshot_Details (const LibOpt_Snapshot snapshot)
  {
    DefaultText: '-'
  }
  InfoMessage LibOpt_SnapshotComponent_PrepareRun_NoInputScope
  {
    DefaultText: 'The input scope is not logged. To log the input scope, enable debugging scope on the run.'
  }
  InfoMessage LibOpt_Snapshot_Type
  {
    DefaultText: 'Undefined'
  }
  InfoMessage LibOpt_Statistic_Description (const String focus, const String elementtype, const String valuedescription)
  {
    DefaultText: "@valuedescription@ for each @elementtype@ of '@focus@'."
  }
  InfoMessage LibOpt_Statistic_Description_Time (const String focus, const String elementtype, const String valuedescription)
  {
    DefaultText: "@valuedescription@ spent in '@focus@' for each @elementtype@."
  }
  InfoMessage LibOpt_Statistic_ElementType_SnapshotAlgorithm
  {
    DefaultText: 'algorithm snapshot'
  }
  InfoMessage LibOpt_Statistic_ElementType_SnapshotComponent
  {
    DefaultText: 'component snapshot'
  }
  InfoMessage LibOpt_Statistic_ElementType_SnapshotMP
  {
    DefaultText: 'MP snapshot'
  }
  InfoMessage LibOpt_Statistic_ElementType_SnapshotSuboptimizer
  {
    DefaultText: 'suboptimizer snapshot'
  }
  InfoMessage LibOpt_Statistic_ElementType_SuboptimizerScopeElement
  {
    DefaultText: 'suboptimizer scope element'
  }
  InfoMessage LibOpt_Statistic_KPILevel (const Number kpilevel)
  {
    DefaultText: 'KPI Level @kpilevel@'
  }
  InfoMessage LibOpt_Statistic_TimeFocus_Root
  {
    DefaultText: ': Iteration time'
  }
  InfoMessage LibOpt_Statistic_TimeFocus_Suboptimizer_1_Initialize
  {
    DefaultText: ': 1 Initialize'
  }
  InfoMessage LibOpt_Statistic_TimeFocus_Suboptimizer_2_Solve
  {
    DefaultText: ': 2 Solve'
  }
  InfoMessage LibOpt_Statistic_TimeFocus_Suboptimizer_3_HandleResult
  {
    DefaultText: ': 3 Handle result'
  }
  InfoMessage LibOpt_Statistic_Type_ScopeElementInput
  {
    DefaultText: 'Scope element: Input'
  }
  InfoMessage LibOpt_Statistic_Type_ScopeElementNoImprovement
  {
    DefaultText: 'Scope element: No improvement'
  }
  InfoMessage LibOpt_Statistic_Type_ScopeElementRollback
  {
    DefaultText: 'Scope element: Rollback'
  }
  InfoMessage LibOpt_Statistic_Type_SnapshotError
  {
    DefaultText: 'Log entry: Error'
  }
  InfoMessage LibOpt_Statistic_Type_SnapshotWarning
  {
    DefaultText: 'Log entry: Warning'
  }
  InfoMessage LibOpt_Statistic_Type_SuboptimizerKPIImprovement
  {
    DefaultText: 'Suboptimizer: KPI improvement'
  }
  InfoMessage LibOpt_Statistic_Type_SuboptimizerRollback
  {
    DefaultText: 'Suboptimizer: Rollback'
  }
  InfoMessage LibOpt_Statistic_Type_SuboptimizerMPInfeasible
  {
    DefaultText: 'MP: Infeasible'
  }
  InfoMessage LibOpt_Statistic_Type_SuboptimizerMPKappa
  {
    DefaultText: 'MP: Kappa'
  }
  InfoMessage LibOpt_Statistic_Type_SuboptimizerMPRelativeGap
  {
    DefaultText: 'MP: Relative gap'
  }
  InfoMessage LibOpt_Statistic_Type_TimeAbsolute
  {
    DefaultText: 'Time (abs)'
  }
  InfoMessage LibOpt_Statistic_Type_TimeRelative
  {
    DefaultText: 'Time (rel)'
  }
  InfoMessage LibOpt_Statistic_Type_TimeSuboptimizerHandleResult
  {
    DefaultText: 'Suboptimizer handle result'
  }
  InfoMessage LibOpt_Statistic_Type_TimeSuboptimizerInitialize
  {
    DefaultText: 'Suboptimizer initialize'
  }
  InfoMessage LibOpt_Statistic_Type_TimeSuboptimizerSolve
  {
    DefaultText: 'Suboptimizer solve'
  }
  InfoMessage LibOpt_Statistic_Type_TimeTotal
  {
    DefaultText: 'Total'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_IsRollback
  {
    DefaultText: '`IsRollback` Boolean (1 if rollback, 0 otherwise)'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_KPIImprovement
  {
    DefaultText: 'KPI improvement'
  }
  InfoMessage LibOpt_Statistic_NoSpecificComponent
  {
    DefaultText: 'No specific component'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_ScopeElement_Input
  {
    DefaultText: 'Frequency of the scope element being used as input for the suboptimizer'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_ScopeElement_NoImprovement
  {
    DefaultText: 'Frequency of the scope element being used as input in an iteration for the suboptimizer which resulted in no improvement'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_ScopeElement_Rollback
  {
    DefaultText: 'Rollback frequency of the scope element when used as input for the suboptimizer'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_SnapshotLogEntry_Error
  {
    DefaultText: 'Count of a particular error'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_SnapshotLogEntry_Warning
  {
    DefaultText: 'Count of a particular warning'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_SuboptimizerMP_Infeasible
  {
    DefaultText: '`IsFeasible` Boolean (1 if infeasible, 0 otherwise)'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_SuboptimizerMP_Kappa
  {
    DefaultText: 'Kappa'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_SuboptimizerMP_RelativeGap
  {
    DefaultText: 'Relative gap (in %)'
  }
  InfoMessage LibOpt_Statistic_ValueDescription_TimeSuboptimizer_HandleResult (const Boolean isabsolute)
  {
    DefaultText: "@ifexpr( isabsolute, 'Handle result', 'Relative handle result' )@ duration"
  }
  InfoMessage LibOpt_Statistic_ValueDescription_TimeSuboptimizer_Initialize (const Boolean isabsolute)
  {
    DefaultText: "@ifexpr( isabsolute, 'Initialize', 'Relative initialize' )@ duration"
  }
  InfoMessage LibOpt_Statistic_ValueDescription_TimeSuboptimizer_Solve (const Boolean isabsolute)
  {
    DefaultText: "@ifexpr( isabsolute, 'Solving', 'Relative solving' )@ duration"
  }
  InfoMessage LibOpt_Statistic_ValueDescription_TimeTotal_TotalDuration (const Boolean isabsolute)
  {
    DefaultText: "@ifexpr( isabsolute, 'Total', 'Relative total' )@ duration"
  }
  InfoMessage LibOpt_StatisticScopeElement_NoData
  {
    DefaultText: 'No data about scope elements was collected, most likely due to `DebugScope` not being enabled for the run.'
  }
  InfoMessage LibOpt_Suboptimizer_ExecutionNr (const Number executionnr)
  {
    DefaultText: 'Execution @executionnr@'
  }
  InfoMessage LibOpt_SuboptimizerScopeElement_NotUsedAsInput
  {
    DefaultText: 'None of the selected suboptimizer scope elements have been used as input for their suboptimizers.'
  }
  InfoMessage LibOpt_UOM_Count
  {
    DefaultText: '#'
  }
  InfoMessage LibOpt_UOM_Hour
  {
    DefaultText: 'hr'
  }
  InfoMessage LibOpt_UOM_Minute
  {
    DefaultText: 'min'
  }
  InfoMessage LibOpt_UOM_NA
  {
    DefaultText: 'N/A'
  }
  InfoMessage LibOpt_UOM_Percentage
  {
    DefaultText: '%'
  }
  InfoMessage LibOpt_UOM_Second
  {
    DefaultText: 's'
  }
  InfoMessage LibOpt_ValueType_Boolean
  {
    DefaultText: 'Boolean'
  }
  InfoMessage LibOpt_ValueType_Duration
  {
    DefaultText: 'Duration'
  }
  InfoMessage LibOpt_ValueType_Number
  {
    DefaultText: 'Number'
  }
  InfoMessage LibOpt_SuboptimizerMP_Infeasible (const String suboptimizer_name)
  {
    DefaultText: 'The mathematical program of the suboptimizer "@suboptimizer_name@" is infeasible.'
  }
  InfoMessage LibOpt_Suboptimizer_CopyDataset_OverrideGetMDSObject (const LibOpt_Optimization optimization, const String componentpositionname)
  {
    DefaultText: 'No dataset copy has been created. Please override the GetMDSObject method on the @optimization.DefinitionName()@ type to create a dataset copy for the @componentpositionname@ component position of this component.'
  }
  InfoMessage LibOpt_SuboptimizerMP_InfeasibleDueToTime (constcontent String suboptimizer_name)
  {
    DefaultText: 'The mathematical program of the suboptimizer "@suboptimizer_name@" was not able to find a feasible solution in time.'
  }
  InfoMessage LibOpt_SuboptimizerMP_InfeasibleRemark (constcontent String suboptimizer_name, const String remark)
  {
    DefaultText: 'The mathematical program of the suboptimizer "@suboptimizer_name@" was found infeasible with the following remark: @remark@.'
  }
  InfoMessage LibOpt_Suboptimizer_PostHandleResultCalledWithoutPreHandleResult
  {
    DefaultText: 'PostHandleResult is called, while PreHandleResult is not called.'
  }
  InfoMessage LibOpt_Suboptimizer_Rollback (const Number level, const Real old, const Real new, 
    const Boolean is_minimize)
  {
    DefaultText: "Rollback because KPI level @NumberToString::ISOConverter().Convert( level )@ changed from @RealToString::ISOConverter().Convert( old )@ to @RealToString::ISOConverter().Convert( new )@ while @ifexpr(is_minimize, 'minimizing', 'maximizing' )@."
  }
  InfoMessage LibOpt_NeighborhoodCreatorCookbook_TotalWeightMustBeLargerThan0
  {
    DefaultText: 'The sum of the weights of the primary, secondary and tertiary resources must be larger than 0.'
  }
  InfoMessage LibOpt_OptimizationNull
  {
    DefaultText: 'The Optimization object is not set.'
  }
  InfoMessage LibOpt_Run_OnDatasetConstructed_AbortingTasks
  {
    DefaultText: 'The dataset was unloaded. The run is stopped.'
  }
  InfoMessage LibOpt_Run_Selected
  {
    DefaultText: 'No run is selected.'
  }
  InfoMessage LibOpt_Run_Start_DuplicateNames (const Strings names)
  {
    DefaultText:
    [*
      Cannot start the run because it contains components with duplicate names.
      We found these names twice or more: @ selectvalues( names, Elements, name, true, '"' + name + '"' ).ToString( ', ' ) @
    *]
  }
  InfoMessage LibOpt_Run_Start_NoStartComponent
  {
    DefaultText:
    [*
      There is no start component set. By default the first component created will be the start component.
      You can change it by using the LibOpt_Run::SetStartComponent method.
    *]
  }
  InfoMessage LibOpt_Run_Stop_NotRunning
  {
    DefaultText: 'Cannot stop the run(s), as they are not running.'
  }
  InfoMessage LibOpt_Optimization_CapturedException
  {
    DefaultText: 'Captured exception'
  }
  InfoMessage LibOpt_Scope_CannotBeUsed (const Number nr)
  {
    DefaultText: 'This scope contains @nr@ deleted scope elements and cannot be used.'
  }
  InfoMessage LibOpt_Snapshot_PrepareRun_NotRightType
  {
    DefaultText: 'This snapshot cannot be run again, as it is not linked to a component.'
  }
  InfoMessage LibOpt_Suboptimizer_NoRollbackKPI
  {
    DefaultText: 'No RollbackKPI is configured on the suboptimizer.'
  }
  InfoMessage LibOpt_Suboptimizer_Rollback_Regex
  {
    DefaultText: '^Rollback( because KPI level [0-9]+ changed from -?[0-9]+(\\.[0-9]+)? to -?[0-9]+(\\.[0-9]+)? while (minimizing|maximizing)\\.)?$'
  }
  InfoMessage LibOpt_Suboptimizer_SomethingWentWrongInWritingRollbackSnapshot
  {
    DefaultText: 'Something went wrong during the writing of the rollback snapshot.'
  }
  InfoMessage LibOpt_SuboptimizerMP_GoalLevel (const Number goallevel)
  {
    DefaultText: 'Goal Level @goallevel@'
  }
  InfoMessage LibOpt_Task_RecoverFromRollbackFailure
  {
    DefaultText: 'Tried recovering from rollback, but could not find the information.'
  }
  InfoMessage LibOpt_Task_Send_ComponentIsNull (const LibOpt_Task task)
  {
    DefaultText:
    [*
      Cannot send task, as the component to send it to is null.
      This happened in a task created from the component @guard( '"' + task.Parent().Component().Name() + '"', 'N/A')@.
    *]
  }
  InfoMessage LibOpt_Utility_CountString (const String string, const Number amount)
  {
    DefaultText: '"@string@" (@amount@x)'
  }
  InfoMessage LibOpt_ValueType_Real
  {
    DefaultText: 'Real'
  }
}
