Quintiq file version 2.0
#root
#parent: #DomainModel
Type LibOpt_Scope
{
  #keys: '5[139164.0.16781078][139164.0.16781076][0.0.0][139164.0.16781077][139164.0.16781079]'
  BaseType: Object
  Description:
  [*
    The `LibOpt_Scope` contains all the objects that can be touched by the optimizer. These objects need to be of type `LibOpt_ScopeElement`.
    This means that if the planner selects a subset of orders, only this subset should be in the `LibOpt_Scope`.
    The `LibOpt_Scope` object can change during an execution, for example, when a subpuzzle is selected.
    Note that this change should be implemented by creating a new `LibOpt_Scope` object with a subset of `LibOpt_ScopeElements` representing the subpuzzle.
    
    We implement the methods Add, Contains and Copy to make it easier to work with the Scope object.
    
    In case an existing `LibOpt_Scope` that is being used by one or more `LibOpt_Components` should be updated, the `LibOpt_ScopeElement::Transform` static method should be called.
    We strongly advice against using the `LibOpt_ScopeElement::Transform` method, as this makes the execution of the optimizer less transparent.
    However, we realize there are good reasons to do so, for example, when an order is split or two orders are merged, the same needs to happen to the `LibOpt_ScopeElements`.
  *]
  OnCreate: 'this.CreatedOn( DateTime::ActualTime() );'
  StructuredName: 'LibOpt_Scopes'
  InterfaceProperties { Accessibility: 'Extensible' }
}
