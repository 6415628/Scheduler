Quintiq file version 2.0
#parent: #root
StaticMethod Strategy (SuboptimizerMRSPOA_POAOneResourceGroup poa, const SettingsMRSPOA parameters, String name_logfile)
{
  Description: 'executes the POA strategy of the MRS optimizer.'
  TextBody:
  [*
    // mbr23 Aug-23-2019 (copied from legacy optimizer)
    
    LibOpt_SuboptimizerPOA::StrategyStart( poa );
    
    strategy := poa.Strategy();
    
    // -------------------------------------------------------------------------- //
    // Strategy for dependent path problems, for example scheduling problems      //
    // -------------------------------------------------------------------------- //
    
    // ----- Parameters for the strategy -----
    // The total duration of iteratively improving the solution in this strategy.
    // This does not include the time spend on creating and improving an initial
    // solution. More time spend on iterive improvement will give a higher chance
    // on better results.
    optparam := parameters;
    iterativeduration := optparam.TimeLimit();
    
    // The number of threads used throughout the strategy execution. The threads
    // are all busy from begin till end.
    nrthreads := optparam.NrOfThreads();
    
    // ----- Advanced Parameters for the strategy -----
    // The number of moves (plan possibilities of planelements) that make it in the
    // final population. Moves that are estimated to be better have a higher chance
    // to be in the population. All moves in the population are fully propagated,
    // after which the best move is carried out. A higher number will mean more
    // precise results because full propagation gives the precise score of a move.
    // This comes at the cost of more time needed in propagation.
    maxpopulation := 1000;
    maxpathpopulation := optparam.MaxPathPopulation();
    
    // After planning every node we propagate to check if this is the best position
    randomconstructiongroupsize := 1;
    
    // The duration between logging information during the iterative strategy
    durationbetweeniterativereports := Duration::Seconds( 1 )
    // Log file name prefix. '' means no logging
    logfilename := 'POAMRS_';
    // Toggle info statements
    isprintinfo := parameters.PrintInfo();
    
    // -------------------------------------------------------------------------- //
    // Print parameter values and initial score                                   //
    // -------------------------------------------------------------------------- //
    
    if ( isprintinfo )
    {
     info( 'parameter iterativeduration =' , iterativeduration );
     info( 'parameter nrthreads =' , nrthreads );
     info( 'parameter maxpopulation =' , maxpopulation );
     info( 'parameter maxpathpopulation =' , maxpathpopulation );
     info( 'parameter randomconstructiongroupsize =' , randomconstructiongroupsize );
     info( 'parameter logfilename =' , logfilename );
     info( 'initial score', strategy.BestSolution().TotalScore());
     info( 'Nr Nodes:', poa.PlanElements( relsize ) );
     info( 'Nr Path:', poa.PathTypes( relsize ) );
    }
    
    // -------------------------------------------------------------------------- //
    // Initialize general settings                                                //
    // -------------------------------------------------------------------------- //
    
    // For all constraints change MaxDownStreamDepth to MaxNumber where applicable.
    // For independent path problems MaxNumber gives generally the best results.
    {
      maxdepth := Number::MaxNumber();
      SuboptimizerMRSPOA::SetMaxDownstreamDepth( poa, maxdepth, isprintinfo );
    }
    
    planstrategy := strategy.PlanStrategy();
    
    // Apply parameter
    planstrategy.MaxPopulation( maxpopulation );
    // the population of moves per path is infinite
    planstrategy.MaxPathPopulation( maxpathpopulation );
    
    // -------------------------------------------------------------------------- //
    // Iterative Strategy                                                         //
    // -------------------------------------------------------------------------- //
    //
    // iterativestrategy will repeatedly run on the start solution generated by
    // initialstrategy.
    
    iterativestrategy := strategy.NewMetaStrategy( 'iterativestrategy' );
    if ( logfilename <> '' )
    {
     iterativestrategy.LogFileName( logfilename + name_logfile + '.log', false );
    }
    
    // The only step used in the iterative strategy.
    iterativestep := iterativestrategy.NewStep( 'iterativestep' );
    // Room for one start solution.
    iterativestep.StartSolutionPool().Capacity( nrthreads );
    // Use initial solution as the starting solution for one thread
    iterativestep.StartSolutionPool().Add( poa.Solution() );
    debuginfo( '- 0 :', poa.Solution().Score().TotalScore() )
    
    destructall := strategy.NewActions( 'DestructAll' );
    randomdestruction := destructall.NewRandomDestruction();
    randomdestruction.Nodes( Number::MaxNumber() );
    randomdestruction.CheckForBetterSolution( false );
    randomdestruction.CheckForBetterSolutionEveryStep( false );
    // Destruct in 1 iteration in at most 100s
    destructall.Execute( 1, 100 );
    
    // While one thread will start from the starting solution
    // The other threads will start from an empty plan
    for( i := 1; i <= nrthreads - 1; i++ )
    {
     iterativestep.StartSolutionPool().Add( strategy.CurrentSolution() );
     debuginfo( '-', i, ':', strategy.CurrentSolution().Score().TotalScore() )
    }
    
    // The step is repeated a number of times equal to the number of threads, each
    // time starting from the same initial solution. Each repetition is carried out
    // by its own thread.
    iterativestep.Repetitions( 1 );
    // There is no limit on the number of times this step starts again within a
    // single thread.
    iterativestep.MaximumIterationsActions( Number::MaxNumber() );
    
    // The result of each thread is stored.
    iterativestep.ResultSolutionPool().Capacity( nrthreads );
    
    actions := iterativestep.Actions();
    
    // Use random destruction, which choses randomly a number of planned elements
    // to be destructed.
    randomdestr := actions.NewRandomDestruction();
    
    randomdestr.ExecutionChance().Set( 1.0 );
    
    // Use random construction, which
    // (1) chooses a number of unplanned elements.
    // (2) determines the best move for each element by making estimates for that
    //     move and propagating the moves that make it in the population.
    // (3) carry out the move of the element that was best
    randomcons := actions.NewRandomConstruction();
    // Set the number of unplanned elements to consider.
    randomcons.GroupSize( randomconstructiongroupsize );
    
    //snapshot - do not allow POA to move away from the local optimum by (temporarily) accepting worse solutions
    imprSnapshot := actions.NewSnapshot();
    imprSnapshot.AcceptPercentage().Set( 0.0 );
    imprSnapshot.OverwritePercentage().Set( 0.0 );
    imprSnapshot.OverwriteChance().Set( 0.0 );
    imprSnapshot.ExecutionChance().Set( 1.0 );
    
    // Keep executing the iterative meta strategy until the time limit is reached
    iterativeendtime := DateTime::ActualTime() + iterativeduration;
    lastreporttime := DateTime::ActualTime() - durationbetweeniterativereports;
    
    continue := true;
    
    while( continue and DateTime::ActualTime() < iterativeendtime )
    {
     randomdestr.Nodes( optparam.NrOfNodesForDestruction() );
     executeduration := iterativeendtime - DateTime::ActualTime();
    
    
     // Call meta strategy execution
     iterativestrategy.Execute( nrthreads, executeduration.MinutesAsReal() * 60.0 );
     iterativestep.StartSolutionPool().UseSolutions();
    
     // Fill start solution from the previous iterative step
     traverse( iterativestep.ResultSolutionPool().UseSolutions(), Solutions, solution )
     {
       iterativestep.StartSolutionPool().Add( solution );
     }
    
     //continue iteration as long as there is improvement
     continue := actions.IterationsImproved().Value() > 0;
    
     if (  DateTime::ActualTime() - lastreporttime >= durationbetweeniterativereports )
     {
       lastreporttime := DateTime::ActualTime();
       if( isprintinfo )
       {
       i := 0;
       total := 0.0;
       best := 10000000.0;
    
         traverse( iterativestep.StartSolutionPool(), Solutions, s )
         {
      
            info( i, ': iterative result solution score', s.TotalScore().Round( 2 ),
                     'goal:', s.Score().TotalGoalScore().Round( 2 ),
                      'const:', s.Score().TotalConstraintScore().Round( 2 ),
                      'unplan:', s.Score().UnplannedNodeCosts().Round( 2 ),
                      'iterations:', actions.Iterations().Value(),
                        'improvements:', actions.IterationsImproved().Value() );
      
           total := total + s.Score().TotalScore();
           if (s.Score().TotalScore() < best)
           {
             best := s.Score().TotalScore();
           }
           i++;
         }
    
       debuginfo( 'Iterative time remaining =', iterativeendtime - DateTime::ActualTime(),
                  '  Iterations =', actions.Iterations().Value(),
                  '  Improvement =', actions.IterationsImproved().Value(),
                  '  Average =', guard( total / i, 0.0 ).Round( 0 ),
                  '  Best =', best.Round( 0 ),
                  '  Nodes =', randomdestr.Nodes() );
        }
        // After logging reset statistics for the next iteration
        actions.ResetStatistics();
      }
    }
    
    LibOpt_SuboptimizerPOA::StrategyFinish( poa );
  *]
}
