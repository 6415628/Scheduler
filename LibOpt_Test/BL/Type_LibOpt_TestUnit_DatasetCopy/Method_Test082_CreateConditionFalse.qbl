Quintiq file version 2.0
#parent: #root
Method Test082_CreateConditionFalse (LibOpt_TestDataset dataset)
{
  Description: 'Check if no datasets and no snapshots are created when the `CreateCondition` method of a `LibOpt_DatasetCopyConditional` returns `False`.'
  TextBody:
  [*
    // evr3 Jul-6-2020 (created)
    opt := this.Optimizer( dataset );
    opt.IsCreatingDatasetCopiesEnabled( true );
    
    // For each component in 'CreateAllComponents', a run is created that only contains that component.
    runs := opt.CreateAllComponents();
    se := dataset.ScopeElementMock( relnew );
    
    strs := construct( structured[stream[JSON]] );
    traverse( runs, Elements, run )
    {
      scope := LibOpt_ScopeFat::Create( run );
      scope.Add( se );
      run.SetStartScope( scope );
    
      startcomponent := run.StartComponent();
      // Attach a 'LibOpt_DatasetCopyConditional_UnitTest_CreateConditionFalse' dataset copy to the 'Initialize', 'Continue' and 'Finalize' component positions of the 'startcomponent' component.
      // Note: the 'Continue' component position of iterator components is skipped.
      LibOpt_TestUnit_DatasetCopy::CreateDatasetCopiesForNormalComponentPositions( startcomponent, 
                                                                                   // The LibOpt_DatasetCopyConditional_UnitTest_CreateConditionFalse type will never create a dataset copy.
                                                                                   typeof( LibOpt_DatasetCopyConditional_UnitTest_CreateConditionFalse ).Name() );
      
      strs.Add( run.Start() );  
    }
    
    str := stream[JSON]::Merge( strs )
    ->|stream[Void]::Wait( this.MDSEditorUpdateTime() ) // Wait some time to ensure that the dataset copies have been created and that MDSEditor::Editor().ObjectInfos() is updated. 
    ->|void->() // Start a reactive call to handle the created dataset copies.
    {
      objectinfos := MDSEditor::Editor().ObjectInfos();
      
      traverse( runs,
                Elements,
                run
                )
      {
        // Test that no LibOpt_SnapshotReplannableCopyDataset objects have been created.
        nrcreatedsnapshots := counter( run,
                                       Snapshot.astype( LibOpt_SnapshotReplannableCopyDataset ),
                                       snapshot,
                                       true );
        componentdefinitionname := run.StartComponent().DefinitionName();                               
        this.Run().AssertEqual( 0,
                                nrcreatedsnapshots,
                                "Expected to create 0 '" 
                                + typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()
                                + "' snapshots for the '"
                                + componentdefinitionname
                                + "' component during the run. However, "
                                + [String] nrcreatedsnapshots 
                                + " snapshots were created."
                                );
      }
      // Test that no dataset copies have been created.
      nrofdatasetcopies := counter( objectinfos,
                                    Elements,
                                    objectinfo,
                                    LibOpt_TestUnit_DatasetCopy::IsDatasetChildOfUnitTestDataset( objectinfo, dataset )
                                    );
      
      this.Run().AssertEqual( 0,
                              nrofdatasetcopies,
                              "Expected to create no dataset copies for any component during any of the started runs. However, "
                              + [String] nrofdatasetcopies
                              + " dataset copies were created."
                              );
    }
    
    this.NoException( str );
    this.DeleteDatasetCopies( dataset, str );
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
