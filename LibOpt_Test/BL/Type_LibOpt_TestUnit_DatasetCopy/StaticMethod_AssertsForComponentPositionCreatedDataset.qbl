Quintiq file version 2.0
#parent: #root
StaticMethod AssertsForComponentPositionCreatedDataset (LibOpt_TestUnit_DatasetCopy unittest, LibOpt_BreakpointPosition componentposition)
{
  Description:
  [*
    The asserts in this method check, for some `LibOpt_DatasetCopyConditional` that is attached to a `LibOpt_BreakpointPosition`, that a dataset copy is NOT deleted and that the `LibOpt_SnapshotReplannableCopyDataset` snapshot of the dataset copy has the correct attributes. 
    The following things are checked:
    1 Test if exactly 1 `LibOpt_SnapshotReplannableCopyDataset` snapshot is created for the `LibOpt_BreakpointPosition` to which we attached a `LibOpt_DatasetCopyConditional`. 
    2 Test that the `LibOpt_SnapshotReplannableCopyDataset.HasExecutedDoFinalizeDatasetCopyDelete` attribute has been set to true for the created snapshot.
    3 Test that the `LibOpt_SnapshotReplannableCopyDataset` snapshot has a dataset copy attached to it. 
    4 Test that the dataset copy is converted to a standalone storage state.
  *]
  TextBody:
  [*
    // evr3 Jul-13-2020 (created)
    // Test if exactly 1 LibOpt_SnapshotReplannableCopyDataset snapshot is created for the LibOpt_BreakpointPosition to which we attached a LibOpt_DatasetCopyConditional. 
    nrcreatedsnapshots := counter( componentposition,
                                   DatasetCopyConditional.SnapshotReplannableCopyDataset,
                                   snapshot,
                                   true );
    
    componentdefinitionname := componentposition.Component().DefinitionName();  
    componentpositionname := componentposition.Name();
    unittest.Run().AssertEqual( 1,
                                nrcreatedsnapshots,
                                "Expected to create 1 '" 
                                + typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()
                                + "' snapshot for the '"
                                + componentpositionname
                                + "' component position of the '"
                                + componentdefinitionname
                                + "' component. However, "
                                + [String] nrcreatedsnapshots 
                                + " snapshots were created."
                                );
    
    snapshotreplannable := select( componentposition,
                                   DatasetCopyConditional.SnapshotReplannableCopyDataset,
                                   snapshot,
                                   true );
                                   
    if( not isnull( snapshotreplannable ) )
    {
      // Test that the `LibOpt_SnapshotReplannableCopyDataset.HasExecutedDoFinalizeDatasetCopyDelete` attribute has been set to true for the created snapshot.
      // This attribute implies that the LibOpt_DatasetCopyConditional.DeleteCondition method has been executed for the dataset that is attached to the snapshot.
      unittest.Run().AssertTrue( snapshotreplannable.HasExecutedDoFinalizeDatasetCopyDelete(),
                                 "Expected that the value of the '" 
                                 + typeof( LibOpt_SnapshotReplannableCopyDataset ).Name() 
                                 + '.'
                                 + attribute( LibOpt_SnapshotReplannableCopyDataset, HasExecutedDoFinalizeDatasetCopyDelete ).Name() 
                                 + "' attribute would be 'true'. However, the value of the attribute is 'false'. This snapshot is attached to the '"
                                 + componentpositionname
                                 + "' component position of the '"
                                 + componentdefinitionname
                                 + "' component."
                                 );
       
      // Test that the `LibOpt_SnapshotReplannableCopyDataset` snapshot has a dataset copy attached to it. 
      datasetcopy := MDSEditor::Editor().ObjectInfos().Find( snapshotreplannable.DatasetName() );
      unittest.Run().AssertFalse( isnull( datasetcopy ),
                                  "Expected to create a dataset copy for the '"
                                  + componentpositionname
                                  + "' component position of the '"
                                  + componentdefinitionname
                                  + "' component. However, either no dataset copy has been created or the dataset copy has already been deleted."
                                  );
      // Test that the dataset copy is converted to a standalone storage state.
      // We would prefer to test datasetcopy.State() = DatasetState::StandAloneStorage().AsString(). 
      // However, changing the state of a dataset does not update datasetcopy.State() right away. It looks like datasetcopy.State() is only updated when the process of changing the state has been completed. 
      // We therefore test that the DoFinalizeDatasetCopyChangeToStandAlone method is executed for the dataset
      // This method changes the state of a dataset to standalone. The method also sets the snapshotreplannable.IsMemoryOnly() attribute to false.
      unittest.Run().AssertTrue( not snapshotreplannable.IsMemoryOnly(),
                                 "Expected that the dataset copy would be in a StandAloneStorage state. However, the value of the 'IsMemoryOnly' attribute of the '"
                                 + typeof( LibOpt_SnapshotReplannableCopyDataset ).Name()
                                 + "' snapshot is still 'true', so the dataset is still in a MemoryOnly state. "
                                 + "The dataset copy is created on the '"
                                 + componentpositionname
                                 + "' component position of the '"
                                 + componentdefinitionname
                                 + "' component."
                                 );                        
    }
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
