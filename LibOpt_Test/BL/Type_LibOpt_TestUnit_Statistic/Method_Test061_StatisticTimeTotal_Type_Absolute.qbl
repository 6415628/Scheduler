Quintiq file version 2.0
#parent: #root
Method Test061_StatisticTimeTotal_Type_Absolute (LibOpt_TestDataset dataset)
{
  Description: 'Test that we get the right amount of issues for `LibOpt_StatisticTimeTotal` that is configured with `IsAbsolute` true and for a specific component type'
  TextBody:
  [*
    nr_iterations := 20;
    
    opt := this.Optimizer( dataset );
    run := opt.CreateRun();
    
    scope := LibOpt_Scope::Create( run );
    run.SetStartScope( scope );
    
    iterator := opt.IteratorForEachLink( run, 'Iterator' );
    
    lower := opt.ComponentParentReflection( run, OS::GenerateGUIDAsString(), method( LibOpt_TestUnit_Statistic, M06X_Operation_Sleep000,
                                                                                     LibOpt_ComponentParent, LibOpt_Task ) );
    upper := opt.ComponentParentReflection( run, OS::GenerateGUIDAsString(), method( LibOpt_TestUnit_Statistic, M06X_Operation_Sleep200,
                                                                                     LibOpt_ComponentParent, LibOpt_Task ) );
    
    components := construct( LibOpt_Components );
    
    components.Add( lower );
    components.Add( upper );
    for( i := 3; i <= nr_iterations; i++ )
    {
      component := opt.ComponentParentReflection( run, OS::GenerateGUIDAsString(), method( LibOpt_TestUnit_Statistic, M06X_Operation_Sleep100,
                                                                                           LibOpt_ComponentParent, LibOpt_Task ) );
      components.Add( component );
    }
    
    components := selectsortedset( components, Elements, component, true, Real::Random() );
    traverse( components, Elements, component )
    {
      iterator.Fork( component );
    }
    
    this.NoException( run->Start()->|void->( )
    {
      statistics := selectset( run, Statistic.astype( LibOpt_StatisticTimeTotal ), statistic,
                               statistic.IsAbsolute()
                               and statistic.IsType() );
      
      if( this.Run().AssertEqual( 2, statistics.Size(), 'Incorrect amount of statistics' ) )
      {
        statistic := selectobject( statistics, Elements, statistic, statistic.ComponentType() = lower.ComponentType() );
        
        this.Run().AssertEqual( nr_iterations, statistic.NrElements(), 'Incorrect amount of elements' );
        this.Run().AssertGreaterOrEqual( 2, statistic.Issue( relsize ), 'Incorrect amount of issues' );
        
        this.Run().AssertEqual( 1, counter( lower, SnapshotComponent.IterationPart.Snapshot.Issue, issue, issue.Statistic() = statistic ),
                                'Unexpected issue count on violation of lower bound' );
        this.Run().AssertEqual( 1, counter( upper, SnapshotComponent.IterationPart.Snapshot.Issue, issue, issue.Statistic() = statistic ),
                                'Unexpected issue count on violation of upper bound' );
      }
    } );
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
