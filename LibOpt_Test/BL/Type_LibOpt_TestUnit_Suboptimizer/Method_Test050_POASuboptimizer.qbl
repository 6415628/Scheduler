Quintiq file version 2.0
#parent: #root
Method Test050_POASuboptimizer (LibOpt_TestDataset dataset)
{
  Description: 'Checks whether the POASuboptimizer returns the correct snapshot type, and also handles error correctly.'
  TextBody:
  [*
    opt := this.Optimizer( dataset );
    
    suboptimizers := construct( LibOpt_MyPOASuboptimizers );
    for( i := 0; i < 5; i++ )
    {
      run := opt.CreateRun();
      run.DebugScope( true );
      start_scope  := LibOpt_Scope::Create( run );
      result_scope := LibOpt_Scope::Create( run );
      run.SetStartScope( start_scope );
      runcontextforutf := LibOpt_MyRunContextForUTF::Create( run );
      runcontextforutf.Scope( relset, result_scope );
      suboptimizers.Add( opt.POASuboptimizer( run, 'POA-' + [String] i, runcontextforutf ) );
    }
    
    suboptimizers.Element( 0 ).RunContextForUTF().ErrorAtInitialize( true );
    suboptimizers.Element( 1 ).RunContextForUTF().ErrorAtExecute( true );
    suboptimizers.Element( 2 ).RunContextForUTF().ErrorAtStrategy( true );
    suboptimizers.Element( 3 ).RunContextForUTF().ErrorAtHandleResult( true );
    suboptimizers.Element( 4 );
    
    this.Run().AssertGreater( 0, suboptimizers.Size() );
    
    traverse( suboptimizers, Elements, suboptimizer )
    {
      finish_init          :=                     suboptimizer <> suboptimizers.Element( 0 );
      finish_execute       := finish_init     and suboptimizer <> suboptimizers.Element( 1 );
      finish_strategy      := finish_execute  and suboptimizer <> suboptimizers.Element( 2 );
      finish_handle_result := finish_strategy and suboptimizer <> suboptimizers.Element( 3 );
      
      types := construct( Strings );
      this.AddIf( true,                     types, typeof( LibOpt_SnapshotComponent ) );
      this.AddIf( finish_strategy,          types, typeof( LibOpt_SnapshotPOA ) );
      this.AddIf( finish_strategy,          types, typeof( LibOpt_SnapshotPOASolution ) );
      this.AddIf( finish_strategy,          types, typeof( LibOpt_SnapshotPOASolution ) );
      this.AddIf( finish_strategy,          types, typeof( LibOpt_SnapshotKPI ) );
      this.AddIf( finish_handle_result,     types, typeof( LibOpt_SnapshotKPI ) );
      this.AddIf( finish_handle_result,     types, typeof( LibOpt_SnapshotSuboptimizer ) );
      this.AddIf( not finish_handle_result, types, typeof( LibOpt_SnapshotError ) );
      
      this.CheckSnapshotType( suboptimizer, types );
    }
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
