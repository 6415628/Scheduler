Quintiq file version 2.0
#parent: #root
Method Test014_StopwatchInSuboptimizerGPError (LibOpt_TestDataset dataset)
{
  Description: 'Test that the time capturing of the GP suboptimizer work correctly, even if an error is thrown.'
  TextBody:
  [*
    max_diff      := Duration::Millis( 30 );
    initialize    := Duration::Millis( 50 );
    handle_result := initialize + max_diff;
    
    opt := this.Optimizer( dataset );
    template := opt.CreateRun();
    runcontext := LibOpt_MyRunContextForUTF::Create( template );
    
    runcontext.DurationInitialize( initialize );
    runcontext.DurationHandleResult( handle_result );
    runcontext.ErrorAtHandleResult( true );
    
    opt.GPSuboptimizer( template, 'Subopt', runcontext );
    
    runs := opt.GenerateForError( template );
    
    
    // TEST
    sequence := stream[JSON]::Success();
    traverse( runs, Elements, run )
    {
      sequence := sequence->|run->Start();
      this.NoException( sequence );
    }
    
    this.NoException( sequence->|void->()
    {
      traverse( runs, Elements, run )
      {
        id := ' | comment = ' + run.Comment()
        algorithm_snapshot := select( run, Snapshot.astype( LibOpt_SnapshotAlgorithm ), snapshot, true );
        if( this.Run().AssertFalse( isnull( algorithm_snapshot ), 'isnull( algorithm_snapshot )' + id ) )
        {
          this.Run().AssertGreaterOrEqual( initialize, algorithm_snapshot.InitializeDuration(), 'InitializeDuration ' + id );
          this.Run().AssertLess( initialize + max_diff, algorithm_snapshot.InitializeDuration(), 'InitializeDuration ' + id );
          
          this.Run().AssertGreaterOrEqual( handle_result, algorithm_snapshot.HandleResultDuration(), 'HandleResultDuration ' + id );
          this.Run().AssertLess( handle_result + max_diff, algorithm_snapshot.HandleResultDuration(), 'HandleResultDuration ' + id );
        }
      }
    } );
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
