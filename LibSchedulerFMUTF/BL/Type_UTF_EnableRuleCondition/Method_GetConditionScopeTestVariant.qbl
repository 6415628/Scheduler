Quintiq file version 2.0
#parent: #root
Method GetConditionScopeTestVariant (output String ruleSubtype, output String conditionType, output Boolean conditionValue, 
  output String conditionScope, output Boolean operation1AttributeValue, output Boolean operation2AttributeValue, 
  output Boolean hasNoViolateConstaintsOnTask1, output Boolean hasNoViolateConstaintsOnTask2, output Boolean isVariantFound)
{
  Description: "Retrieves the test variant's values."
  TextBody:
  [*
    ruleSubtypes := construct( Strings );
    conditionTypes := construct( Strings );
    conditionValues := construct( Booleans );
    conditionScopes := construct( Strings );
    operation1AttributeValues := construct( Booleans );
    operation2AttributeValues := construct( Booleans );
    hasNoViolateConstraintsOnTask1s := construct( Booleans );
    hasNoViolateConstraintsOnTask2s := construct( Booleans );
    
    variants := this.GetAllConditionScopeTestVariants( ruleSubtypes,
                                                 conditionTypes,
                                                 conditionValues,
                                                 conditionScopes,
                                                 operation1AttributeValues,
                                                 operation2AttributeValues,
                                                 hasNoViolateConstraintsOnTask1s,
                                                 hasNoViolateConstraintsOnTask2s );
    
    // Look for data for specified variant
    variantNr := variants.Find( this.Variant() );
    isvariantfound := variantNr >= 0;
    if( isvariantfound )
    {
      ruleSubtype := ruleSubtypes.Element( variantNr );
      conditionType := conditionTypes.Element( variantNr );
      conditionValue := conditionValues.Element( variantNr );
      conditionScope := conditionScopes.Element( variantNr );
      operation1AttributeValue := operation1AttributeValues.Element( variantNr );
      operation2AttributeValue := operation2AttributeValues.Element( variantNr );
      hasNoViolateConstaintsOnTask1 := hasNoViolateConstraintsOnTask1s.Element( variantNr );
      hasNoViolateConstaintsOnTask2 := hasNoViolateConstraintsOnTask2s.Element( variantNr );
    }
  *]
}
