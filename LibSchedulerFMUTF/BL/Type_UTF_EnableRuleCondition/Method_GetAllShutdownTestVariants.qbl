Quintiq file version 2.0
#parent: #root
Method GetAllShutdownTestVariants (output Booleans isconditionenables, output Strings conditionScopes, output Booleans conditionValues, 
  output Booleans operationAttributeValues, output Booleans hasNoViolateConstraints) as owning Strings
{
  Description: 'Return shutdown specific variants.'
  TextBody:
  [*
    variants := construct( Strings );
        
    // Scenario 1.1: Test with shutdown rule condition - needs edge trimming = true and condition scope = SecondTaskOnly ( Constraint )
    //               while current operation = true
    variants.Add( 'Test with shutdown rule condition - needs edge trimming = true and condition scope = SecondTaskOnly ( Constraint )' );
    isconditionenables.Add( true );
    conditionScopes.Add( RuleConstant::ConditionScope_SecondTaskOnly() );
    conditionValues.Add( true );
    operationAttributeValues.Add( true );
    hasNoViolateConstraints.Add( false );
    
    // Scenario 1.2: Test with shutdown rule condition - needs edge trimming = true and condition scope = SecondTaskOnly ( No Constraint )
    //               while current operation = false
    variants.Add( 'Test with shutdown rule condition - needs edge trimming = true and condition scope = SecondTaskOnly ( No constraint )' );
    isconditionenables.Add( true );
    conditionScopes.Add( RuleConstant::ConditionScope_SecondTaskOnly() );
    conditionValues.Add( true );
    operationAttributeValues.Add( false );
    hasNoViolateConstraints.Add( true );
    
    // Scenario 1.3: Test with shutdown rule condition - condition checking disabled ( Constraint )
    //               while current operation = true
    variants.Add( 'Test with shutdown rule condition - condition checking disabled ( Constraint )' );
    isconditionenables.Add( false );
    conditionScopes.Add( RuleConstant::ConditionScope_SecondTaskOnly() );
    conditionValues.Add( true );
    operationAttributeValues.Add( true );
    hasNoViolateConstraints.Add( false );
    
    return &variants;
  *]
}
