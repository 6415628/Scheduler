Quintiq file version 2.0
#parent: #root
Method GetLayerVariants (output Strings characteristicTypes, output Reals ruleValues, output Booleans isMinimums, 
  output Reals operationAttributeValues, output Booleans hasNoConstraintViolations) #extension
{
  TextBody:
  [*
    // To be extended in layer
    
    variants := construct( Strings );
    
    /*
      Scenario 1: Test using operation edge trim
      Scenario 2: Test using operation input thickness
      Scenario 3: Test using operation oil index
      Scenario 4: Test using operation output thickness
    */
    
    // Scenario 1.1: Test rule subtype allowed mininum value - operation edge trim subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation edge trim subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationInputThickness() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 1.2: Test rule subtype allowed mininum value - operation edge trim exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation edge trim exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 1.3: Test rule subtype allowed maximum value - operation edge trim subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation edge trim subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 1.4: Test rule subtype allowed maximum value - operation edge trim exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation edge trim exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 2.1: Test rule subtype allowed mininum value - operation input thickness subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation input thickness subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 2.2: Test rule subtype allowed mininum value - operation input thickness exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation input thickness exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 2.3: Test rule subtype allowed maximum value - operation input thickness subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation input thickness subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationInputThickness() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 2.4: Test rule subtype allowed maximum value - operation input thickness exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation input thickness exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationEdgeTrim() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 3.1: Test rule subtype allowed mininum value - operation oil index subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation oil index subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOilIndex() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 3.2: Test rule subtype allowed mininum value - operation oil index exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation oil index exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOilIndex() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 3.3: Test rule subtype allowed maximum value - operation oil index subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation oil index subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOilIndex() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 3.4: Test rule subtype allowed maximum value - operation oil index exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation oil index exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOilIndex() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 4.1: Test rule subtype allowed mininum value - operation output thickness subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation output thickness subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOutputThickness() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 4.2: Test rule subtype allowed mininum value - operation output thickness exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation output thickness exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOutputThickness() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 4.3: Test rule subtype allowed maximum value - operation output thickness subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation output thickness subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOutputThickness() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 4.4: Test rule subtype allowed maximum value - operation output thickness exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation output thickness exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationOutputThickness() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    return &variants;
  *]
}
