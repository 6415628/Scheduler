Quintiq file version 2.0
#parent: #root
Method GetLayerVariants (output Strings characteristicTypes, output Booleans isAllowedValues, output Strings ruleValueStrings, 
  output Strings operationAttributeValues, output Booleans hasConstraintViolations) #extension
{
  TextBody:
  [*
    variants := construct( Strings );
    
    /*
      1. Needs edge trimming
      2. Needs oil
      3. Treatment type
    */
    
    // Scenario 1.1: Test rule subtype allowed value check - matching needs edge trimming
    variants.Add( 'Test rule subtype allowed value check - matching needs edge trimming' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsEdgeTrimming() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'true' );
    hasConstraintViolations.Add( false );
    
    // Scenario 1.2: Test rule subtype allowed value check - unmatching needs edge trimming
    variants.Add( 'Test rule subtype allowed value check - unmatching needs edge trimming' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsEdgeTrimming() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'false' );
    hasConstraintViolations.Add( true );
    
    // Scenario 1.3: Test rule subtype not allowed value check - matching needs edge trimming
    variants.Add( 'Test rule subtype not allowed value check - matching needs edge trimming' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsEdgeTrimming() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'true' );
    hasConstraintViolations.Add( true );
    
    // Scenario 1.4: Test rule subtype not allowed value check - unmatching needs edge trimming
    variants.Add( 'Test rule subtype not allowed value check - unmatching needs edge trimming' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsEdgeTrimming() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'false' );
    hasConstraintViolations.Add( false );
    
    
    // Scenario 2.1: Test rule subtype allowed value check - matching needs oil
    variants.Add( 'Test rule subtype allowed value check - matching needs oil' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsOil() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'true' );
    hasConstraintViolations.Add( false );
    
    // Scenario 2.2: Test rule subtype allowed value check - unmatching needs oil
    variants.Add( 'Test rule subtype allowed value check - unmatching needs oil' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsOil() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'false' );
    hasConstraintViolations.Add( true );
    
    // Scenario 2.3: Test rule subtype not allowed value check - matching needs oil
    variants.Add( 'Test rule subtype not allowed value check - matching needs oil' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsOil() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'true' );
    hasConstraintViolations.Add( true );
    
    // Scenario 2.4: Test rule subtype not allowed value check - unmatching needs oil
    variants.Add( 'Test rule subtype not allowed value check - unmatching needs oil' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationNeedsOil() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'true' );
    operationAttributeValues.Add( 'false' );
    hasConstraintViolations.Add( false );
    
    // Scenario 3.1: Test rule subtype allowed value check - matching treatment type
    variants.Add( 'Test rule subtype allowed value check - matching treatment type' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationTreatmentType() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( false );
    
    // Scenario 3.2: Test rule subtype allowed value check - unmatching treatment type
    variants.Add( 'Test rule subtype allowed value check - unmatching treatment type' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationTreatmentType() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( true );
    
    // Scenario 3.3: Test rule subtype not allowed value check - matching treatment type
    variants.Add( 'Test rule subtype not allowed value check - matching treatment type' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationTreatmentType() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( true );
    
    // Scenario 3.4: Test rule subtype not allowed value check - unmatching treatment type
    variants.Add( 'Test rule subtype not allowed value check - unmatching treatment type' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationTreatmentType() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( false );
    
    return &variants;
  *]
}
