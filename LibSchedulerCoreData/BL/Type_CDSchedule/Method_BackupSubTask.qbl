Quintiq file version 2.0
#parent: #root
Method BackupSubTask (const Schedule schedule)
{
  Description: 'Backup subtask core data'
  TextBody:
  [*
    // Backup cleanup subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( CleanUpSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDCleanUpSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup no buffer action input subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( NoBufferActionInputSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDNoBufferActionInputSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup no buffer action subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( NoBufferActionSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDNoBufferActionSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup no buffer outflow subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( NoBufferOutflowSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDNoBufferOutflowSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }
    
    // Backup no buffer wait subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( NoBufferWaitSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDNoBufferWaitSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup process subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( ProcessSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDProcessSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }
    
    // Backup receive subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( ReceiveSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDReceiveSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup setup subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( SetupSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDSetupSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }
    
    // Backup stoppage subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( StoppageSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDStoppageSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }  
    
    // Backup transfer subtask
    traverse( schedule, ResourceGroup_SC.Resource_SC.Task_SC.SubTask.astype( TransferSubTask ), subtask )
    {
      cdSubTask := this.CDEntity( relnew, CDTransferSubTask );
      CopyCorresponding::CopyFrom( subtask ).CopyTo( cdSubTask );
      
      cdSubTask.TaskID( subtask.Task_SC().TaskID() );
    }
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
