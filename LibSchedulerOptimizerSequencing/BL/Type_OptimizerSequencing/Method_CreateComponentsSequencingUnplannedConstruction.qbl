Quintiq file version 2.0
#parent: #root
Method CreateComponentsSequencingUnplannedConstruction (LibOpt_Run run, LibOpt_Component spanaware_suboptimizer, const SettingsSequencingNeighborhoodCreator settings_neighborhood) as LibOpt_Component
{
  Description:
  [*
    Creates the two linked selectors for the "fast construction of unplanned operations" iterations in the given run.
    These components make use of the given POA suboptimizer to plan in multiple unplanned operations.
    The given `spanaware_suboptimizer` must be the root of a component path in the given run that executes a span selector and the POA suboptimizer. It can be the same components also used in other parts of the optimizer graph.
    Does not set the run's root component. Instead, returns the root component of the created subgraph.
  *]
  TextBody:
  [*
    ////construction step selector:
    unplanned_selector := null( LibOpt_Selector );
    
    // If the construction focus is on work order
    if( settings_neighborhood.IsSelectPerWorkOrder() )
    {
      // Then create the selector that selects the operations of the most urgent unplanned work orders
      unplanned_selector := SelectorUnplannedWorkOrder::Create( run, "Unplanned Workorder", settings_neighborhood.NumOperations(), settings_neighborhood.ConstructionRatioNewOperations() );
    }
    else
    {
      // Else create the selector that focusses on operations whose upstream has been planned
      // This selects all operations that have all upstream operations planned. But these may be too much for a single POA iteration.
      upstreamplanned_selector := SelectorUpstreamPlanned::Create( run, "Unplanned Pre-Selector" );
      upstreamplanned_selector.IncludePlanned( true );
      
      // so we need another selector picking the n*1/3 most urgent ones from the input scope plus the n*2/3 last planned ones on any of the plannable resources of the picked unplanned ones:
      unplanned_selector := SelectorUnplannedMultiple::Create( run, "Urgency Selector", settings_neighborhood.NumOperations(), settings_neighborhood.ConstructionRatioNewOperations() );
    
      // plumbing:
      upstreamplanned_selector.To( unplanned_selector );
    }
    
    // plumbing:
    unplanned_selector.To( spanaware_suboptimizer );
    
    
    return unplanned_selector;
  *]
}
