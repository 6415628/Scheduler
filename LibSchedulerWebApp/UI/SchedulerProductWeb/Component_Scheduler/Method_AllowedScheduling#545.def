Quintiq file version 2.0
#parent: #root
Method AllowedScheduling (SingleResourceBase resource, structured[Operation_SC] operations, Boolean skipsoftcheck, 
  Boolean ctrlshiftkey, Task_SC beforetask, Task_SC aftertask, 
  String identifier, output String feedback_o, output Boolean isallowedhard_o) as Boolean id:Method_Scheduler_AllowedScheduling_545
{
  #keys: '[143768.0.364097926]'
  Body:
  [*
    /*
    This precondition covers the use cases of scheduling/rescheduling operations/tasks of Single Resources
    1. OnDrop structured[Operation]/[PlanUnit] --> SingleResourceBase ( GanttChart )
    2. OnDrop structured[Operation]/[PlanUnit] --> SingleResourceBase ( Resource List )
    3. OnDrop structured[Operation]/[PlanUnit] --> SingleResourceBase ( Task List )
    4. OnDrop structured[Operation] --> SingleResourceBase ( Campaign List )
    
    This precondition checks whether the selection are allowed to be replanned
    and are allowed to be planned between the before and after task
    */
    
    isallowed := Operation_SC::CanReplan( operations, skipsoftcheck, feedback_o, isallowedhard_o );
    
    //After task checking is separated from AllowedScheduling checking to avoid multiple same feedback precondition text. Eg. When drag campaign task to before a campaign task in frozen period
    isallowed := ( isnull( aftertask )
                   or operations.Find( aftertask.GetOperation() ) > -1 
                   or aftertask.GetOperation().CanReplan( skipsoftcheck, feedback_o, isallowedhard_o ) )
                 and isallowed;
    
    isallowed := resource.AllowedScheduling( operations,
                                             beforetask,
                                             aftertask,
                                             skipsoftcheck,
                                             feedback_o,
                                             isallowedhard_o )
                 and isallowed;
    
    
    if( not isallowed and feedback_o.Length() > 0 )
    {
      feedback_o := Translations::SC_CannotBePlannedOn( identifier, Resource_SC::GetIdentifier( resource ) ) + String::NewLine() + feedback_o;
    
      if( isallowedhard_o )
      {
        // Giving user a hint that holding ctrl key will skip soft check
        feedback_o := feedback_o + String::NewLine() + Translations::SC_HoldCtrlToOverride();
      }
    }
    
    feedback_o := Schedule::TrimFeedback( feedback_o );
    
    return isallowed;
  *]
}
