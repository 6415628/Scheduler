Quintiq file version 2.0
#parent: ListOperationsInPanelOperations
Response OnClick (structured[Operation_SC] selection) id:Response_ListOperationsInPanelOperations_MenuAddToBatch_OnClick
{
  #keys: '[154390.0.136070975]'
  CanBindMultiple: false
  DefinitionID => //ListOperations/Responsedef_ListOperations_WebMenu_OnClick
  GroupServerCalls: true
  Initiator: 'MenuAddToBatch'
  Precondition:
  [*
    isallowedhard := true;
    ctrlkey       := actionmodifier.IsControl();
    ctrlshiftkey  := ctrlkey and actionmodifier.IsShift();
    operations := construct( Operation_SCs );
    target := Scheduler.DataHolderBatchDetail().Data();
    result := true;
    if( not isnull( target ) )
    {
      if( not ctrlshiftkey ) //when ctrlshiftkey = false and not isnull droptarget, the intention is to merge all operations into the droptarget
      {
        operations  := selectset( target, BatchSequenceElement.Operation_SC, bo, true, true ); //operations from the drop target
      }
      
      selection := selection.Union( operations )
      
      
      if( target.IsPlanned() and not ctrlshiftkey )
      {
        batchtask := target.BatchTask();
        result := Scheduler.AllowedScheduling( batchtask.BatchResource(), //batchresource
                                               selection,        //structured operations
                                               ctrlkey,            //skip soft check
                                               ctrlshiftkey,       //ctrl shift key
                                               batchtask.Previous(),  //before task
                                               batchtask.Next(),      //afterbatch
                                               Operation_SC::GetSelectedObjects( selection ),
                                               feedback,
                                               isallowedhard )
      }
      else
      {
        result := Scheduler.AllowedInBatch( selection, not target.IsPlanned(), ctrlkey, ctrlshiftkey,  feedback, isallowedhard );
      }
    }
    else
    {
      result := false;
      feedback := Translations::SC_BatchNotSelected();
    }
    
    return result;
  *]
  QuillAction
  {
    Body:
    [*
      //  structured[Operation] --> Batch List
      target := Scheduler.DataHolderBatchDetail().Data();
      ctrlshift := actionmodifier.IsControl() and actionmodifier.IsShift();
      
      if( not isnull( target ) and not ctrlshift )
      {
        // (Add operation to batch)
        target.AddOperations( selection );
      }
      else
      {
        Batch::CreateBatchAssignOperations( selection, Schedule );
      }
    *]
  }
}
