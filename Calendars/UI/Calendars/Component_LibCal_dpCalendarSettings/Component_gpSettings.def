Quintiq file version 2.0
Component gpSettings
{
  #keys: '[146730.0.1349442856]'
  BaseType: 'GroupPanel'
  GBLayout
  {
    Type: 'GBLayoutDefinition'
    Columns:
    [
      GBFlow.Column { grow: 0 id: 117 parent: 0 }
      GBFlow.Column { grow: 0 id: 636 parent: 0 }
      GBFlow.Column { grow: 0 id: 686 parent: 0 }
      GBFlow.Column { grow: 0 id: 956 parent: 0 }
      GBFlow.Column { grow: 0 id: 559 parent: 0 }
      GBFlow.Column { grow: 0 id: 984 parent: 0 }
      GBFlow.Column { grow: 0 id: 840 parent: 0 }
    ]
    Elements:
    [
      GBElement
      {
        Component => lblBase
        Position { startcolumn: 636 startrow: 529 endcolumn: 686 endrow: 529 }
      }
      GBElement
      {
        Component => dtBase
        Position { startcolumn: 956 startrow: 529 endcolumn: 840 endrow: 529 }
      }
      GBElement
      {
        Component => lblWindow
        Position { startcolumn: 636 startrow: 561 endcolumn: 686 endrow: 561 }
      }
      GBElement
      {
        Component => /edtWindow
        Position { startcolumn: 956 startrow: 561 endcolumn: 956 endrow: 561 }
      }
      GBElement
      {
        Component => lblDaysWindow
        Position { startcolumn: 559 startrow: 561 endcolumn: 559 endrow: 561 }
      }
      GBElement
      {
        Component => /edtHistory
        Position { startcolumn: 984 startrow: 561 endcolumn: 984 endrow: 561 }
      }
      GBElement
      {
        Component => lblDaysHistory
        Position { startcolumn: 840 startrow: 561 endcolumn: 840 endrow: 561 }
      }
      GBElement
      {
        Component => lblUpdateInterval
        Position { startcolumn: 636 startrow: 727 endcolumn: 686 endrow: 727 }
      }
      GBElement
      {
        Component => durUpdateInterval
        Position { startcolumn: 956 startrow: 727 endcolumn: 559 endrow: 727 }
      }
      GBElement
      {
        Component => lblMarginLeftSettings
        Position { startcolumn: 117 startrow: 727 endcolumn: 117 endrow: 727 }
      }
      GBElement
      {
        Component => /pnlTimezone
        Position { startcolumn: 956 startrow: 273 endcolumn: 840 endrow: 273 }
      }
      GBElement
      {
        Component => lblTimezone
        Position { startcolumn: 686 startrow: 273 endcolumn: 686 endrow: 273 }
      }
    ]
    Gaps: [ left: 5 right: 5 top: 5 bottom: 5 inner: 5 ]
    Rows:
    [
      GBFlow.Row { grow: 0 id: 273 parent: 0 }
      GBFlow.Row { grow: 0 id: 529 parent: 0 }
      GBFlow.Row { grow: 0 id: 561 parent: 0 }
      GBFlow.Row { grow: 0 id: 727 parent: 0 }
    ]
  }
  Children:
  [
    Component lblBase
    {
      #keys: '[146730.0.1349442857]'
      BaseType: 'Label'
      Properties:
      [
        Alignment: 'right'
        Text: 'Base'
        Tooltip: 'The Base and the Update interval are used together to calculate the start of the time window during which the calendar event occurrences are generated.<br/>This window initially starts at the Base and moves forward in time according to the Update interval.<br/><br/>The Base also defines the time of day at which the window is moved forward in time (as per the Update interval).<br/>This implies that if a daily recalculation is needed at 2 AM, the time of the Base should be set to 2 AM.<br/>Note that a recalculation does not update the Base itself.'
        Transparent: true
      ]
    }
    Component dtBase
    {
      #keys: '[146730.0.1349442866]'
      BaseType: 'GUIDateTimeSelector'
      Properties:
      [
        BackgroundColor: 'Window'
        Format: 'DMMY h:m'
      ]
    }
    Component lblWindow
    {
      #keys: '[146730.0.1349442865]'
      BaseType: 'Label'
      Properties:
      [
        Alignment: 'right'
        Text: 'Window'
        Tooltip: 'The Window is the length of the interval during which calendar event occurrences will be generated.<br/>The start of the window is determined by the Base, the Update interval, and the number of days of History to be taken into account.'
        Transparent: true
      ]
    }
    #child: edtWindow
    Component lblDaysWindow
    {
      #keys: '[146730.0.1349442864]'
      BaseType: 'Label'
      Properties:
      [
        Text: 'days, of which'
        Transparent: true
      ]
    }
    #child: edtHistory
    Component lblDaysHistory
    {
      #keys: '[146730.0.1349442862]'
      BaseType: 'Label'
      Properties:
      [
        Text: 'days of history'
        Transparent: true
      ]
    }
    Component lblUpdateInterval
    {
      #keys: '[146730.0.1349442858]'
      BaseType: 'Label'
      Properties:
      [
        Alignment: 'right'
        Text: 'Update interval'
        Tooltip: 'Determines how often the calendar window is moved forward in time. The value is typically in ‘days’ (e.g. 1 day), with the hours set to 0:00.<br/>If the interval is 0 the calendar window is ‘frozen’ at the specified Base. This can be a date in the past.'
        Transparent: true
      ]
    }
    Component durUpdateInterval
    {
      #keys: '[146730.0.1349442871]'
      BaseType: 'GUIDurationSelector'
      Properties:
      [
        BackgroundColor: 'Window'
        CanBeNegative: false
        DataBinding: 'LibCal_dpCalendarSettings.Data.UpdateInterval'
        MinDuration: '0:00'
      ]
    }
    Component lblMarginLeftSettings
    {
      #keys: '[146730.0.1349442861]'
      BaseType: 'Label'
      Properties:
      [
        Text: ''
        Transparent: true
      ]
    }
    #child: pnlTimezone
    Component lblTimezone
    {
      #keys: '[146730.0.1349448325]'
      BaseType: 'Label'
      Properties:
      [
        Alignment: 'right'
        Text: 'Timezone'
        Tooltip: 'The timezone that is used by the calendars.'
        Transparent: true
      ]
    }
  ]
  Properties:
  [
    Text: 'Settings'
    ModeledStringList ChildOrdering
    {
      c: lblBase
      c: pnlTimezone
      c: dtBase
      c: edtWindow
      c: edtHistory
      c: durUpdateInterval
      c: lblWindow
      c: lblDaysWindow
      c: lblDaysHistory
      c: lblUpdateInterval
      c: lblMarginLeftSettings
      c: lblTimezone
    }
  ]
}
