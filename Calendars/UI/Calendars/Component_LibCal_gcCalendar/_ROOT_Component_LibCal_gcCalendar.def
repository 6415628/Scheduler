Quintiq file version 2.0
#root
#parent: Calendars
OrphanComponent LibCal_gcCalendar
{
  #keys: '[131094.1.370404570]'
  BaseType: 'GanttChart'
  Children:
  [
    Component menuGanttChart
    {
      #keys: '[104128.0.145645884]'
      BaseType: 'popupGanttchart'
      Children:
      [
        Component PopupParent
        {
          #keys: '[514.0.555535]'
          BaseType: 'PopupParent'
          IsDerived: true
          Children:
          [
            Component mnuSeparator1 { #keys: '[104128.0.145663948]' BaseType: 'Menu' Properties: [ Separator: true ] }
            Component mnuDeleteOccurrence { #keys: '[131094.0.1255010478]' BaseType: 'Menu' Properties: [ Image: 'GARBAGE_FULL2' Shortcut: 'Del' Text: 'Delete occurrence' ] }
            Component mnuDeleteEvent { #keys: '[131094.0.1256121038]' BaseType: 'Menu' Properties: [ Image: 'GARBAGE' Shortcut: 'Ctrl+Del' Text: 'Delete event...' ] }
            Component mnuEditEvent { #keys: '[131094.0.1345456281]' BaseType: 'Menu' Properties: [ BindDoubleClick: true Image: 'CALENDAR_EDIT' Shortcut: 'Enter' Text: 'Edit event...' ] }
            Component mnuEditOccurrence { #keys: '[131094.0.1404325705]' BaseType: 'Menu' Properties: [ Image: 'CLOCK' Text: 'Edit occurrence...' ] }
            Component mnuNewEvent { #keys: '[131094.0.1860052675]' BaseType: 'Menu' Properties: [ Image: 'CALENDAR' Text: 'New event...' ] }
            Component mnuSeparator2 { #keys: '[131094.0.1860057820]' BaseType: 'Menu' Properties: [ Separator: true ] }
            Component MenuNavigation
            {
              #keys: '[104128.0.40881109]'
              BaseType: 'MenuNavigation'
              IsDerived: true
              Children:
              [
                Component MenuNow { #keys: '[103784.990.515374824]' BaseType: 'MenuNow' IsDerived: true }
              ]
            }
            Component mnuNewSubscription { #keys: '[131094.1.1224465135]' BaseType: 'Menu' Properties: [ Image: 'LINK' Text: 'New subscription...' ] }
            Component mnuEditSubscription { #keys: '[131094.1.1224465681]' BaseType: 'Menu' Properties: [ Image: 'CALENDAR_EDIT' Shortcut: 'Enter' Text: 'Edit subscription...' ] }
            Component mnuDeleteSubscription { #keys: '[131094.1.1224466013]' BaseType: 'Menu' Properties: [ Image: 'GARBAGE' Shortcut: 'Ctrl+Del' Text: 'Delete subscription...' ] }
            Component mnuSeparator3 { #keys: '[131094.1.1224466437]' BaseType: 'Menu' Properties: [ Separator: true ] }
          ]
          Properties:
          [
            ModeledStringList ChildOrdering
            {
              c: MenuActions
              c: MenuFilter
              c: MenuNavigation
              c: mnuSeparator1
              c: mnuNewEvent
              c: mnuEditEvent
              c: mnuDeleteEvent
              c: mnuSeparator2
              c: mnuNewSubscription
              c: mnuEditSubscription
              c: mnuDeleteSubscription
              c: mnuSeparator3
              c: mnuEditOccurrence
              c: mnuDeleteOccurrence
            }
          ]
        }
      ]
      Properties:
      [
        PosX: 51
        PosY: 80
      ]
    }
    Component tbNavigation
    {
      #keys: '[104128.0.145646978]'
      BaseType: 'NavigationToolbar'
      GBLayout
      {
        Type: 'GBLayoutDefinition'
        Columns:
        [
          GBFlow.Column { grow: 128 id: 1 parent: 0 }
        ]
        Elements:
        [
          GBElement
          {
            Component => dpNavigationPanel
            Position { startcolumn: 1 startrow: 1 endcolumn: 1 endrow: 1 }
          }
        ]
        Gaps: [ left: 5 right: 5 top: 0 bottom: 0 inner: 5 ]
        Rows:
        [
          GBFlow.Row { grow: 0 id: 1 parent: 0 }
        ]
      }
      Children:
      [
        #child: dpNavigationPanel
      ]
      Properties:
      [
        Priority: 1
        Size: 27
      ]
    }
    Component menuGanttChartRows
    {
      #keys: '[104128.0.145647005]'
      BaseType: 'popupGanttchartRows'
      Children:
      [
        Component PopupParent id:PopupParent_1
        {
          #keys: '[530.0.59473]'
          BaseType: 'PopupParent'
          IsDerived: true
          Children:
          [
            Component MenuFilter id:MenuFilter_1
            {
              #keys: '[104128.0.41519836]'
              BaseType: 'MenuFilter'
              IsDerived: true
              Properties:
              [
                ModeledStringList ChildOrdering
                {
                  c: menuEditFilter
                  c: MenuClearFilter
                  c: MenuStoredFilters
                  c: Menu_1
                  c: menuHideGanttchartRow
                  c: MenuUnhideAllRows
                  c: Menu1_1
                  c: menuShowAllGanttChartRows
                }
              ]
            }
            Component mnuRowSeparator1 { #keys: '[104128.0.145647756]' BaseType: 'Menu' Properties: [ Separator: true ] }
            Component mnuRowCalendarEditor { #keys: '[104128.0.145647757]' BaseType: 'Menu' Properties: [ Image: 'DATE-TIME' Text: 'Edit calendar...' Visible: false ] }
            Component mnuRowNewEvent { #keys: '[131094.0.605218898]' BaseType: 'Menu' Properties: [ Image: 'CALENDAR' Text: 'New event...' ] }
            Component mnuRowDeleteEvent { #keys: '[131094.0.1273916415]' BaseType: 'Menu' Properties: [ Image: 'GARBAGE' Text: 'Delete event...' ] }
            Component mnuRowSeparator2 { #keys: '[131094.0.1860057084]' BaseType: 'Menu' Properties: [ Separator: true ] }
            Component mnuRowEditEvent { #keys: '[131094.0.1874669533]' BaseType: 'Menu' Properties: [ Image: 'CALENDAR_EDIT' Text: 'Edit event...' ] }
            Component mnuRowEditCalendar { #keys: '[131094.1.313281586]' BaseType: 'Menu' Properties: [ Image: 'DATE-TIME' Text: 'Edit calendar...' Visible: false ] }
            Component mnuRowNewSubscription { #keys: '[131094.1.603535083]' BaseType: 'Menu' Properties: [ Image: 'LINK' Text: 'New subscription...' Tooltip: 'Subscribe to an existing event.' ] }
            Component mnuRowEditSubscription { #keys: '[131094.1.1226775768]' BaseType: 'Menu' Properties: [ Image: 'CALENDAR_EDIT' Text: 'Edit subscription...' ] }
            Component mnuRowDeleteSubscription { #keys: '[131094.1.1226776572]' BaseType: 'Menu' Properties: [ Image: 'GARBAGE' Text: 'Delete subscription...' ] }
            Component mnuRowSeparator3 { #keys: '[131094.1.1226776956]' BaseType: 'Menu' Properties: [ Separator: true ] }
          ]
          Properties:
          [
            ModeledStringList ChildOrdering
            {
              c: MenuFilter_1
              c: MenuSortGanttChartRows
              c: mnuRowSeparator1
              c: mnuRowNewEvent
              c: mnuRowEditEvent
              c: mnuRowDeleteEvent
              c: mnuRowSeparator2
              c: mnuRowNewSubscription
              c: mnuRowEditSubscription
              c: mnuRowDeleteSubscription
              c: mnuRowSeparator3
              c: mnuRowEditCalendar
              c: mnuRowCalendarEditor
            }
          ]
        }
      ]
      Properties:
      [
        PosX: 9
        PosY: 81
      ]
    }
    Component uciEventParticipation
    {
      #keys: '[131094.0.1253891571]'
      BaseType: 'UserConfigurableInformation'
      Properties:
      [
        Identification: 'EventParticipation'
        ObjectText: 'VALUE( object.Event().Subject() )'
        ObjectType: 'LibCal_Participation'
        PosX: 51
        PosY: 108
      ]
    }
    Component mrkPlanningTime
    {
      #keys: '[131094.0.1520091604]'
      BaseType: 'ChartMarking'
      Properties:
      [
        MarkPosition: 'DateTime::MinDateTime()'
        PosX: 79
        PosY: 136
      ]
    }
    Component dhCalendar
    {
      #keys: '[131094.0.1860048555]'
      BaseType: 'DataHolder'
      Databinding: 'LibCal_Calendar'
      Children:
      [
        Component deCalendarExtractor
        {
          #keys: '[131094.1.382994716]'
          BaseType: 'GUIDataExtractor'
          Properties:
          [
            PosX: 13
            PosY: 12
          ]
        }
      ]
      Properties:
      [
        PosX: 51
        PosY: 52
      ]
    }
    Component uciTimeInterval
    {
      #keys: '[131094.1.185488139]'
      BaseType: 'UserConfigurableInformation'
      Properties:
      [
        Identification: 'TimeInterval'
        ObjectType: 'LibCal_ExplicitTimeInterval'
        PosX: 79
        PosY: 108
        Precondition: 'not object.Participation().Event().IsAlwaysAvailableEvent()'
        TooltipText:
        [*
          <b>VALUE( object.Participation().Event().Subject() )</b>
          FORMAT( object.Start() ; "dd D2-MM  H2:m" ) - FORMAT( object.End() ; "dd D2-MM  H2:m" )
          VALUE( ifexpr( object.Participation().Event().Type() = LibCal_Event::TYPE_PARTIAL(), "Capacity = " + [String]object.Participation().Event().PartialCapacity(), "" ) )
          VALUE( ifexpr( object.Participation().Event().NrOfSubscribers() > 0, "#Subscribers = " + [String]object.Participation().Event().NrOfSubscribers(), "" ) )
          VALUE( ifexpr( object.Comment() <> "", "------", "" ) )
          VALUE( object.Comment() )
        *]
      ]
    }
    Component deCalendar
    {
      #keys: '[131094.1.382992825]'
      BaseType: 'GUIDataExtractor'
      Properties:
      [
        Component: 'dhCalendar'
        DataType: 'LibCal_Calendar'
        PosX: 51
        PosY: 24
      ]
    }
    Component mrkStartOfWindow
    {
      #keys: '[131094.1.724849906]'
      BaseType: 'ChartMarking'
      Properties:
      [
        Color: 'Gray'
        MarkPosition: 'DateTime::MinDateTime()'
        MarkWidth: 2
        PosX: 51
        PosY: 136
      ]
    }
    Component mrkEndOfWindow
    {
      #keys: '[131094.1.724851327]'
      BaseType: 'ChartMarking'
      Properties:
      [
        Color: 'Gray'
        MarkPosition: 'DateTime::MaxDateTime()'
        MarkWidth: 2
        PosX: 107
        PosY: 136
      ]
    }
    #child: rdEventCategory
    Component vhStartOfWindow
    {
      #keys: '[131094.1.981101334]'
      BaseType: 'ValueHolder'
      Databinding: 'DateTime'
      Properties:
      [
        DataBinding: 'dhCalendar.Data().Start()'
        PosX: 51
        PosY: 163
      ]
    }
    Component vhEndOfWindow
    {
      #keys: '[131094.1.981114745]'
      BaseType: 'ValueHolder'
      Databinding: 'DateTime'
      Properties:
      [
        DataBinding: 'dhCalendar.Data.End'
        PosX: 107
        PosY: 163
      ]
    }
    Component vhPlanningTime
    {
      #keys: '[131094.1.1105270394]'
      BaseType: 'ValueHolder'
      Databinding: 'DateTime'
      Properties:
      [
        DataBinding: 'LibCal_GlobalState.dhGlobalCalendarRegistry().Data().PlanningTime()'
        PosX: 78
        PosY: 163
      ]
    }
    Component uciAlwaysAvailable
    {
      #keys: '[146730.0.1166751639]'
      BaseType: 'UserConfigurableInformation'
      Properties:
      [
        Identification: 'AlwaysAvailable'
        ObjectType: 'LibCal_ExplicitTimeInterval'
        PosX: 107
        PosY: 108
        Precondition: 'object.Participation().Event().IsAlwaysAvailableEvent()'
        TooltipText:
        [*
          <b>VALUE( object.Participation().Event().Subject() )</b>
          VALUE( ifexpr( object.Participation().Event().NrOfSubscribers() > 0, "#Subscribers = " + [String]object.Participation().Event().NrOfSubscribers(), "" ) )
          VALUE( ifexpr( object.Comment() <> "", "------", "" ) )
          VALUE( object.Comment() )
        *]
      ]
    }
    Component dhEventCategories
    {
      #keys: '[146730.0.1341791620]'
      BaseType: 'DataHolder'
      Databinding: 'structured[LibCal_EventCategory]*'
      Children:
      [
        Component deEventCategories
        {
          #keys: '[146730.0.1341791693]'
          BaseType: 'GUIDataExtractor'
          Properties:
          [
            Component: 'dhCalendar'
            DataType: 'LibCal_Calendar'
            PosX: 13
            PosY: 13
            Transformation: 'CalendarRegistry.EventCategory'
          ]
        }
      ]
      Properties:
      [
        PosX: 79
        PosY: 52
      ]
    }
  ]
  Properties:
  [
    BackgroundColor: 'Window'
    Border: true
    ContextMenu: 'menuGanttChart'
    GridLineColor: 'White'
    NavigationRangeManager:
    [*
      {
        Name := '1 Day'
        Interval := 2
        Count := 1
        Offset := 0
        Interval := 1
        Count := 2
        Offset := 0
        IntervalStartType := 2
        Item := 0
      }
      {
        Name := '2 Days'
        Interval := 2
        Count := 2
        Offset := 0
        Interval := 1
        Count := 2
        Offset := 0
        IntervalStartType := 2
        Item := 0
      }
      {
        Name := '4 Days'
        Interval := 2
        Count := 4
        Offset := 0
        Interval := 1
        Count := 2
        Offset := 0
        IntervalStartType := 2
        Item := 0
      }
      {
        Name := '1 Week'
        Interval := 3
        Count := 1
        Offset := 0
        Interval := 1
        Count := 2
        Offset := 0
        IntervalStartType := 3
        Item := 0
      }
      {
        Name := '2 Weeks'
        Interval := 3
        Count := 2
        Offset := 0
        Interval := 2
        Count := 1
        Offset := 0
        IntervalStartType := 3
        Item := 0
      }
      {
        Name := '4 Weeks'
        Interval := 3
        Count := 4
        Offset := 0
        Interval := 2
        Count := 1
        Offset := 0
        IntervalStartType := 3
        Item := 0
      }
      {
        Name := '1 Month'
        Interval := 4
        Count := 1
        Offset := 0
        Interval := 2
        Count := 2
        Offset := 0
        IntervalStartType := 4
        Item := 1
      }
      {
        Name := '3 Months'
        Interval := 4
        Count := 3
        Offset := 0
        Interval := 3
        Count := 1
        Offset := 0
        IntervalStartType := 4
        Item := 1
      }
      {
        Name := '6 Months'
        Interval := 4
        Count := 6
        Offset := 0
        Interval := 3
        Count := 1
        Offset := 0
        IntervalStartType := 4
        Item := 1
      }
      {
        Name := '1 Year'
        Interval := 5
        Count := 1
        Offset := 0
        Interval := 3
        Count := 1
        Offset := 0
        IntervalStartType := 6
        Item := 1
      }
      {
        Name := '5 Years'
        Interval := 5
        Count := 5
        Offset := 0
        Interval := 4
        Count := 1
        Offset := 0
        IntervalStartType := 6
        Item := 1
      }
    *]
    RowContextMenu: 'menuGanttChartRows'
    RowLines: true
    ModeledStringList ChildOrdering
    {
      c: menuGanttChart
      c: tbNavigation
      c: menuGanttChartRows
      c: uciEventParticipation
      c: mrkPlanningTime
      c: dhCalendar
      c: uciTimeInterval
      c: deCalendar
      c: mrkStartOfWindow
      c: mrkEndOfWindow
      c: rdEventCategory
      c: vhStartOfWindow
      c: vhEndOfWindow
      c: vhPlanningTime
      c: uciAlwaysAvailable
      c: dhEventCategories
    }
  ]
  ResponseDefinitions:
  [
    DelegatedResponseDefinition OnClick id:Responsedef_LibCal_gcCalendar_Menu_OnClick
    {
      #keys: '[104128.0.145647726]'
      Initiator: 'Menu'
      IsInherited: false
      ResponseType: 'OnClick'
      Arguments:
      [
        ResponseDefinitionArgument selection
        {
          #keys: '[104128.0.145647727]'
          Binding: 'this.Selection()'
        }
        ResponseDefinitionArgument row
        {
          #keys: '[104128.0.145647734]'
          Binding: 'this.ContextMenuRowObject()'
        }
      ]
    }
    DelegatedResponseDefinition OnClick id:Responsedef_LibCal_gcCalendar_GUIButtonBase_OnClick
    {
      #keys: '[104128.0.145647741]'
      Initiator: 'GUIButtonBase'
      IsInherited: false
      ResponseType: 'OnClick'
      Arguments:
      [
        ResponseDefinitionArgument selection
        {
          #keys: '[104128.0.145647742]'
          Binding: 'this.Selection()'
        }
        ResponseDefinitionArgument row
        {
          #keys: '[104128.0.145647749]'
          Binding: 'this.ContextMenuRowObject()'
        }
      ]
    }
  ]
}
