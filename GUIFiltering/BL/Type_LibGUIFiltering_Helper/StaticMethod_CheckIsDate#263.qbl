Quintiq file version 2.0
#parent: #root
StaticMethod CheckIsDate (output String token, output String modifier, output Date date) remote as Boolean
{
  TextBody:
  [*
    // PER Oct-11-2016 (created)
    found := false;
    date  := Date::MinDate();
    
    if ( StringToDate::StandardConverter().CanConvert( token ) )
    {
      found := true;
      date  := StringToDate::StandardConverter().Convert( token );
      token := date.AsQUILL();
    }
    else if ( StringToDate::ISOConverter().CanConvert( token )
          and DateToString::ISOConverter().Convert( StringToDate::ISOConverter().Convert( token ) ) = token )
    {
      found := true;
      date  := StringToDate::ISOConverter().Convert( token );
      token := date.AsQUILL();
    }
    else
    {
      shortmonths := construct( Strings );
      longmonths  := construct( Strings );
    
      for ( x := 1; x <= 12; x++ )
      {
        date := Date::Construct( 2017, x, 1 );
        
        shortmonths.Add( date.FormatUserLocale( 'MM' ).ToLower() );
        longmonths.Add( date.FormatUserLocale( 'MMM' ).ToLower() );
      }
      
      subtokens := construct( Strings );
      if ( token.FindString( '-', 0 ) >= 0 )
      {
        subtokens := token.Tokenize( '-' );
      }
      else if ( token.FindString( '/', 0 ) >= 0 )
      {
        subtokens := token.Tokenize( '/' );
      }
      else
      {
        subtokens.Add( token );
      }
    
      n1      := 0;
      n2      := 0;
      month   := 0;
      isadate := true;
    
      traverse( subtokens, Elements, e, isadate )
      {
        monthidx := maxvalue( shortmonths.Find( e.ToLower() ),
                              longmonths.Find( e.ToLower() ) );
    
        if ( monthidx >= 0 )
        {
          if ( month > 0 )
          {
            isadate := false;
          }
    
          month := monthidx + 1;
        }
        else if ( StringToNumber::StandardConverter().CanConvert( e ) )
        {
          n := StringToNumber::StandardConverter().Convert( e );
    
          if ( n1 = 0 )
          {
            n1 := n;
          }
          else if ( n2 = 0 )
          {
            n2 := n;
          }
          else
          {
            isadate := false;
          }
        }
        else
        {
          isadate := false;
        }
      }
    
      if ( isadate and month > 0 )
      {
        if ( n1 > 0 and n2 > 0 )
        {
          date := guard( guard( Date::Construct( n1, month, n2 ), Date::Construct( n2, month, n1 ) ), Date::MinDate() );
          if ( date.IsFinite() )
          {
            found := true;
            token := date.AsQUILL();
          }
        }
        else if ( n1 > 0 )
        {
          if ( n1 > 1000 )
          {
            found     := true;
            token     := Date::Construct( n1, month, 1 ).AsQUILL();
            modifier  := '.StartOfMonth()';
          }
          else if ( n1 <= 31 )
          {
            found    := true;
            token    := '"' + month.Format('N(LPad0(2))') + n1.Format('N(LPad0(2))') + '"';
            modifier := '.Format("M2D2")';
          }
        }
        else
        {
          found    := true;
          token    := [String]month;
          modifier := '.Month()';
        }
      }
    }
    
    return found;
  *]
}
