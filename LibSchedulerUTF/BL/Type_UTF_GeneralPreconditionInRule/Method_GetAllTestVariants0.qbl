Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Strings ruleName, output Strings ruleType, output Strings ruleSubType, 
  output Booleans isConditionChecked, output Strings conditionCharacteristic, output Booleans isValid) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1: Test with a rule with an empty name.
    variants.Add( 'Test with a rule with an empty name' );
    ruleName.Add( '' );
    ruleType.Add( 'RuleType' );
    ruleSubType.Add( 'RuleSubType' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( 'Characteristic' );
    isValid.Add( false );
    
    // Scenario 2: Test with a rule with no unique name.
    variants.Add( 'Test with a rule with no unique name' );
    ruleName.Add( 'UniqueRuleName' );
    ruleType.Add( 'RuleType' );
    ruleSubType.Add( 'RuleSubType' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( 'Characteristic' );
    isValid.Add( false );
    
    // Scenario 3: Test with a rule with no rule type.
    variants.Add( 'Test with a rule with no rule type' );
    ruleName.Add( 'RuleName' );
    ruleType.Add( '' );
    ruleSubType.Add( 'RuleSubType' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( 'Characteristic' );
    isValid.Add( false );
    
    // Scenario 4: Test with a rule with no rule subtype.
    variants.Add( 'Test with a rule with no rule subtype' );
    ruleName.Add( 'RuleName' );
    ruleType.Add( 'RuleType' );
    ruleSubType.Add( '' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( 'Characteristic' );
    isValid.Add( false );
    
    // Scenario 5: Test with a rule with isCondition checked but without condition.
    variants.Add( 'Test with a rule with isCondition checked but without condition.' );
    ruleName.Add( 'RuleName' );
    ruleType.Add( 'RuleType' );
    ruleSubType.Add( 'RuleSubType' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( '' );
    isValid.Add( false );
    
    // Scenario 6: Test with a rule with all valid data.
    variants.Add( 'Test with a rule with all valid data' );
    ruleName.Add( 'RuleName' );
    ruleType.Add( 'RuleType' );
    ruleSubType.Add( 'RuleSubType' );
    isConditionChecked.Add( true );
    conditionCharacteristic.Add( 'Characteristic' );
    isValid.Add( true );
    
    return &variants;
  *]
}
