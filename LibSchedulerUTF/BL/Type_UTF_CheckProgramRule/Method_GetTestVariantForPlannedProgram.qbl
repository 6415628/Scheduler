Quintiq file version 2.0
#parent: #root
Method GetTestVariantForPlannedProgram (output Boolean isvariantfound, output String ruleScope, output String ruleSubtype, 
  output String characteristic, output Boolean isProgramTypeNoViolated, output Boolean isProgramPhaseHeadNoViolated, 
  output Boolean isProgramPhaseTailNoViolated, output Boolean isTask2NoViolated, output Boolean isTask3NoViolated)
{
  Description: "Retrieves the test variant's values."
  TextBody:
  [*
    ruleScopes := construct( Strings );
    ruleSubtypes := construct( Strings );
    characteristics := construct( Strings );
    isProgramTypeNoViolateds := construct( Booleans );
    isProgramPhaseHeadNoViolateds := construct( Booleans );
    isProgramPhaseTailNoViolateds := construct( Booleans );
    isTask2NoViolateds := construct( Booleans );
    isTask3NoViolateds := construct( Booleans );
    
    variants := this.GetAllTestVariantsForPlannedProgram( ruleScopes,
                                                          ruleSubtypes,
                                                          characteristics,
                                                          isProgramTypeNoViolateds,
                                                          isProgramPhaseHeadNoViolateds,
                                                          isProgramPhaseTailNoViolateds,
                                                          isTask2NoViolateds,
                                                          isTask3NoViolateds );
    
    // Look for data for specified variant
    variantNr := variants.Find( this.Variant() );
    isvariantfound := variantNr >= 0;
    if( isvariantfound )
    {
      ruleScope := ruleScopes.Element( variantNr );
      ruleSubtype := ruleSubtypes.Element( variantNr );
      characteristic := characteristics.Element( variantNr );
      isProgramTypeNoViolated := isProgramTypeNoViolateds.Element( variantNr );
      isProgramPhaseHeadNoViolated := isProgramPhaseHeadNoViolateds.Element( variantNr );
      isProgramPhaseTailNoViolated := isProgramPhaseTailNoViolateds.Element( variantNr );
      isTask2NoViolated := isTask2NoViolateds.Element( variantNr );
      isTask3NoViolated := isTask3NoViolateds.Element( variantNr );
    }
  *]
}
