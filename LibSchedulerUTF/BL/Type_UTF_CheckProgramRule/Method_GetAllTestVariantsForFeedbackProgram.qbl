Quintiq file version 2.0
#parent: #root
Method GetAllTestVariantsForFeedbackProgram (output Strings ruleScopes, output Strings ruleSubtypes, output Strings chracteristics, 
  output Booleans isProgramTypeNoViolateds, output Booleans isProgramPhaseHeadNoViolateds, output Booleans isProgramPhaseTailNoViolateds, 
  output Booleans isfeedbackstarteds, output Booleans isTask2NoViolateds, output Booleans isTask3NoViolateds) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    feedbackstarts := construct( Booleans ); 
    feedbackstarts.Add( true );
    feedbackstarts.Add( false );
    traverse( feedbackstarts, Elements, feedbackstart )
    {
      feedbacktext := ifexpr( feedbackstart, 'start', 'end' );
      
      // Scenario 1: Test not allowed value rule with program rule scope - product type
      variants.Add( 'Test ' + feedbacktext + ' feedback program - not allowed value rule with program rule scope - product type' );
      ruleScopes.Add( RuleConstant::RuleScope_Program() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_NotAllowedJumpValue() );
      chracteristics.Add( RuleConstant::Characteristic_ProductType() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( true );
      
      // Scenario 2: Test not allowed value rule with program phase rule scope - product type
      variants.Add( 'Test ' + feedbacktext + ' feedback program - not allowed value rule with program phase rule scope - product type' );
      ruleScopes.Add( RuleConstant::RuleScope_ProgramPhase() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_NotAllowedJumpValue() );
      chracteristics.Add( RuleConstant::Characteristic_ProductType() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( true );
      
      // Scenario 3: Test allowed different jump rule with program rule scope - operation width
      variants.Add( 'Test ' + feedbacktext + ' feedback program - allowed different jump rule with program rule scope - operation width' );
      ruleScopes.Add( RuleConstant::RuleScope_Program() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
      chracteristics.Add( RuleConstant::Characteristic_OperationWidth() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( true );
      
      // Scenario 4: Test allowed different jump rule with program phase rule scope - operation width
      variants.Add( 'Test ' + feedbacktext + ' feedback program - allowed different jump rule with program phase rule scope - operation width' );
      ruleScopes.Add( RuleConstant::RuleScope_ProgramPhase() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
      chracteristics.Add( RuleConstant::Characteristic_OperationWidth() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( true );
      
      // Scenario 5: Test max combined length rule with program rule scope - 1 nr of task
      variants.Add( 'Test ' + feedbacktext + ' feedback program - max combined length rule with program rule scope - 1 nr of task' );
      ruleScopes.Add( RuleConstant::RuleScope_Program() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_MaxCombinedLength() );
      chracteristics.Add( RuleConstant::Characteristic_NumberOfTasks() );
      isProgramTypeNoViolateds.Add( false );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( false );
      
      // Scenario 6: Test max combined length rule with program phase rule scope - 1 nr of task
      variants.Add( 'Test ' + feedbacktext + ' feedback program - combined length rule with program phase rule scope - 1 nr of task' );
      ruleScopes.Add( RuleConstant::RuleScope_ProgramPhase() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_MaxCombinedLength() );
      chracteristics.Add( RuleConstant::Characteristic_NumberOfTasks() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( false );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( false );
      isTask3NoViolateds.Add( true );
      
      // Scenario 7: Test min combined length rule with program rule scope - 5 nr of task
      variants.Add( 'Test ' + feedbacktext + ' feedback program - min combined length rule with program rule scope - 5 nr of task' );
      ruleScopes.Add( RuleConstant::RuleScope_Program() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_MinCombinedLength() );
      chracteristics.Add( RuleConstant::Characteristic_NumberOfTasks() );
      isProgramTypeNoViolateds.Add( false );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( true );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( true );
      isTask3NoViolateds.Add( true );
      
      // Scenario 8: Test min combined length rule with program phase rule scope - 2 nr of task
      variants.Add( 'Test ' + feedbacktext + ' feedback program - min combined length rule with program phase rule scope - 2 nr of task' );
      ruleScopes.Add( RuleConstant::RuleScope_ProgramPhase() );
      ruleSubtypes.Add( RuleConstant::RuleSubType_MinCombinedLength() );
      chracteristics.Add( RuleConstant::Characteristic_NumberOfTasks() );
      isProgramTypeNoViolateds.Add( true );
      isProgramPhaseHeadNoViolateds.Add( true );
      isProgramPhaseTailNoViolateds.Add( false );
      isfeedbackstarteds.Add( feedbackstart );
      isTask2NoViolateds.Add( true );
      isTask3NoViolateds.Add( true );
    }
    
    return &variants;
  *]
}
