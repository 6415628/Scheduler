Quintiq file version 2.0
#parent: #root
Method TestProgramRule (Schedule schedule)
{
  Description: 'Test program rule'
  TextBody:
  [*
    // Get variant attribute
    isvariantfound := false;
    ruleScope := '';
    ruleSubtype := '';
    characteristic := '';
    isProgramTypeNoViolated := false;
    isProgramPhaseHeadNoViolated := false;
    isProgramPhaseTailNoViolated := false;
    isTask2NoViolated := false;
    isTask3NoViolated := false;
    
    this.GetTestVariantForPlannedProgram( isvariantfound,
                                          ruleScope,
                                          ruleSubtype,
                                          characteristic,
                                          isProgramTypeNoViolated,
                                          isProgramPhaseHeadNoViolated,
                                          isProgramPhaseTailNoViolated,
                                          isTask2NoViolated,
                                          isTask3NoViolated );
    
    isValid := true;
    
    if( isvariantfound )
    {
      programType := select( schedule, ProgramChange.ProgramType, pt, true );
      programPhaseHead := select( schedule, ProgramChange.ProgramType.ProgramPhase, pp, pp.ProgramPhaseConfiguration().ProgramPhaseConfigurationID() = 'HEAD' );
      programPhaseTail := select( schedule, ProgramChange.ProgramType.ProgramPhase, pp, pp.ProgramPhaseConfiguration().ProgramPhaseConfigurationID() = 'TAIL' );
      task2 := select( schedule, Operation_SC.Task_SC, t, t.TaskID() = 'Operation_2' );
      task3 := select( schedule, Operation_SC.Task_SC, t, t.TaskID() = 'Operation_3' );
      
      isValid := ( programType.IsAllHighPriorityCombinedLengthRulesOK() and programType.IsAllLowPriorityCombinedLengthRulesOK() ) = isProgramTypeNoViolated
                 and ( programPhaseHead.IsAllHighPriorityCombinedLengthRulesOK() and programPhaseHead.IsAllLowPriorityCombinedLengthRulesOK() ) = isProgramPhaseHeadNoViolated
                 and ( programPhaseTail.IsAllHighPriorityCombinedLengthRulesOK() and programPhaseTail.IsAllLowPriorityCombinedLengthRulesOK() ) = isProgramPhaseTailNoViolated
                 and ( task2.IsAllHighPriorityRulesOK() and task2.IsAllLowPriorityRulesOK() ) = isTask2NoViolated
                 and ( task3.IsAllHighPriorityRulesOK() and task3.IsAllLowPriorityRulesOK() ) = isTask3NoViolated;
    }                       
    this.Run().AssertTrue( isValid,
                           UTFUtility::GenerateFailedMessage( 'Test program rule failed.', this.Variant() ) );
  *]
}
