Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Strings scopeSelections, output Booleans hasScopes, output Booleans hasConstraintViolations) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    
    // Scenario 1: Test rule scope with resource'
    variants.Add( 'Test rule scope with resource' );
    scopeSelections.Add( RuleConstant::RuleScope_AllTasksOnResource() );
    hasScopes.Add( true );
    hasConstraintViolations.Add( false );
    
    // Scenario 2: Test rule scope without resource
    variants.Add( 'Test rule scope without resource' );
    scopeSelections.Add( RuleConstant::RuleScope_AllTasksOnResource() );
    hasScopes.Add( false );
    hasConstraintViolations.Add( true );
    
    // Scenario 3: Test rule scope with shutdown type
    variants.Add( 'Test rule scope with shutdown type' );
    scopeSelections.Add( RuleConstant::RuleScope_Shutdown() );
    hasScopes.Add( true );
    hasConstraintViolations.Add( false );
    
    // Scenario 4: Test rule scope without shutdown type
    variants.Add( 'Test rule scope without shutdown type' );
    scopeSelections.Add( RuleConstant::RuleScope_Shutdown() );
    hasScopes.Add( false );
    hasConstraintViolations.Add( true );
    
    // Scenario 5: Test rule scope with program
    variants.Add( 'Test rule scope with program' );
    scopeSelections.Add( RuleConstant::RuleScope_Program() );
    hasScopes.Add( true );
    hasConstraintViolations.Add( false );
    
    // Scenario 6: Test rule scope without program
    variants.Add( 'Test rule scope without program' );
    scopeSelections.Add( RuleConstant::RuleScope_Program() );
    hasScopes.Add( false );
    hasConstraintViolations.Add( true );
    
    // Scenario 7: Test rule scope with program phase
    variants.Add( 'Test rule scope with program phase' );
    scopeSelections.Add( RuleConstant::RuleScope_ProgramPhase() );
    hasScopes.Add( true );
    hasConstraintViolations.Add( false );
    
    // Scenario 8: Test rule scope without program phase
    variants.Add( 'Test rule scope without program phase' );
    scopeSelections.Add( RuleConstant::RuleScope_ProgramPhase() );
    hasScopes.Add( false );
    hasConstraintViolations.Add( true );
    return &variants;
  *]
}
