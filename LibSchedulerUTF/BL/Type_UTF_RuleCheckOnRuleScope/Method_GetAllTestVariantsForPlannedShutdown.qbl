Quintiq file version 2.0
#parent: #root
Method GetAllTestVariantsForPlannedShutdown (output Booleans isBeforeShutdowns, output Strings measures, output Reals thresholds, 
  output Booleans isTask1Valids, output Booleans isTask2Valids, output Booleans isTask3Valids, 
  output Booleans isTask4Valids) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic for planned shutdown'
  TextBody:
  [*
    variants := construct( Strings );
    
    // All check is based on operation width
    // Test with rule scope that affects the "MEASURE" of "THRESHOLD" "BEFORE/AFTER" shutdown
    
    // Scenario 1.1: Test with rule scope that affects the NUMBER of TASKS of 1 BEFORE shutdown.
    variants.Add( 'Test with rule scope that affects the NUMBER of TASKS of 1 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_NumberOfTasks() );
    thresholds.Add( 1.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 1.2: Test with rule scope that affects the NUMBER of TASKS of 2 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the NUMBER of TASKS of 2 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_NumberOfTasks() );
    thresholds.Add( 2.0 );
    isTask1Valids.Add( false );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 1.3: Test with rule scope that affects the NUMBER of TASKS of 1 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the NUMBER of TASKS of 1 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_NumberOfTasks() );
    thresholds.Add( 1.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( true );
    
    // Scenario 1.4: Test with rule scope that affects the NUMBER of TASKS of 2 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the NUMBER of TASKS of 2 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_NumberOfTasks() );
    thresholds.Add( 2.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( false );
    
    // Scenario 2.1: Test with rule scope that affects the OPERATION LENGTH of 10 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the OPERATION LENGTH of 10 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_OperationLength() );
    thresholds.Add( 10.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 2.2: Test with rule scope that affects the OPERATION LENGTH of 20 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the OPERATION LENGTH of 20 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_OperationLength() );
    thresholds.Add( 20.0 );
    isTask1Valids.Add( false );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 2.3: Test with rule scope that affects the OPERATION LENGTH of 10 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the OPERATION LENGTH of 10 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_OperationLength() );
    thresholds.Add( 10.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( true );
    
    // Scenario 2.4: Test with rule scope that affects the OPERATION LENGTH of 20 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the OPERATION LENGTH of 20 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_OperationLength() );
    thresholds.Add( 20.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( false );
    
    // Scenario 3.1: Test with rule scope that affects the PlAN UNIT QUANTITY of 10 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the PLAN UNIT QUANTITY of 10 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    thresholds.Add( 10.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 3.2: Test with rule scope that affects the PLAN UNIT QUANTITY of 20 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the PLAN UNIT QUANTITY of 20 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    thresholds.Add( 20.0 );
    isTask1Valids.Add( false );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 3.3: Test with rule scope that affects the PLAN UNIT QUANTITY of 10 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the PLAN UNIT QUANTITY of 10 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    thresholds.Add( 10.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( true );
    
    // Scenario 3.4: Test with rule scope that affects the PLAN UNIT QUANTITY of 20 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the PLAN UNIT QUANTITY of 20 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    thresholds.Add( 20.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( false );
    
    // Scenario 4.1: Test with rule scope that affects the DURATION IN HOUR of 1 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the DURATION IN HOUR of 1 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_DurationInHours() );
    thresholds.Add( 1.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 4.2: Test with rule scope that affects the DURATION IN HOUR of 2 BEFORE shutdown
    variants.Add( 'Test with rule scope that affects the DURATION IN HOUR of 2 BEFORE shutdown' );
    isBeforeShutdowns.Add( true );
    measures.Add( RuleConstant::Characteristic_DurationInHours() );
    thresholds.Add( 2.0 );
    isTask1Valids.Add( false );
    isTask2Valids.Add( false );
    isTask3Valids.Add( true );
    isTask4Valids.Add( true );
    
    // Scenario 4.3: Test with rule scope that affects the DURATION IN HOUR of 1 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the DURATION IN HOUR of 1 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_DurationInHours() );
    thresholds.Add( 1.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( true );
    
    // Scenario 4.4: Test with rule scope that affects the DURATION IN HOUR of 2 AFTER shutdown
    variants.Add( 'Test with rule scope that affects the DURATION IN HOUR of 2 AFTER shutdown' );
    isBeforeShutdowns.Add( false );
    measures.Add( RuleConstant::Characteristic_DurationInHours() );
    thresholds.Add( 2.0 );
    isTask1Valids.Add( true );
    isTask2Valids.Add( true );
    isTask3Valids.Add( false );
    isTask4Valids.Add( false );
    
    return &variants;
  *]
}
