Quintiq file version 2.0
#parent: #root
Method TestCleanUpFeedbackTaskRuleCheckOnRuleScope_Setup (Schedule schedule)
{
  Description: 'Test clean up feedback task rule scope in rule - setup'
  TextBody:
  [*
    // Get variant attribute
    isvariantfound := false;
    measure := ''
    threshold := 0.0;
    isfeedbackstarted := false;
    isTask2Valid := false;
    
    this.GetTestVariantForFeedbackShutdown( isvariantfound,
                                            measure,
                                            threshold,
                                            isfeedbackstarted,
                                            isTask2Valid );
    
    // Only setup when variant found
    if( isvariantfound )
    {
      schedule.IntegrationConfiguration().ShopFloorHistory( Duration::Zero() );
      
      // Create feedback shutdown data
      this.CreateFeedbackShutdownData( schedule, threshold, measure );
      
      // Transaction propagate needed for newly created operations/tasks before create feedbacks
      Transaction::Transaction().Propagate()
      
      // Create feedback for operations
      this.CreateFeedbackForOperations( schedule, false );
    
      // Transaction propagate for attributes CanBeDeleted and Cumulative attributes
      Transaction::Transaction().Propagate( attribute( FeedbackTask, CanBeDeleted ) );
      Transaction::Transaction().Propagate( attribute( FeedbackTaskInSchedule, AfterShutdownCumulativeCharacteristic ) );
      Transaction::Transaction().Propagate( attribute( FeedbackTaskInSchedule, AfterShutdownCumulativeRealValues ) );
    
      // Clean up feedback for shopfloor history
      schedule.FeedbackManager().CleanUpFeedbackTaskAndBatchesInSchedule();
    }
    // Gantt chart
    // | Feedback Shutdown Task | Feedback Task0 ( CleanUp ) | Feedback Task1 ( Remains ) | Task2 |
  *]
}
