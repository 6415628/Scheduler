Quintiq file version 2.0
#parent: #root
Method GetAllTestVariantsForCanOptimizeFromOptimizerDashboard (output Booleans resource1hasconfigurablerules, output Booleans resource2hasconfigurablerules, output Booleans issequencingoptimizerenableds, 
  output Booleans isprogramoptimizerenableds, output Strings selectedoptimizers, output Booleans isalloweds) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic for constraint checking.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1.1: Test mixed resources with/without configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )
    variants.Add( 'Test mixed resources with/without configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( true );
    isprogramoptimizerenableds.Add( false );
    selectedoptimizers.Add( Constants::OptimizerSequencing() );
    isalloweds.Add( false )
    
    // Scenario 1.2: Test mixed resources with/without configurable rules with selected optimizer "Sequencing" is disabled ( CanOptimizeFromOptimizerDashboard = FALSE )
    variants.Add( 'Test mixed resources with/without configurable rules with selected optimizer "Sequencing" is disabled ( CanOptimizeFromOptimizerDashboard = FALSE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( false );
    isprogramoptimizerenableds.Add( false );
    selectedoptimizers.Add( Constants::OptimizerSequencing() );
    isalloweds.Add( false )
    
    // Scenario 1.3: Test mixed resources with/without configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )
    variants.Add( 'Test mixed resources with/without configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( false );
    isprogramoptimizerenableds.Add( true );
    selectedoptimizers.Add( Constants::OptimizerPrograms() );
    isalloweds.Add( true )
    
    // Scenario 1.4: Test mixed resources with/without configurable rules with selected optimizer "Program" is disabled ( CanOptimizeFromOptimizerDashboard = FALSE )
    variants.Add( 'Test mixed resources with/without configurable rules with selected optimizer "Program" is disabled ( CanOptimizeFromOptimizerDashboard = FALSE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( false );
    isprogramoptimizerenableds.Add( false );
    selectedoptimizers.Add( Constants::OptimizerSequencing() );
    isalloweds.Add( false )
    
    // Scenario 1.5: Test all resources without configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )
    variants.Add( 'Test all resources without configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )' );
    resource1hasconfigurablerules.Add( false );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( true );
    isprogramoptimizerenableds.Add( false );
    selectedoptimizers.Add( Constants::OptimizerSequencing() );
    isalloweds.Add( true )
    
    // Scenario 1.6: Test all resources with configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )
    variants.Add( 'Test all resources with configurable rules with selected optimizer "Sequencing" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( true );
    issequencingoptimizerenableds.Add( true );
    isprogramoptimizerenableds.Add( false );
    selectedoptimizers.Add( Constants::OptimizerSequencing() );
    isalloweds.Add( false )
    
    // Scenario 1.7: Test all resources with configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )
    variants.Add( 'Test all resources with configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = TRUE )' );
    resource1hasconfigurablerules.Add( true );
    resource2hasconfigurablerules.Add( true );
    issequencingoptimizerenableds.Add( false );
    isprogramoptimizerenableds.Add( true );
    selectedoptimizers.Add( Constants::OptimizerPrograms() );
    isalloweds.Add( true )
    
    // Scenario 1.8: Test all resources without configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )
    variants.Add( 'Test all resources without configurable rules with selected optimizer "Program" is enabled ( CanOptimizeFromOptimizerDashboard = FALSE )' );
    resource1hasconfigurablerules.Add( false );
    resource2hasconfigurablerules.Add( false );
    issequencingoptimizerenableds.Add( false );
    isprogramoptimizerenableds.Add( true );
    selectedoptimizers.Add( Constants::OptimizerPrograms() );
    isalloweds.Add( false )
    
    return &variants;
  *]
}
