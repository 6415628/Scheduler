Quintiq file version 2.0
#parent: #root
Method GetBaseVariants (output Strings characteristicTypes, output Booleans isAllowedValues, output Strings ruleValueStrings, 
  output Strings operationAttributeValues, output Booleans hasConstraintViolations) as owning Strings
{
  Description: 'Return base specific variants.'
  TextBody:
  [*
    variants := construct( Strings );
    
    /*
      1. Product type
      2. Practice
    */
    
    // Scenario 1.1: Test rule subtype allowed value check - matching product type
    variants.Add( 'Test rule subtype allowed value check - matching product type' );
    characteristicTypes.Add( RuleConstant::Characteristic_ProductType() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( false );
    
    // Scenario 1.2: Test rule subtype allowed value check - unmatching product type
    variants.Add( 'Test rule subtype allowed value check - unmatching product type' );
    characteristicTypes.Add( RuleConstant::Characteristic_ProductType() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( true );
    
    // Scenario 1.3: Test rule subtype not allowed value check - matching product type
    variants.Add( 'Test rule subtype not allowed value check - matching product type' );
    characteristicTypes.Add( RuleConstant::Characteristic_ProductType() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( true );
    
    // Scenario 1.4: Test rule subtype not allowed value check - unmatching product type
    variants.Add( 'Test rule subtype not allowed value check - unmatching product type' );
    characteristicTypes.Add( RuleConstant::Characteristic_ProductType() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( false );
    
    // Scenario 2.1: Test rule subtype allowed value check - matching practice
    variants.Add( 'Test rule subtype allowed value check - matching practice' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationPractice() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( false );
    
    // Scenario 2.2: Test rule subtype allowed value check - unmatching practice
    variants.Add( 'Test rule subtype allowed value check - unmatching practice' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationPractice() );
    isAllowedValues.Add( true );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( true );
    
    // Scenario 2.3: Test rule subtype not allowed value check - matching practice
    variants.Add( 'Test rule subtype not allowed value check - matching practice' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationPractice() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'A' );
    hasConstraintViolations.Add( true );
    
    // Scenario 2.4: Test rule subtype not allowed value check - unmatching practice
    variants.Add( 'Test rule subtype not allowed value check - unmatching practice' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationPractice() );
    isAllowedValues.Add( false );
    ruleValueStrings.Add( 'A' );
    operationAttributeValues.Add( 'B' );
    hasConstraintViolations.Add( false );
    
    return &variants;
  *]
}
