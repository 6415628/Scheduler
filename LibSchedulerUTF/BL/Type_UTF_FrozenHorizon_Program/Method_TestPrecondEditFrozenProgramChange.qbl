Quintiq file version 2.0
#parent: #root
Method TestPrecondEditFrozenProgramChange (Schedule schedule)
{
  Description: 'Test edit frozen program change precondition checking'
  TextBody:
  [*
    // Get variant attribute
    isvariantfound := false;
    isfreezeschedulebyprogram := false;
    isprogram1alltasksfreeze := false;
    isprogram2alltasksfreeze := false;
    
    this.GetTestVariantForForFreezeScheduleByProgram(  isvariantfound,
                                                       isfreezeschedulebyprogram,
                                                       isprogram1alltasksfreeze,
                                                       isprogram2alltasksfreeze );
    
    value := true;
    
    // Only do checking when variant found
    if( isvariantfound )
    {
      programchange1 := minselect( schedule, ResourceGroup_SC.Resource_SC.ProgramChange, pc, pc.TaskSequenceNr() );
      programchange2 := maxselect( schedule, ResourceGroup_SC.Resource_SC.ProgramChange, pc, pc.TaskSequenceNr() );
      programtypeconfigs := selectset( programchange1, ProgramChangeInType.ToProgramTypeConfiguration, pt, true );
      
      value := not ProgramChange::CheckIsValid( programtypeconfigs, programchange1, false ) // Do not allow edit frozen program change
               and ProgramChange::CheckIsValid( programtypeconfigs, programchange2, false ); // Allow edit frozen program change      
    }      
    
    this.Run().AssertTrue( value,
                           UTFUtility::GenerateFailedMessage( 'Test precondition edit frozen program change failed.', 
                           this.Variant() ) );
    
    // Gantt chart
    // Program set        |----------------- Program 1 ----------------------|                    |-----Program 2----|
    // ProgramChangeTask1 (Frozen) | Task1(Frozen) --- Task3(Frozen)- Task 7 | ProgramChangeTask2 | Task 8 - Task 15 |
  *]
}
