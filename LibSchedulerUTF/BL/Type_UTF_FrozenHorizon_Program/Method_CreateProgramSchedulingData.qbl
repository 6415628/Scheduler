Quintiq file version 2.0
#parent: #root
Method CreateProgramSchedulingData (Schedule schedule, Number planoperationseqnrfrom) as ProgramDefinitionConfiguration
{
  Description: 'Create program scheduling test data'
  TextBody:
  [*
    // Create resource
    resource := UTFMockObjectFactory::CreateSingleResource( schedule, 'resource' );
    
    // Assign ASAP lead time strategy
    LeadTimeStrategy_SC::Create( resource, Duration::Zero(), Constants::StrategyASAP() );
    Transaction::Transaction().Propagate( attribute( Resource_SC, StrategyName ) );
    
    // Create program definition
    programdefinition := UTFMockObjectFactory::CreateProgramDefinitionData( schedule, 'Program definition id', false );
    
    // Assign program definition to both resource 1 
    resource.AssignProgramDefinitionConfiguration( programdefinition );
    
    // Insert program change 
    programtype := selectset( programdefinition, ProgramSetConfiguration.ProgramTypeConfiguration, pt, true );
    resource.InsertProgramChange( null( Task_SC ), programtype, false, Duration::Zero() );
    
    taskstart := schedule.Time();
    // Create 15 tasks
    for( i := 1; i <= 15; i++ )
    {
      // Create operation
      order := UTFMockObjectFactory::CreateOrder( schedule, 'Order_'+ [String]i );
      planUnit := UTFMockObjectFactory::CreatePlanUnit( order, 'Plan Unit_'+ [String]i, 1.0 );
      operation := UTFMockObjectFactory::CreateOperation( planUnit );
      operation.OperationID( 'Operation_' + [String]i );
      operation.SequenceNr( i );
      operation.Practice( 'SH' );
      operation.Width( 1.0 );
      operation.Length( 1.0 );
      
      // Plan operation based on planoperationseqnrfrom
      if( i >= planoperationseqnrfrom )
      {
        task := resource.PlanLast( operation ).astype( UTFSingleTask );
        task.HasStartUTF( true );
        task.Start_UTF( taskstart );
        task.HasEndUTF( true );
        task.End_UTF( taskstart + Duration::Hours( 1 ) );
        taskstart := taskstart + Duration::Hours( 1 );
        
        // Freeze task 3
        if( i = 3 )
        {
          task.FreezeByUser();  
        }
        
        // Insert program change at Task 8
        if( i = 8 )
        {
          resource.InsertProgramChange( task, programtype, false, Duration::Zero() ); 
        }
      }
    }
    
    return programdefinition;
    
    // Gantt chart
    // Program set        |----------------- Program 1 ----------------------|                    |-----Program 2----|
    // ProgramChangeTask1 (Frozen) | Task1(Frozen) --- Task3(Frozen)- Task 7 | ProgramChangeTask2 | Task 8 - Task 15 |
  *]
}
