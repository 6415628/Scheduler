Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Reals width1s, output Reals width2s, output Strings name, 
  output Booleans isMultipleRangesEnableds, output Reals ruleRangeFroms, output Reals ruleRangeTos, 
  output Reals ruleValues, output Booleans isValids) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1.1: Test rule subtype maximum absolute difference upwards with multiple ranges disabled with no violation
    variants.Add( '1.1 Test rule subtype maximum absolute difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 1.2: Test rule subtype maximum absolute difference upwards with multiple ranges disabled with violation
    variants.Add( '1.2 Test rule subtype maximum absolute difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 1.3: Test rule subtype maximum absolute difference upwards with multiple ranges enabled with no violation
    variants.Add( '1.3 Test rule subtype maximum absolute difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 1.4: Test rule subtype maximum absolute difference upwards with multiple ranges enabled with violation
    variants.Add( '1.4 Test rule subtype maximum absolute difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 2.1: Test rule subtype maximum percentage difference upwards with multiple ranges disabled with no violation
    variants.Add( '2.1 Test rule subtype maximum percentage difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 2.2: Test rule subtype maximum percentage difference upwards with multiple ranges disabled with violation
    variants.Add( '2.2 Test rule subtype maximum percentage difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 2.3: Test rule subtype maximum percentage difference upwards with multiple ranges enabled with no violation
    variants.Add( '2.3 Test rule subtype maximum percentage difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 2.4: Test rule subtype maximum percentage difference upwards with multiple ranges enabled with violation
    variants.Add( '2.4 Test rule subtype maximum percentage difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 3.1: Test rule subtype Maximum absolute difference downwards with multiple ranges disabled with no violation.
    variants.Add( '3.1 Test rule subtype Maximum absolute difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 3.2: Test rule subtype Maximum absolute difference downwards with multiple ranges disabled with violation.
    variants.Add( '3.2 Test rule subtype Maximum absolute difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 3.3: Test rule subtype Maximum absolute difference downwards with multiple ranges enabled with no violation.
    variants.Add( '3.3 Test rule subtype Maximum absolute difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 3.4: Test rule subtype Maximum absolute difference downwards with multiple ranges enabled with violation.
    variants.Add( '3.4 Test rule subtype Maximum absolute difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 4.1: Test rule subtype Maximum percentage difference downwards with multiple ranges disabled with no violation.
    variants.Add( '4.1 Test rule subtype Maximum percentage difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 4.2: Test rule subtype Maximum percentage difference downwards with multiple ranges disabled with violation.
    variants.Add( '4.2 Test rule subtype Maximum percentage difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 49.0 );
    isValids.Add( false );
    
    // Scenario 4.3: Test rule subtype Maximum percentage difference downwards with multiple ranges enabled with no violation.
    variants.Add( '4.3 Test rule subtype Maximum percentage difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 4.4: Test rule subtype Maximum percentage difference downwards with multiple ranges enabled with violation.
    variants.Add( '4.4 Test rule subtype Maximum percentage difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 49.0 );
    isValids.Add( false );
    
    // Scenario 5.1: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '5.1 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 5.2: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '5.2 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 5.3: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '5.3 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 5.4: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '5.4 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 5.5: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '5.5 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 5.6: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '5.6 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 5.7: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '5.7 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 5.8: Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '5.8 Test rule subtype Maximum absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 6.1: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '6.1 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 6.2: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '6.2 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 6.3: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '6.3 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 6.4: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '6.4 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 49.0 );
    isValids.Add( false );
    
    // Scenario 6.5: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '6.5 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 6.6: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '6.6 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 6.7: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '6.7 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 6.8: Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '6.8 Test rule subtype Maximum percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MaxPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 49.0 );
    isValids.Add( false );
    
    // Scenario 7.1: Test rule subtype Minimum absolute difference upwards with multiple ranges disabled with no violation.
    variants.Add( '7.1 Test rule subtype Minimum absolute difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 7.2: Test rule subtype Minimum absolute difference upwards with multiple ranges disabled with violation.
    variants.Add( '7.2 Test rule subtype Minimum absolute difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 7.3: Test rule subtype Minimum absolute difference upwards with multiple ranges enabled with no violation.
    variants.Add( '7.3 Test rule subtype Minimum absolute difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 7.4: Test rule subtype Minimum absolute difference upwards with multiple ranges enabled with violation.
    variants.Add( '7.4 Test rule subtype Minimum absolute difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 8.1: Test rule subtype Minimum percentage difference upwards with multiple ranges disabled with no violation.
    variants.Add( '8.1 Test rule subtype Minimum percentage difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 8.2: Test rule subtype Minimum percentage difference upwards with multiple ranges disabled with violation.
    variants.Add( '8.2 Test rule subtype Minimum percentage difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 8.3: Test rule subtype Minimum percentage difference upwards with multiple ranges enabled with no violation.
    variants.Add( '8.3 Test rule subtype Minimum percentage difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 8.4: Test rule subtype Minimum percentage difference upwards with multiple ranges enabled with violation.
    variants.Add( '8.4 Test rule subtype Minimum percentage difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 9.1: Test rule subtype Minimum absolute difference downwards with multiple ranges disabled with no violation.
    variants.Add( '9.1 Test rule subtype Minimum absolute difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 9.2: Test rule subtype Minimum absolute difference downwards with multiple ranges disabled with violation.
    variants.Add( '9.2 Test rule subtype Minimum absolute difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 9.3: Test rule subtype Minimum absolute difference downwards with multiple ranges enabled with no violation.
    variants.Add( '9.3 Test rule subtype Minimum absolute difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 9.4: Test rule subtype Minimum absolute difference downwards with multiple ranges enabled with violation.
    variants.Add( '9.4 Test rule subtype Minimum absolute difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 10.1: Test rule subtype Minimum percentage difference downwards with multiple ranges disabled with no violation.
    variants.Add( '10.1 Test rule subtype Minimum percentage difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 10.2: Test rule subtype Minimum percentage difference downwards with multiple ranges disabled with violation.
    variants.Add( '10.2 Test rule subtype Minimum percentage difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 10.3: Test rule subtype Minimum percentage difference downwards with multiple ranges enabled with no violation.
    variants.Add( '10.3 Test rule subtype Minimum percentage difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 10.4: Test rule subtype Minimum percentage difference downwards with multiple ranges enabled with violation.
    variants.Add( '10.4 Test rule subtype Minimum percentage difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 11.1: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '11.1 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 11.2: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '11.2 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 11.3: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '11.3 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 11.4: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '11.4 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 11.5: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '11.5 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 11.6: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '11.6 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 11.7: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '11.7 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 11.8: Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '11.8 Test rule subtype Minimum absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 12.1: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '12.1 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 12.2: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '12.2 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 12.3: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '12.3 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 12.4: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '12.4 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 12.5: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '12.5 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 12.6: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '12.6 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 12.7: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '12.7 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 12.8: Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '12.8 Test rule subtype Minimum percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_MinPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 13.1: Test rule subtype Allowed absolute difference upwards with multiple ranges disabled with no violation.
    variants.Add( '13.1 Test rule subtype Allowed absolute difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 13.2: Test rule subtype Allowed absolute difference upwards with multiple ranges disabled with violation.
    variants.Add( '13.2 Test rule subtype Allowed absolute difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 13.3: Test rule subtype Allowed absolute difference upwards with multiple ranges enabled with no violation.
    variants.Add( '13.3 Test rule subtype Allowed absolute difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 13.4: Test rule subtype Allowed absolute difference upwards with multiple ranges enabled with violation.
    variants.Add( '13.4 Test rule subtype Allowed absolute difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 14.1: Test rule subtype Allowed percentage difference upwards with multiple ranges disabled with no violation.
    variants.Add( '14.1 Test rule subtype Allowed percentage difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 14.2: Test rule subtype Allowed percentage difference upwards with multiple ranges disabled with violation.
    variants.Add( '14.2 Test rule subtype Allowed percentage difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 14.3: Test rule subtype Allowed percentage difference upwards with multiple ranges enabled with no violation.
    variants.Add( '14.3 Test rule subtype Allowed percentage difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 14.4: Test rule subtype Allowed percentage difference upwards with multiple ranges enabled with violation.
    variants.Add( '14.4 Test rule subtype Allowed percentage difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 15.1: Test rule subtype Allowed absolute difference downwards with multiple ranges disabled with no violation.
    variants.Add( '15.1 Test rule subtype Allowed absolute difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 15.2: Test rule subtype Allowed absolute difference downwards with multiple ranges disabled with violation.
    variants.Add( '15.2 Test rule subtype Allowed absolute difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 15.3: Test rule subtype Allowed absolute difference downwards with multiple ranges enabled with no violation.
    variants.Add( '15.3 Test rule subtype Allowed absolute difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 15.4: Test rule subtype Allowed absolute difference downwards with multiple ranges enabled with violation.
    variants.Add( '15.4 Test rule subtype Allowed absolute difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 16.1: Test rule subtype Allowed percentage difference downwards with multiple ranges disabled with no violation.
    variants.Add( '16.1 Test rule subtype Allowed percentage difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 16.2: Test rule subtype Allowed percentage difference downwards with multiple ranges disabled with violation.
    variants.Add( '16.2 Test rule subtype Allowed percentage difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 16.3: Test rule subtype Allowed percentage difference downwards with multiple ranges enabled with no violation.
    variants.Add( '16.3 Test rule subtype Allowed percentage difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 16.4: Test rule subtype Allowed percentage difference downwards with multiple ranges enabled with violation.
    variants.Add( '16.4 Test rule subtype Allowed percentage difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 17.1: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '17.1 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 17.2: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '17.2 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 17.3: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '17.3 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 17.4: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '17.4 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 17.5: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '17.5 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 17.6: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '17.6 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 17.7: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '17.7 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( false );
    
    // Scenario 17.8: Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '17.8 Test rule subtype Allowed absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 18.1: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '18.1 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 18.2: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '18.2 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 18.3: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '18.3 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 18.4: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '18.4 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 18.5: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '18.5 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( true );
    
    // Scenario 18.6: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '18.6 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( true );
    
    // Scenario 18.7: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '18.7 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( false );
    
    // Scenario 18.8: Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '18.8 Test rule subtype Allowed percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_AllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( false );
    
    // Scenario 19.1: Test rule subtype Not allowed absolute difference upwards with multiple ranges disabled with no violation.
    variants.Add( '19.1 Test rule subtype Not allowed absolute difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 19.2: Test rule subtype Not allowed absolute difference upwards with multiple ranges disabled with violation.
    variants.Add( '19.2 Test rule subtype Not allowed absolute difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 19.3: Test rule subtype Not allowed absolute difference upwards with multiple ranges enabled with no violation.
    variants.Add( '19.3 Test rule subtype Not allowed absolute difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 19.4: Test rule subtype Not allowed absolute difference upwards with multiple ranges enabled with violation.
    variants.Add( '19.4 Test rule subtype Not allowed absolute difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 20.1: Test rule subtype Not allowed percentage difference upwards with multiple ranges disabled with no violation.
    variants.Add( '20.1 Test rule subtype Not allowed percentage difference upwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 20.2: Test rule subtype Not allowed percentage difference upwards with multiple ranges disabled with violation.
    variants.Add( '20.2 Test rule subtype Not allowed percentage difference upwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 20.3: Test rule subtype Not allowed percentage difference upwards with multiple ranges enabled with no violation.
    variants.Add( '20.3 Test rule subtype Not allowed percentage difference upwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 20.4: Test rule subtype Not allowed percentage difference upwards with multiple ranges enabled with violation.
    variants.Add( '20.4 Test rule subtype Not allowed percentage difference upwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 21.1: Test rule subtype Not allowed absolute difference downwards with multiple ranges disabled with no violation.
    variants.Add( '21.1 Test rule subtype Not allowed absolute difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 21.2: Test rule subtype Not allowed absolute difference downwards with multiple ranges disabled with violation.
    variants.Add( '21.2 Test rule subtype Not allowed absolute difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 21.3: Test rule subtype Not allowed absolute difference downwards with multiple ranges enabled with no violation.
    variants.Add( '21.3 Test rule subtype Not allowed absolute difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 21.4: Test rule subtype Not allowed absolute difference downwards with multiple ranges enabled with violation.
    variants.Add( '21.4 Test rule subtype Not allowed absolute difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 22.1: Test rule subtype Not allowed percentage difference downwards with multiple ranges disabled with no violation.
    variants.Add( '22.1 Test rule subtype Not allowed percentage difference downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( true );
    
    // Scenario 22.2: Test rule subtype Not allowed percentage difference downwards with multiple ranges disabled with violation.
    variants.Add( '22.2 Test rule subtype Not allowed percentage difference downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( false );
    
    // Scenario 22.3: Test rule subtype Not allowed percentage difference downwards with multiple ranges enabled with no violation.
    variants.Add( '22.3 Test rule subtype Not allowed percentage difference downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 51.0 );
    isValids.Add( true );
    
    // Scenario 22.4: Test rule subtype Not allowed percentage difference downwards with multiple ranges enabled with violation.
    variants.Add( '22.4 Test rule subtype Not allowed percentage difference downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( false );
    
    // Scenario 23.1: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '23.1 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 23.2: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '23.2 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( true );
    
    // Scenario 23.3: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '23.3 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 23.4: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '23.4 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 23.5: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '23.5 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 23.6: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '23.6 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( true );
    
    // Scenario 23.7: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '23.7 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 23.8: Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '23.8 Test rule subtype Not allowed absolute difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedAbsoluteDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 24.1: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '24.1 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 24.2: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with no violation.
    variants.Add( '24.2 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( true );
    
    // Scenario 24.3: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '24.3 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 24.4: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with violation.
    variants.Add( '24.4 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges disabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( false );
    ruleRangeFroms.Add( 0.0 );
    ruleRangeTos.Add( 0.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( false );
    
    // Scenario 24.5: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '24.5 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 99.0 );
    isValids.Add( true );
    
    // Scenario 24.6: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with no violation.
    variants.Add( '24.6 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with no violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 101.0 );
    isValids.Add( true );
    
    // Scenario 24.7: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '24.7 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 100.0 );
    width2s.Add( 200.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 100.0 );
    isValids.Add( false );
    
    // Scenario 24.8: Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with violation.
    variants.Add( '24.8 Test rule subtype Not allowed percentage difference upwards and downwards with multiple ranges enabled with violation' );
    width1s.Add( 200.0 );
    width2s.Add( 100.0 );
    name.Add( RuleConstant::RuleSubType_NotAllowedPercentageDifferenceUpwardsDownwards() );
    isMultipleRangesEnableds.Add( true );
    ruleRangeFroms.Add( 100.0 );
    ruleRangeTos.Add( 201.0 );
    ruleValues.Add( 50.0 );
    isValids.Add( false );
    
    return &variants;
  *]
}
