Quintiq file version 2.0
#parent: #root
Method GetTestVariantForPreconditionChecking (output Boolean isvariantfound, output String resourceType, output String leadTimeStrategy, 
  output Boolean hasShutdownTypeInResource, output Boolean isValidForPreconInsert, output Boolean hasShutdown, 
  output Boolean hasFeedback, output Boolean isValidForPreconDelete, output Boolean hasShutdownType, 
  output Duration duration, output Boolean isValidForPreconCreateEdit)
{
  Description: "Retrieves the test variant's values for precondition checking."
  TextBody:
  [*
    resourceTypes := construct( Strings );
    leadTimeStrategies := construct( Strings );
    hasShutdownTypeInResources := construct( Booleans );
    isValidForPreconInserts := construct( Booleans );
    hasShutdowns := construct( Booleans );
    hasFeedbacks := construct( Booleans );
    isValidForPreconDeletes := construct( Booleans );
    hasShutdownTypes := construct( Booleans );
    durations := construct( Durations);
    isValidForPreconCreateEdits := construct( Booleans );
    
    variants :=  this.GetAllTestVariantsForPreconditionChecking( resourceTypes,
                                                                 leadTimeStrategies,                              
                                                                 hasShutdownTypeInResources,
                                                                 isValidForPreconInserts,
                                                                 hasShutdowns,
                                                                 hasFeedbacks,
                                                                 isValidForPreconDeletes,
                                                                 hasShutdownTypes,
                                                                 durations,
                                                                 isValidForPreconCreateEdits );
    
    // Look for data for specified variant
    variantNr := variants.Find( this.Variant() );
    isvariantfound := variantNr >= 0;
    
    if( isvariantfound )
    {
      resourceType := resourceTypes.Element( variantNr );
      leadTimeStrategy := leadTimeStrategies.Element( variantNr );
      hasShutdownTypeInResource := hasShutdownTypeInResources.Element( variantNr );
      isValidForPreconInsert := isValidForPreconInserts.Element( variantNr );
      hasShutdown := hasShutdowns.Element( variantNr );
      hasFeedback := hasFeedbacks.Element( variantNr );
      isValidForPreconDelete := isValidForPreconDeletes.Element( variantNr );
      hasShutdownType := hasShutdownTypes.Element( variantNr );
      duration := durations.Element( variantNr );
      isValidForPreconCreateEdit := isValidForPreconCreateEdits.Element( variantNr );
    }
  *]
}
