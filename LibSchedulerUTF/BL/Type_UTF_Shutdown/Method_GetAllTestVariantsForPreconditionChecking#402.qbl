Quintiq file version 2.0
#parent: #root
Method GetAllTestVariantsForPreconditionChecking (output Strings resourceTypes, output Strings leadTimeStrategies, output Booleans hasShutdownTypeInResources, 
  output Booleans isValidForPreconInserts, output Booleans hasShutdowns, output Booleans hasFeedbacks, 
  output Booleans isValidForPreconDelete, output Booleans hasShutdownTypes, output Durations durations, 
  output Booleans isValidForPreconCreateEdit) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic for precondition checking.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1.1: Test precondition to insert a shutdown to a Batch resource.
    variants.Add( 'Test precondition to insert a shutdown to a Batch resource' );
    resourceTypes.Add( Constants::Resource_BatchResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( false );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.2: Test precondition to insert a shutdown to a Continuous resource.
    variants.Add( 'Test precondition to insert a shutdown to a Continuous resource' );
    resourceTypes.Add( Constants::Resource_ContinuousResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( false );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.3: Test precondition to insert a shutdown to a Single resource with JIT strategy
    variants.Add( 'Test precondition to insert a shutdown to a Single resource with JIT strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyJIT() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( false );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.4: Test precondition to insert a shutdown to a Single resource with Infinite strategy
    variants.Add( 'Test precondition to insert a shutdown to a Single resource with Infinite strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyInfinite() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( false );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.5: Test precondition to insert a shutdown to a Single resource with Tool Simulation strategy
    variants.Add( 'Test precondition to insert a shutdown to a Single resource with Tool Simulation strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyToolSimulation() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( false );hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.6: Test precondition to insert a shutdown to a Single resource with ASAP strategy but does not have shutdown type in resource.
    variants.Add( 'Test precondition to insert a shutdown to a Single resource with ASAP strategy but does not have shutdown type in resource' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyToolSimulation() );
    hasShutdownTypeInResources.Add( false );
    isValidForPreconInserts.Add( false );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 1.7: Test precondition to insert a shutdown to a Single resource with ASAP strategy and has shutdown type in resource.
    variants.Add( 'Test precondition to insert a shutdown to a Single resource with ASAP strategy and has shutdown type in resource' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    // Scenario 2.1: Test precondition in deleting a shutdown task with no shutdown
    variants.Add( 'Test precondition in deleting a shutdown task with no shutdown' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    /*
    Commented out because we do not implemented feedback for shutdown task yet.
    // Scenario 2.2: Test with a shutdown task with feedback
    variants.Add( 'Test with a shutdown task with feedback' );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( true );
    isValids.Add( false );
    */
    
    // Scenario 2.3: Test precondition to delete a shutdown task with shutdown and no feedback
    variants.Add( 'Test precondition to delete a shutdown task with shutdown and no feedback' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    //--------------- create edit
    // Scenario 3.1: Test precondition in create/edit a shutdown with no shutdown type
    variants.Add( 'Test precondition in create/edit a shutdown with no shutdown type' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasShutdownTypes.Add( false );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( false );
    
    
    // Scenario 3.2: Test precondition in create/edit a shutdown with zero duration
    variants.Add( 'Test precondition in create/edit a shutdown with zero duration' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Zero() );
    isValidForPreconCreateEdit.Add( false );
    
    // Scenario 3.3: Test precondition in create/edit a shutdown with valid data
    variants.Add( 'Test precondition in create/edit a shutdown with valid data' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasShutdownTypeInResources.Add( true );
    isValidForPreconInserts.Add( true );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasShutdownTypes.Add( true );
    durations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdit.Add( true );
    
    return &variants;
  *]
}
