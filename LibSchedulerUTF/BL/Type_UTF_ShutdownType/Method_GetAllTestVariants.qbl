Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Booleans hasDuplicateIDs, output Strings shutdownTypeIDs, output Strings shutdownTypeNames, 
  output Durations defaultdurations, output Booleans isValidForPreconCreateEdits, output Booleans hasResourceScopeInShutdownTypes, 
  output Booleans isViolatedResourceScopeConstraints, output Booleans hasPlannedShutdownTasks, output Booleans isValidForPreconDeletes) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1: Test precondition in creating/editing shutdown type with empty ID
    variants.Add( 'Test precondition in creating/editing shutdown type with empty ID' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( '' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( false );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 2: Test precondition in creating/editing shutdown type with duplicate ID
    variants.Add( 'Test precondition in creating/editing shutdown type with duplicate ID' );
    hasDuplicateIDs.Add( true );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( false );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 3: Test precondition in creating/editing shutdown type with empty name
    variants.Add( 'Test precondition in creating/editing shutdown type with empty name' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( '' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( false );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 4: Test precondition in creating/editing shutdown type with zero default duration
    variants.Add( 'Test precondition in creating/editing shutdown type with zero default duration' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 0 ) );
    isValidForPreconCreateEdits.Add( false );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 5: Test precondition in creating/editing shutdown type with valid data
    variants.Add( 'Test precondition in creating/editing shutdown type with valid data' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( true );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // --------------------- constraint
    // Scenario 1: Test shutdown type constraint "IsResourceSelectedInShutdownType" with no resource scope
    variants.Add( 'Test shutdown type constraint "IsResourceSelectedInShutdownType" with no resource scope' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( true );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 2: Test shutdown type constraint "IsResourceSelectedInShutdownType" with resource scope
    variants.Add( 'Test shutdown type constraint "IsResourceSelectedInShutdownType" with resource scope' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( true );
    hasResourceScopeInShutdownTypes.Add( true );
    isViolatedResourceScopeConstraints.Add( false );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // --------------------- delete shutdown
    
    // Scenario 1: Test precondition in deleting a shutdown type with planned shutdown task
    variants.Add( 'Test precondition in deleting a shutdown type with planned shutdown task' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( true );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( true );
    isValidForPreconDeletes.Add( false );
    
    // Scenario 2: Test precondition in deleting a shutdown type with no planned shutdown task
    variants.Add( 'Test precondition in deleting a shutdown type with no planned shutdown task' );
    hasDuplicateIDs.Add( false );
    shutdownTypeIDs.Add( 'Shutdown Type ID' );
    shutdownTypeNames.Add( 'Shutdown Type Name' );
    defaultdurations.Add( Duration::Hours( 1 ) );
    isValidForPreconCreateEdits.Add( true );
    hasResourceScopeInShutdownTypes.Add( false );
    isViolatedResourceScopeConstraints.Add( true );
    hasPlannedShutdownTasks.Add( false );
    isValidForPreconDeletes.Add( true );
    
    return &variants;
  *]
}
