Quintiq file version 2.0
#parent: #root
Method TestDemandBatchingCreateBatch (Schedule schedule)
{
  Description: 'Test batch creation'
  TextBody:
  [*
    // Get the test instance based on variant
    variant := this.Variant();
    
    testinstance_demandinbatches := this.GetTestInstanceDemandInBatch( variant );
    
    // Select the demands
    demands := selectset( schedule, Demand, demand, true );
    
    // Select the demand batch type
    demandbatchtype := select( schedule, DemandBatchType, type, true );
    
    // Call the method that we want to test
    demandbatch := DemandBatch::CreateBatch( schedule, demands, demandbatchtype );
    
    // Get all the demands in batche
    demandinbatches := selectset( demandbatch, DemandInBatch, dib, true );
    
    // Assert if the number of demand in batch created is correct
    this.Run().AssertEqual( testinstance_demandinbatches.Size(), demandinbatches.Size(), UTFUtility::GenerateFailedMessage( 'DemandBatching_CreateBatch', variant ) ); 
    
    // Check each the demand in batch is created with the right quantity
    traverse( testinstance_demandinbatches, Elements, testinstance )
    {
      demandinbatch := select( demandinbatches, Elements, dib, dib.Demand().DemandID() = testinstance.DemandID() )
      
      // Assert the result
      this.Run().AssertEqual( testinstance.QuantityAllowed_MultipleDemands(), guard( demandinbatch.Quantity(), 0.0 ), UTFUtility::GenerateFailedMessage( 'DemandBatching_CreateBatch', variant ) ); 
    }
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
