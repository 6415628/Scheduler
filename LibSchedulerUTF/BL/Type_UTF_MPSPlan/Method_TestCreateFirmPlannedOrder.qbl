Quintiq file version 2.0
#parent: #root
Method TestCreateFirmPlannedOrder (Schedule schedule)
{
  Description: 'Test the creation of firm planned orders from MPS planned orders.'
  TextBody:
  [*
    testInstance := this.GetTestInstance( this.Variant() );
    
    Transaction::Transaction().Propagate( relation( MPSPlannedOrder, Routing ) ); // Need this relation propagated to create firm planned orders
    Transaction::Transaction().Propagate( attribute( MPSPlannedOrder, QuantityOpen ) ); // Need updated open quantity to create firm planned orders
    
    traverse( schedule, MPSPlan.MPSPlannedOrder, mpsPlannedOrder, mpsPlannedOrder.CanCreateFirmPlannedOrder() )
    {
      mpsPlannedOrder.CreateFirmPlannedOrder();
    }
    
    // Partial propagate this declarative relation to determine that firm planned orders were indeed created for this MPS planned order
    Transaction::Transaction().Propagate( relation( MPSPlannedOrder, WorkOrder ) );
    
    allMPSPlannedOrderHasFirmPlannedOrder := forall( schedule, MPSPlan.MPSPlannedOrder, mpsPlannedOrder, mpsPlannedOrder.WorkOrder( relsize ) > 0 );
    
    // Don't need to check firm planned order creation if no mps planned orders were synchronized
    this.Run().AssertTrue( not testInstance.IsSyncMPSPlannedOrder() or allMPSPlannedOrderHasFirmPlannedOrder,
                           UTFUtility::GenerateFailedMessage( 'Creation of firm planned order failed', '' ) );
  *]
}
