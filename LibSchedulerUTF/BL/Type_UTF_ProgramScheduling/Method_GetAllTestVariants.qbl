Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Strings resourceTypes, output Strings leadTimeStrategies, output Booleans hasresourceprogramdefinitions, 
  output Booleans isaftertaskprogramchanges, output Booleans isValidForPreconInserts, output Booleans hasProgramChanges, 
  output Booleans hasFeedbacks, output Booleans isValidForPreconDelete, output Booleans hasProgramTypes, 
  output Booleans isValidForPreconCreateEdit, output Booleans isallowedtypechangeonprogramtypelevels, output Booleans isallowedtypechangeonprogramtypechangelevels, 
  output Booleans isValidForConstraintProgramTypeChanges) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // ----------------------- Precondition insert program change
    // Scenario 1.1: Test precondition to insert a program change to a Batch resource.
    variants.Add( 'Test precondition to insert a program change to a Batch resource' );
    resourceTypes.Add( Constants::Resource_BatchResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.2: Test precondition to insert a program change to a Continuous resource.
    variants.Add( 'Test precondition to insert a program change to a Continuous resource' );
    resourceTypes.Add( Constants::Resource_ContinuousResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.3: Test precondition to insert a program change to a Single resource with JIT strategy
    variants.Add( 'Test precondition to insert a program change to a Single resource with JIT strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyJIT() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.4: Test precondition to insert a program change to a Single resource with Infinite strategy
    variants.Add( 'Test precondition to insert a shutdown to a program change resource with Infinite strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyInfinite() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.5: Test precondition to insert a program change to a Single resource with Tool Simulation strategy
    variants.Add( 'Test precondition to insert a program change to a Single resource with Tool Simulation strategy' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyToolSimulation() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.6: Test precondition to insert a program change to a Single resource with ASAP strategy but resource does not have program definition.
    variants.Add( 'Test precondition to insert a program change to a Single resource with ASAP strategy but resource does not have program definition' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( false );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.7: Test precondition to insert a program change to a Single resource with ASAP strategy but aftertask is program change task.
    variants.Add( 'Test precondition to insert a program change to a Single resource with ASAP strategy but aftertask is program change task' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( true );
    isValidForPreconInserts.Add( false );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 1.8: Test precondition to insert a program change to a Single resource with ASAP strategy and resource has program definition .
    variants.Add( 'Test precondition to insert a program change to a Single resource with ASAP strategy and resource has program definition' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // ----------------------- Precondition delete program change
    // Scenario 2.1: Test precondition in deleting a task with no program change
    variants.Add( 'Test precondition in deleting a task with no program change' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isValidForPreconInserts.Add( true );
    isaftertaskprogramchanges.Add( false );
    hasProgramChanges.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    /*
    Commented out because we do not implemented feedback for program change task yet.
    // Scenario 2.2: Test with a program change task with feedback
    variants.Add( 'Test with a program change task with feedback' );
    hasShutdowns.Add( true );
    hasFeedbacks.Add( true );
    isValids.Add( false );
    */
    
    // Scenario 2.3: Test precondition to delete a program change task with program change and no feedback
    variants.Add( 'Test precondition to delete a program change task with program change and no feedback' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    //--------------- Precondition in create/edit program change
    // Scenario 3.1: Test precondition in create/edit a program change with no program type
    variants.Add( 'Test precondition in create/edit a program change with no program type' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasProgramTypes.Add( false );
    isValidForPreconCreateEdit.Add( false );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    // Scenario 3.2: Test precondition in create/edit a program change with valid data
    variants.Add( 'Test precondition in create/edit a program change with valid data' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( true );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( true );
    hasProgramTypes.Add( true );
    isValidForPreconCreateEdit.Add( true );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    //--------------- Test constraint program type change
    // Scenario 4.1: Test constraint program type change with not allowed program type change on program type level
    variants.Add( 'Test constraint program type change with not allowed program type change on program type level' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasProgramTypes.Add( false );
    isValidForPreconCreateEdit.Add( false );
    isallowedtypechangeonprogramtypelevels.Add( false );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( false );
    
    // Scenario 4.2: Test constraint program type change with not allowed program type change on program type change level
    variants.Add( 'Test constraint program type change with not allowed program type change on program type change level' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasProgramTypes.Add( false );
    isValidForPreconCreateEdit.Add( false );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( false );
    isValidForConstraintProgramTypeChanges.Add( false );
    
    // Scenario 4.3: Test constraint program type change with allowed program type change on program type change level
    variants.Add( 'Test constraint program type change with allowed program type change on program type change level' );
    resourceTypes.Add( Constants::Resource_SingleResource() );
    leadTimeStrategies.Add( Constants::StrategyASAP() );
    hasresourceprogramdefinitions.Add( true );
    isaftertaskprogramchanges.Add( false );
    isValidForPreconInserts.Add( true );
    hasProgramChanges.Add( false );
    hasFeedbacks.Add( false );
    isValidForPreconDelete.Add( false );
    hasProgramTypes.Add( false );
    isValidForPreconCreateEdit.Add( false );
    isallowedtypechangeonprogramtypelevels.Add( true );
    isallowedtypechangeonprogramtypechangelevels.Add( true );
    isValidForConstraintProgramTypeChanges.Add( true );
    
    
    return &variants;
  *]
}
