Quintiq file version 2.0
#parent: #root
Method GetBaseVariants (output Strings characteristicTypes, output Reals ruleValues, output Booleans isMinimums, 
  output Reals operationAttributeValues, output Booleans hasNoConstraintViolations) as owning Strings
{
  Description: 'Return base specific variants.'
  TextBody:
  [*
    variants := construct( Strings );
    
    /*
      Scenario 1: Test using operation width
      Scenario 2: Test using operation length
      Scenario 3: Test using operation plan unit quantity
    */
    
    // Scenario 1.1: Test rule subtype allowed mininum value - operation width subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation width subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationWidth() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 1.2: Test rule subtype allowed mininum value - operation width exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation width exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationWidth() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 1.3: Test rule subtype allowed maximum value - operation width subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation width subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationWidth() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 1.4: Test rule subtype allowed maximum value - operation width exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation width exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationWidth() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 2.1: Test rule subtype allowed mininum value - operation length subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation length subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationLength() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 2.2: Test rule subtype allowed mininum value - operation length exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - operation length exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationLength() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 2.3: Test rule subtype allowed maximum value - operation length subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation length subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationLength() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 2.4: Test rule subtype allowed maximum value - operation length exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - operation length exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_OperationLength() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 3.1: Test rule subtype allowed mininum value - plan unit quantity subceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - plan unit quantity subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 1.0 );
    hasNoConstraintViolations.Add( false );
    
    // Scenario 3.2: Test rule subtype allowed mininum value - plan unit quantity exceed rule value
    variants.Add( 'Test rule subtype allowed mininum value - plan unit quantity exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    isMinimums.Add( true );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 3.3: Test rule subtype allowed maximum value - plan unit quantity subceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - plan unit quantity subceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 10.0 );
    hasNoConstraintViolations.Add( true );
    
    // Scenario 3.4: Test rule subtype allowed maximum value - plan unit quantity exceed rule value
    variants.Add( 'Test rule subtype allowed maximum value - plan unit quantity exceed rule value' );
    characteristicTypes.Add( RuleConstant::Characteristic_PlanUnitQuantity() );
    isMinimums.Add( false );
    ruleValues.Add( 10.0 );
    operationAttributeValues.Add( 20.0 );
    hasNoConstraintViolations.Add( false );
    
    return &variants;
  *]
}
