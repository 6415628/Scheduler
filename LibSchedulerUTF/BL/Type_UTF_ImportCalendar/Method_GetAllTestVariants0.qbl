Quintiq file version 2.0
#parent: #root
Method GetAllTestVariants (output Strings subject, output Booleans isDefault, output Booleans isRecurring, 
  output Strings patternType, output Numbers recurrenceInterval, output Strings patternWeekly_Weekdays, 
  output Booleans patternMonthly_IsDay, output Numbers patternMonthly_Day, output Strings patternMonthly_WeekOfMonth, 
  output Strings patternMonthly_DayOfWeek, output Booleans patternYearly_IsDay, output Numbers patternYearly_Month, 
  output Numbers patternYearly_Day, output Strings patternYearly_WeekOfMonth, output Strings patternYearly_DayOfWeek, 
  output Booleans eventIsRecurring, output Strings periodType, output Dates periodStartDate) as owning Strings
{
  Description: 'Return all test variants, variant output arguments (columns) will be used in data creation logic.'
  TextBody:
  [*
    variants := construct( Strings );
    
    // Scenario 1: Test with no recurrence
    variants.Add( 'Test with no recurrence' );
    // Event
    subject.Add( 'Unavailable_NoRecurrence' );
    isDefault.Add( false );
    isRecurring.Add( false );
    patternType.Add('');
    recurrenceInterval.Add( 0 );
    patternWeekly_Weekdays.Add('');
    patternMonthly_IsDay.Add( false );
    patternMonthly_Day.Add( 0 );
    patternMonthly_WeekOfMonth.Add('');
    patternMonthly_DayOfWeek.Add('');
    patternYearly_IsDay.Add( false );
    patternYearly_Month.Add( 0 );
    patternYearly_Day.Add( 0 );
    patternYearly_WeekOfMonth.Add('');
    patternYearly_DayOfWeek.Add('');
    // Participant
    eventIsRecurring.Add( false );
    periodType.Add( '' );
    periodStartDate.Add( Date::MinDate() );
    
    // Scenario 2: Test with weekly recurrence
    variants.Add( 'Test with weekly recurrence' );
    // Event
    subject.Add( 'Unavailable_Weekly' )
    isDefault.Add( true );
    isRecurring.Add( true );
    patternType.Add( 'Weekly' );
    recurrenceInterval.Add( 1 );
    patternWeekly_Weekdays.Add('Mon;');
    patternMonthly_IsDay.Add( false );
    patternMonthly_Day.Add( 0 );
    patternMonthly_WeekOfMonth.Add('');
    patternMonthly_DayOfWeek.Add('');
    patternYearly_IsDay.Add(false);
    patternYearly_Month.Add( 0 );
    patternYearly_Day.Add( 0 );
    patternYearly_WeekOfMonth.Add('');
    patternYearly_DayOfWeek.Add('');
    // Participant
    eventIsRecurring.Add( true )
    periodType.Add( 'WithoutEnd' )
    periodStartDate.Add( Date::Construct( 2017, 1, 5 ) );
    
    // Scenario 3: Test without monthly recurrence by day
    variants.Add( 'Test without monthly recurrence by day' );
    // Event
    subject.Add( 'Unavailable_MonthlyByDay' )
    isDefault.Add( true );
    isRecurring.Add( true );
    patternType.Add( 'Monthly' );
    recurrenceInterval.Add( 1 );
    patternWeekly_Weekdays.Add('')
    patternMonthly_IsDay.Add( true )
    patternMonthly_Day.Add( 1 )
    patternMonthly_WeekOfMonth.Add('')
    patternMonthly_DayOfWeek.Add('')
    patternYearly_IsDay.Add( false )
    patternYearly_Month.Add( 0 )
    patternYearly_Day.Add( 0 )
    patternYearly_WeekOfMonth.Add('')
    patternYearly_DayOfWeek.Add('')
    // Participant
    eventIsRecurring.Add( true )
    periodType.Add( 'WithoutEnd' )
    periodStartDate.Add( Date::Construct( 2017, 1, 5 ) );
    
    // Scenario 4: Test with month recurrence by weekday
    variants.Add( 'Test with month recurrence by weekday' );
    // Event
    subject.Add( 'Unavailable_MonthlyByWeekday' )
    isDefault.Add( true );
    isRecurring.Add( true );
    patternType.Add( 'Monthly' );
    recurrenceInterval.Add( 1 );
    patternWeekly_Weekdays.Add('')
    patternMonthly_IsDay.Add( false )
    patternMonthly_Day.Add( 0 )
    patternMonthly_WeekOfMonth.Add('first')
    patternMonthly_DayOfWeek.Add('Thursday')
    patternYearly_IsDay.Add( false )
    patternYearly_Month.Add( 0 )
    patternYearly_Day.Add( 0 )
    patternYearly_WeekOfMonth.Add('')
    patternYearly_DayOfWeek.Add('')
    // Participant
    eventIsRecurring.Add( true )
    periodType.Add( 'WithoutEnd' )
    periodStartDate.Add( Date::Construct( 2017, 1, 5 ) );
    
    // Scenario 5: Test without yearly recurrence by month
    variants.Add( 'Test without yearly recurrence by month' );
    // Event
    subject.Add( 'Unavailable_YearlyByMonth' )
    isDefault.Add( true );
    isRecurring.Add( true );
    patternType.Add( 'Yearly' );
    recurrenceInterval.Add( 1 );
    patternWeekly_Weekdays.Add('');
    patternMonthly_IsDay.Add( false );
    patternMonthly_Day.Add( 0 );
    patternMonthly_WeekOfMonth.Add('');
    patternMonthly_DayOfWeek.Add('');
    patternYearly_IsDay.Add( true );
    patternYearly_Month.Add( 1 );
    patternYearly_Day.Add( 5 );
    patternYearly_WeekOfMonth.Add('');
    patternYearly_DayOfWeek.Add('');
    // Participant
    eventIsRecurring.Add( true )
    periodType.Add( 'WithoutEnd' )
    periodStartDate.Add( Date::Construct( 2017, 1, 5 ) );
    
    // Scenario 6: Test without yearly recurrence by weekday and month
    variants.Add( 'Test without yearly recurrence by weekday and month' );
    // Event
    subject.Add( 'Unavailable_YearlyByWeekdayAndMonth' )
    isDefault.Add( true );
    isRecurring.Add( true );
    patternType.Add( 'Yearly' );
    recurrenceInterval.Add( 1 );
    patternWeekly_Weekdays.Add('');
    patternMonthly_IsDay.Add( false );
    patternMonthly_Day.Add( 0 );
    patternMonthly_WeekOfMonth.Add('');
    patternMonthly_DayOfWeek.Add('');
    patternYearly_IsDay.Add( false );
    patternYearly_Month.Add( 1 );
    patternYearly_Day.Add( 0 );
    patternYearly_WeekOfMonth.Add('first');
    patternYearly_DayOfWeek.Add('Thursday');
    // Participant
    eventIsRecurring.Add( true )
    periodType.Add( 'WithoutEnd' )
    periodStartDate.Add( Date::Construct( 2017, 1, 5 ) );
    
    return &variants;
  *]
}
