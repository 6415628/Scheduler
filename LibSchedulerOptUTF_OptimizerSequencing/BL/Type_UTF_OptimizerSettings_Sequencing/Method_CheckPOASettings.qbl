Quintiq file version 2.0
#parent: #root
Method CheckPOASettings (SettingsSequencingPOAForSequencing poasettings, SettingsSequencingPOAForSequencing originalsettings) as Boolean
{
  Description: 'Checks to see if the imported settings are the same as the stored(exported) ones.'
  TextBody:
  [*
    // jog2 Nov-12-2020 (created)
    
    value := false;
    
    if( poasettings.IsAllowResourceExchangability() = originalsettings.IsAllowResourceExchangability()
        and poasettings.IsForceHandleResult() = originalsettings.IsForceHandleResult()
        and poasettings.IsLogPlanInformation() = originalsettings.IsLogPlanInformation()
        and poasettings.IsRespectMakespanKPI() = originalsettings.IsRespectMakespanKPI()
        and poasettings.IsUseEmptyDebugStrategy() = originalsettings.IsUseEmptyDebugStrategy()
        and poasettings.MaxPathPopulation() = originalsettings.MaxPathPopulation()
        and poasettings.NrOfNodesForDestruction() = originalsettings.NrOfNodesForDestruction()
        and poasettings.NrOfThreads() = originalsettings.NrOfThreads()
        and poasettings.NrOfStartSolutionThreads() = originalsettings.NrOfStartSolutionThreads()
        and poasettings.OutOfOrderPenaltyFactor() = originalsettings.OutOfOrderPenaltyFactor()
        and poasettings.OutOfOrderPenaltyOffset() = originalsettings.OutOfOrderPenaltyOffset()
        and poasettings.SequencePenaltyFactor() = originalsettings.SequencePenaltyFactor()
        and poasettings.SequencePenaltyPower() = originalsettings.SequencePenaltyPower()
        and poasettings.TimeLimit() = poasettings.TimeLimit() )
    {
      value := true;
    }
    
    return value;
  *]
}
