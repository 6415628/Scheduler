Quintiq file version 2.0
#parent: #root
Method Test015_Span_ScopeSpanningSequenceNeighbors (Schedule schedule)
{
  Description: 'tests the span calculation\'s "spanning sequence neighbors" requirement.'
  TextBody:
  [*
    // mbr23 Jan-10-2020 (created)
    
    // start scenario for test is empty schedule:
    schedule.UnplanAll();
    // pick one resource and autoplan all operations on that resource:
    resource := select( schedule, Operation_SC.AllowedOperationOnResource.AllowedResource_SC, r, true );
    operations_planned := selectset( resource, AsAllowedResource.Operation_SC, op, true );
    schedule.PlanOperations( operations_planned, resource );
    this.Run().AssertGreater( 2, counter( resource, Task_SC, t, true ), "Autoplan needs to plan more than 2 tasks." );
    
    // select one task in the middle of the resource:
    task := select( resource, Task_SC, task, not isnull( task.Next() ) and not isnull( task.Previous() ) );
    this.Run().AssertNotIsNull( task, "After autoplanning, there is no task with both a next and a previous task on resource " + resource.ResourceID() );
    Transaction::Transaction().Propagate( relation( Task_SC, OperationInTask ) ); // traversing the relation next. It's declarative.
    operation := select( task, OperationInTask, op, true );
    this.Run().AssertNotIsNull( operation );
    
    scope := construct( LibOpt_ScopeElements );
    scope.Add( operation.GetOrCreateScopeElement() );
    scope.Add( resource.GetOrCreateScopeElement() );
    neighbors_planned := construct( LibOpt_ScopeElements );
    traverse( task.Next(), OperationInTask, op )
    {
      neighbors_planned.Add( op.GetOrCreateScopeElement() );
    }
    traverse( task.Previous(), OperationInTask, op )
    {
      neighbors_planned.Add( op.GetOrCreateScopeElement() );
    }
    
    run := UTF_Optimizer_Regression_Test_OptimizerSequencing::CreateSelectorScopeOnlyRun( UTF_Optimizer_Regression_Test_OptimizerSequencing::Optimizer( schedule ),
                                                                                          scope,
                                                                                          null( SettingsSequencingNeighborhoodCreatorForSpanCreator, owning ) );
    selector := selectobject( run, Component, c, true );
    
    // assert that span contains `neighbors_planned`: 
    run.Start() ->| neighbors_planned -> UTF_Optimizer_Regression_Test_OptimizerSequencing::AssertOutputScopeContains( this.Run(), selector )->Exception()->(exception) {
      this.Run().RegisterFailure( "post-optimization assert failed:\n" + exception.Message() );
    };
  *]
}
