Quintiq file version 2.0
#parent: #root
Method Test017_Span_ScopeResourceAppendix (Schedule schedule)
{
  Description: 'tests the span calculation\'s "allow resource appendix" requirement.'
  TextBody:
  [*
    // mbr23 Jan-10-2020 (created)
    
    // start scenario for test is empty schedule:
    schedule.UnplanAll();
    // pick one resource and autoplan all operations on that resource:
    resource := select( schedule, Operation_SC.AllowedOperationOnResource.AllowedResource_SC, r, true );
    operations_planned := selectset( resource, AsAllowedResource.Operation_SC, op, true );
    schedule.PlanOperations( operations_planned, resource );
    Transaction::Transaction().Propagate();
    
    // pick one operation (our scope operation) and unplan it from that resource:
    task := minselect( resource, Task_SC, task, true, Real::Random() );
    operations := selectset( task, OperationInTask, op, true );
    task.Unplan();
    Transaction::Transaction().Propagate();
    
    scope := construct( LibOpt_ScopeElements );
    traverse( operations, Elements, op )
    {
      scope.Add( op.GetOrCreateScopeElement() );
    }
    scope.Add( resource.GetOrCreateScopeElement() );
    
    last_operations := construct( LibOpt_ScopeElements );
    traverse( resource.Last(), OperationInTask, op )
    {
      last_operations.Add( op.GetOrCreateScopeElement() );
    }
    
    run := UTF_Optimizer_Regression_Test_OptimizerSequencing::CreateSelectorScopeOnlyRun( UTF_Optimizer_Regression_Test_OptimizerSequencing::Optimizer( schedule ),
                                                                                          scope,
                                                                                          null( SettingsSequencingNeighborhoodCreatorForSpanCreator, owning ) );
    selector := selectobject( run, Component, c, true );
    
    // assert that span contains `operations_planned_scopeelements`: 
    run.Start() ->| last_operations -> UTF_Optimizer_Regression_Test_OptimizerSequencing::AssertOutputScopeContains( this.Run(), selector )->Exception()->(exception) {
      this.Run().RegisterFailure( "post-optimization assert failed:\n" + exception.Message() );
    };
  *]
}
