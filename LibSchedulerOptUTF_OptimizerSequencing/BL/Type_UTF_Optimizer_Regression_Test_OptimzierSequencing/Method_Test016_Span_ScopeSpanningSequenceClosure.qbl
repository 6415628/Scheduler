Quintiq file version 2.0
#parent: #root
Method Test016_Span_ScopeSpanningSequenceClosure (Schedule schedule)
{
  Description: 'tests the span calculation\'s "spanning sequence closure" requirement.'
  TextBody:
  [*
    // mbr23 Jan-10-2020 (created)
    
    // start scenario for test is empty schedule:
    schedule.UnplanAll();
    // pick one resource and autoplan all operations on that resource:
    resource := select( schedule, Operation_SC.AllowedOperationOnResource.AllowedResource_SC, r, true );
    operations_planned := selectset( resource, AsAllowedResource.Operation_SC, op, true );
    schedule.PlanOperations( operations_planned, resource );
    this.Run().AssertGreater( 2, counter( resource, Task_SC, t, true ), "After autoplanning, the resource must have more than 2 tasks." );
    
    Transaction::Transaction().Propagate( attribute( Task_SC, SequenceNr ) ); // used below for finding first/last
    // select first and last task on the resource:
    first_task := minselect( resource, Task_SC, task, true, task.SequenceNr() );
    last_task := maxselect( resource, Task_SC, task, true, task.SequenceNr() );
    this.Run().AssertNotIsNull( first_task );
    this.Run().AssertNotIsNull( last_task );
    this.Run().AssertTrue( first_task <> last_task, "The firist and last task after autoplanning are the same on resource " + resource.ResourceID() );
    
    Transaction::Transaction().Propagate( relation( Task_SC, OperationInTask ) ); // traversing the relation next. It's declarative.
    scope := construct( LibOpt_ScopeElements );
    traverse( first_task, OperationInTask, op )
    {
      scope.Add( op.GetOrCreateScopeElement() );
    }
    traverse( last_task, OperationInTask, op )
    {
      scope.Add( op.GetOrCreateScopeElement() );
    }
    this.Run().AssertGreater( 1, scope.Size(), "Scope must contain more than 1 element" );
    
    sequence_planned := construct( LibOpt_ScopeElements );
    traverse( resource, Task_SC.OperationInTask, op )
    {
      sequence_planned.Add( op.GetOrCreateScopeElement() );
    }
    
    run := UTF_Optimizer_Regression_Test_OptimizerSequencing::CreateSelectorScopeOnlyRun( UTF_Optimizer_Regression_Test_OptimizerSequencing::Optimizer( schedule ),
                                                                                          scope,
                                                                                          null( SettingsSequencingNeighborhoodCreatorForSpanCreator, owning ) );
    selector := selectobject( run, Component, c, true );
    
    // assert that span contains `sequence_planned`: 
    run.Start() ->| sequence_planned -> UTF_Optimizer_Regression_Test_OptimizerSequencing::AssertOutputScopeContains( this.Run(), selector )->Exception()->(exception) {
      this.Run().RegisterFailure( "post-optimization assert failed:\n" + exception.Message() );
    };
  *]
}
