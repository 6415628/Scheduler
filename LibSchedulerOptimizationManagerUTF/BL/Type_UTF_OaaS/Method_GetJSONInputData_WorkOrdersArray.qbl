Quintiq file version 2.0
#parent: #root
Method GetJSONInputData_WorkOrdersArray () const as owning JSONBuilder
{
  Description: 'Generates a standard work order JSON input data similar to data from 3DSpace.'
  TextBody:
  [*
    // Create workOrders array
    workOrders := JSON::Array();
    
    // Create WorkOrder1
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder1" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process1" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray( 1 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    // Create WorkOrder2
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder2" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process1" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray( 2 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    // Create WorkOrder3 (CANCELLED)
    workOrders.Add( this.GetJSONInputData_WorkOrder_Cancelled() );
    
    // Create WorkOrder4 (WIP and Completed operations)
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder4" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process1" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray_WIP_Completed( 4 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    return &workOrders;
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
