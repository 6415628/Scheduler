Quintiq file version 2.0
#parent: #root
Method GetJSONInputData_WorkOrdersArray_Updated () const as owning JSONBuilder
{
  Description:
  [*
    Generates a standard work order JSON input data similar to data from 3DSpace.
    Only contains new data to update.
  *]
  TextBody:
  [*
    // Create workOrders array
    workOrders := JSON::Array();
    
    // Create WorkOrder5
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder5" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process2" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray_Updated( 5 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    // Create WorkOrder6
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder6" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process2" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray_Updated( 6 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    // Create WorkOrder7 (CANCELLED)
    workOrders.Add( this.GetJSONInputData_WorkOrder_Cancelled_Updated() );
    
    // Create WorkOrder8 (WIP and Completed operations)
    workOrder := JSON::Object();
    workOrder.Add( Constants::JSON_WorkOrder_ID(), "WorkOrder8" );
    workOrder.Add( Constants::JSON_WorkOrder_ProcessID(), "Process2" );
    workOrder.Add( Constants::JSON_WorkOrder_DueDate(), DateTimeToString::ISOConverter().Convert( DateTime::Construct( 2019, 8, 27 ) ) );
    workOrder.Add( Constants::JSON_WorkOrder_Quantity(), 1 );
    workOrder.Add( Constants::JSON_WorkOrder_Maturity(), Constants::MaturityStatus_FIRM() );
    workOrder.Add( Constants::JSON_WorkOrder_Priority(), 1 );
    
    // Add operations to workOrder
    workOrder.Add( Constants::JSON_WorkOrder_Operations(), this.GetJSONInputData_WorkOrderOperationsArray_WIP_Completed_Updated( 8 ) );
    
    // Add workOrder to workOrders array
    workOrders.Add( workOrder );
    
    return &workOrders;
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
