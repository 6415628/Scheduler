Quintiq file version 2.0
#parent: #root
Method GetDataForAllTestVariants (output owning Strings variants, output Strings operationIDs, output Strings resourceIDs, 
  output DateTimes insertionTimes, output Booleans results) const
{
  Description: 'Return data for all test variants.'
  TextBody:
  [*
    // Flush all data first
    operationIDs.Flush();
    resourceIDs.Flush();
    insertionTimes.Flush();
    results.Flush();
    variants.Flush();
    
    // Scenario 1 - Move operation with all valid details
    operationIDs.Add( 'WorkOrderOperation5-1' );
    resourceIDs.Add( 'Asset2' );
    insertionTimes.Add( DateTime::Construct( 2019, 8, 21, 6, 10, 0 ) );
    results.Add( true );
    variants.Add( 'Move operation with all valid details' );
    
    // Scenario 2 - Move operation with invalid resource ID
    operationIDs.Add( 'WorkOrderOperation5-1' );
    resourceIDs.Add( 'Asset3' );
    insertionTimes.Add( DateTime::Construct( 2019, 8, 21, 6, 10, 0 ) );
    results.Add( false );
    variants.Add( 'Move operation with invalid resource ID' );
    
    // Scenario 3 - Move operation with invalid operation ID
    operationIDs.Add( 'WorkOrderOperation5-9' );
    resourceIDs.Add( 'Asset1' );
    insertionTimes.Add( DateTime::Construct( 2019, 8, 21, 6, 11, 0 ) );
    results.Add( false );
    variants.Add( 'Move operation with invalid operation ID' );
    
    // Scenario 4 - Move operation with invalid insertion time
    operationIDs.Add( 'WorkOrderOperation5-1' );
    resourceIDs.Add( 'Asset1' );
    insertionTimes.Add( DateTime::Construct( 2019, 8, 20, 6, 10, 0 ) );
    results.Add( false );
    variants.Add( 'Move operation with invalid insertion time' );
  *]
  InterfaceProperties { Accessibility: 'Module' }
}
